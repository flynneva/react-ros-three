{"version":3,"sources":["webpack://lib/../node_modules/use-cannon/dist/Provider-8c057efb.js"],"names":[],"mappings":";;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsL,kBAAkB,wCAAwC,cAAc,MAAM,kDAAkD,IAAI,yBAAyB,iEAAiE,SAAS,2GAA2G,8BAA8B,EAAE,8BAA8B,6g5IAA6g5I,cAAc,8yotBAA8yotB,qCAAqC,EAAiB,yEAAU,wJAAwJ,6BAA6B,YAAY,EAAE,MAAM,aAAa,CAAC,kEAAC,OAAO,sDAAC,gBAAgB,sDAAC,GAAG,MAAM,sDAAC,OAAO,kEAAkE,OAAO,sDAAC,GAAG,MAAM,sDAAC,GAAG,IAAI,oDAAC,GAAG,EAAE,uDAAC,MAAM,aAAa,cAAc,4DAAC,EAAE,UAAU,+CAA+C,sBAAsB,iBAAiB,0GAA0G,kBAAkB,kBAAkB,oKAAoK,MAAM,iDAAiD,4DAAC,GAAG,IAAI,6BAA6B,IAAI,EAAE,MAAM,gCAAgC,+BAA+B,4DAAC,GAAG,SAAS,4CAA4C,GAAG,MAAM,gCAAgC,4DAAC,GAAG,SAAS,qCAAqC,KAAK,uBAAuB,KAAK,QAAQ,qDAAC,OAAO,4DAA4D,iBAAiB,OAAO,4CAAC,eAAe,oDAAC,WAAW,QAAQ,IAAI","file":"0.render-page.js","sourcesContent":["import I,{useState as g,useRef as B,useEffect as F,useMemo as b}from\"react\";import{_ as G,c as C}from\"./index-e0bcab3d.js\";import\"three\";import{useThree as Q}from\"react-three-fiber\";function U(I,g,B){var F=void 0===g?null:g,b=function(I,g){var B=atob(I);if(g){for(var F=new Uint8Array(B.length),b=0,G=B.length;b<G;++b)F[b]=B.charCodeAt(b);return String.fromCharCode.apply(null,new Uint16Array(F.buffer))}return B}(I,void 0!==B&&B),G=b.indexOf(\"\\n\",10)+1,C=b.substring(G)+(F?\"//# sourceMappingURL=\"+F:\"\"),Q=new Blob([C],{type:\"application/javascript\"});return URL.createObjectURL(Q)}var c,l,V,Z,d=(c=\"/* rollup-plugin-web-worker-loader */
function t(){return(t=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var s=arguments[e];for(var i in s)Object.prototype.hasOwnProperty.call(s,i)&&(t[i]=s[i])}return t}).apply(this,arguments)}function e(t,e){if(null==t)return{};var s,i,o={},n=Object.keys(t);for(i=0;i<n.length;i++)s=n[i],e.indexOf(s)>=0||(o[s]=t[s]);return o}class s{constructor(t=[0,0,0,0,0,0,0,0,0]){this.elements=t}identity(){const t=this.elements;t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1}setZero(){const t=this.elements;t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t[8]=0}setTrace(t){const e=this.elements;e[0]=t.x,e[4]=t.y,e[8]=t.z}getTrace(t=new i){const e=this.elements;t.x=e[0],t.y=e[4],t.z=e[8]}vmult(t,e=new i){const s=this.elements,o=t.x,n=t.y,r=t.z;return e.x=s[0]*o+s[1]*n+s[2]*r,e.y=s[3]*o+s[4]*n+s[5]*r,e.z=s[6]*o+s[7]*n+s[8]*r,e}smult(t){for(let e=0;e<this.elements.length;e++)this.elements[e]*=t}mmult(t,e=new s){const{elements:i}=t;for(let t=0;t<3;t++)for(let s=0;s<3;s++){let o=0;for(let e=0;e<3;e++)o+=i[t+3*e]*this.elements[e+3*s];e.elements[t+3*s]=o}return e}scale(t,e=new s){const i=this.elements,o=e.elements;for(let e=0;3!==e;e++)o[3*e+0]=t.x*i[3*e+0],o[3*e+1]=t.y*i[3*e+1],o[3*e+2]=t.z*i[3*e+2];return e}solve(t,e=new i){const s=[];let o,n;for(o=0;o<12;o++)s.push(0);for(o=0;o<3;o++)for(n=0;n<3;n++)s[o+4*n]=this.elements[o+3*n];s[3]=t.x,s[7]=t.y,s[11]=t.z;let r=3;const a=r;let l;let h;do{if(o=a-r,0===s[o+4*o])for(n=o+1;n<a;n++)if(0!==s[o+4*n]){l=4;do{h=4-l,s[h+4*o]+=s[h+4*n]}while(--l);break}if(0!==s[o+4*o])for(n=o+1;n<a;n++){const t=s[o+4*n]/s[o+4*o];l=4;do{h=4-l,s[h+4*n]=h<=o?0:s[h+4*n]-s[h+4*o]*t}while(--l)}}while(--r);if(e.z=s[11]/s[10],e.y=(s[7]-s[6]*e.z)/s[5],e.x=(s[3]-s[2]*e.z-s[1]*e.y)/s[0],isNaN(e.x)||isNaN(e.y)||isNaN(e.z)||e.x===1/0||e.y===1/0||e.z===1/0)throw"Could not solve equation! Got x=["+e.toString()+"], b=["+t.toString()+"], A=["+this.toString()+"]";return e}e(t,e,s){if(void 0===s)return this.elements[e+3*t];this.elements[e+3*t]=s}copy(t){for(let e=0;e<t.elements.length;e++)this.elements[e]=t.elements[e];return this}toString(){let t="";for(let e=0;e<9;e++)t+=this.elements[e]+",";return t}reverse(t=new s){const e=[];let i,o;for(i=0;i<18;i++)e.push(0);for(i=0;i<3;i++)for(o=0;o<3;o++)e[i+6*o]=this.elements[i+3*o];e[3]=1,e[9]=0,e[15]=0,e[4]=0,e[10]=1,e[16]=0,e[5]=0,e[11]=0,e[17]=1;let n=3;const r=n;let a;let l;do{if(i=r-n,0===e[i+6*i])for(o=i+1;o<r;o++)if(0!==e[i+6*o]){a=6;do{l=6-a,e[l+6*i]+=e[l+6*o]}while(--a);break}if(0!==e[i+6*i])for(o=i+1;o<r;o++){const t=e[i+6*o]/e[i+6*i];a=6;do{l=6-a,e[l+6*o]=l<=i?0:e[l+6*o]-e[l+6*i]*t}while(--a)}}while(--n);i=2;do{o=i-1;do{const t=e[i+6*o]/e[i+6*i];a=6;do{l=6-a,e[l+6*o]=e[l+6*o]-e[l+6*i]*t}while(--a)}while(o--)}while(--i);i=2;do{const t=1/e[i+6*i];a=6;do{l=6-a,e[l+6*i]=e[l+6*i]*t}while(--a)}while(i--);i=2;do{o=2;do{if(l=e[3+o+6*i],isNaN(l)||l===1/0)throw"Could not reverse! A=["+this.toString()+"]";t.e(i,o,l)}while(o--)}while(i--);return t}setRotationFromQuaternion(t){const e=t.x,s=t.y,i=t.z,o=t.w,n=e+e,r=s+s,a=i+i,l=e*n,h=e*r,c=e*a,u=s*r,d=s*a,p=i*a,y=o*n,m=o*r,v=o*a,w=this.elements;return w[0]=1-(u+p),w[1]=h-v,w[2]=c+m,w[3]=h+v,w[4]=1-(l+p),w[5]=d-y,w[6]=c-m,w[7]=d+y,w[8]=1-(l+u),this}transpose(t=new s){const e=t.elements,i=this.elements;for(let t=0;3!==t;t++)for(let s=0;3!==s;s++)e[3*t+s]=i[3*s+t];return t}}class i{constructor(t=0,e=0,s=0){this.x=t,this.y=e,this.z=s}cross(t,e=new i){const s=t.x,o=t.y,n=t.z,r=this.x,a=this.y,l=this.z;return e.x=a*n-l*o,e.y=l*s-r*n,e.z=r*o-a*s,e}set(t,e,s){return this.x=t,this.y=e,this.z=s,this}setZero(){this.x=this.y=this.z=0}vadd(t,e){if(!e)return new i(this.x+t.x,this.y+t.y,this.z+t.z);e.x=t.x+this.x,e.y=t.y+this.y,e.z=t.z+this.z}vsub(t,e){if(!e)return new i(this.x-t.x,this.y-t.y,this.z-t.z);e.x=this.x-t.x,e.y=this.y-t.y,e.z=this.z-t.z}crossmat(){return new s([0,-this.z,this.y,this.z,0,-this.x,-this.y,this.x,0])}normalize(){const t=this.x,e=this.y,s=this.z,i=Math.sqrt(t*t+e*e+s*s);if(i>0){const t=1/i;this.x*=t,this.y*=t,this.z*=t}else this.x=0,this.y=0,this.z=0;return i}unit(t=new i){const e=this.x,s=this.y,o=this.z;let n=Math.sqrt(e*e+s*s+o*o);return n>0?(n=1/n,t.x=e*n,t.y=s*n,t.z=o*n):(t.x=1,t.y=0,t.z=0),t}length(){const t=this.x,e=this.y,s=this.z;return Math.sqrt(t*t+e*e+s*s)}lengthSquared(){return this.dot(this)}distanceTo(t){const e=this.x,s=this.y,i=this.z,o=t.x,n=t.y,r=t.z;return Math.sqrt((o-e)*(o-e)+(n-s)*(n-s)+(r-i)*(r-i))}distanceSquared(t){const e=this.x,s=this.y,i=this.z,o=t.x,n=t.y,r=t.z;return(o-e)*(o-e)+(n-s)*(n-s)+(r-i)*(r-i)}scale(t,e=new i){const s=this.x,o=this.y,n=this.z;return e.x=t*s,e.y=t*o,e.z=t*n,e}vmul(t,e=new i){return e.x=t.x*this.x,e.y=t.y*this.y,e.z=t.z*this.z,e}addScaledVector(t,e,s=new i){return s.x=this.x+t*e.x,s.y=this.y+t*e.y,s.z=this.z+t*e.z,s}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}isZero(){return 0===this.x&&0===this.y&&0===this.z}negate(t=new i){return t.x=-this.x,t.y=-this.y,t.z=-this.z,t}tangents(t,e){const s=this.length();if(s>0){const i=o,r=1/s;i.set(this.x*r,this.y*r,this.z*r);const a=n;Math.abs(i.x)<.9?(a.set(1,0,0),i.cross(a,t)):(a.set(0,1,0),i.cross(a,t)),i.cross(t,e)}else t.set(1,0,0),e.set(0,1,0)}toString(){return this.x+","+this.y+","+this.z}toArray(){return[this.x,this.y,this.z]}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}lerp(t,e,s){const i=this.x,o=this.y,n=this.z;s.x=i+(t.x-i)*e,s.y=o+(t.y-o)*e,s.z=n+(t.z-n)*e}almostEquals(t,e=1e-6){return!(Math.abs(this.x-t.x)>e||Math.abs(this.y-t.y)>e||Math.abs(this.z-t.z)>e)}almostZero(t=1e-6){return!(Math.abs(this.x)>t||Math.abs(this.y)>t||Math.abs(this.z)>t)}isAntiparallelTo(t,e){return this.negate(r),r.almostEquals(t,e)}clone(){return new i(this.x,this.y,this.z)}}i.ZERO=new i(0,0,0),i.UNIT_X=new i(1,0,0),i.UNIT_Y=new i(0,1,0),i.UNIT_Z=new i(0,0,1);const o=new i,n=new i,r=new i;class a{constructor(t={}){this.lowerBound=new i,this.upperBound=new i,t.lowerBound&&this.lowerBound.copy(t.lowerBound),t.upperBound&&this.upperBound.copy(t.upperBound)}setFromPoints(t,e,s,i){const o=this.lowerBound,n=this.upperBound,r=s;o.copy(t[0]),r&&r.vmult(o,o),n.copy(o);for(let e=1;e<t.length;e++){let s=t[e];r&&(r.vmult(s,l),s=l),s.x>n.x&&(n.x=s.x),s.x<o.x&&(o.x=s.x),s.y>n.y&&(n.y=s.y),s.y<o.y&&(o.y=s.y),s.z>n.z&&(n.z=s.z),s.z<o.z&&(o.z=s.z)}return e&&(e.vadd(o,o),e.vadd(n,n)),i&&(o.x-=i,o.y-=i,o.z-=i,n.x+=i,n.y+=i,n.z+=i),this}copy(t){return this.lowerBound.copy(t.lowerBound),this.upperBound.copy(t.upperBound),this}clone(){return(new a).copy(this)}extend(t){this.lowerBound.x=Math.min(this.lowerBound.x,t.lowerBound.x),this.upperBound.x=Math.max(this.upperBound.x,t.upperBound.x),this.lowerBound.y=Math.min(this.lowerBound.y,t.lowerBound.y),this.upperBound.y=Math.max(this.upperBound.y,t.upperBound.y),this.lowerBound.z=Math.min(this.lowerBound.z,t.lowerBound.z),this.upperBound.z=Math.max(this.upperBound.z,t.upperBound.z)}overlaps(t){const e=this.lowerBound,s=this.upperBound,i=t.lowerBound,o=t.upperBound,n=i.x<=s.x&&s.x<=o.x||e.x<=o.x&&o.x<=s.x,r=i.y<=s.y&&s.y<=o.y||e.y<=o.y&&o.y<=s.y,a=i.z<=s.z&&s.z<=o.z||e.z<=o.z&&o.z<=s.z;return n&&r&&a}volume(){const t=this.lowerBound,e=this.upperBound;return(e.x-t.x)*(e.y-t.y)*(e.z-t.z)}contains(t){const e=this.lowerBound,s=this.upperBound,i=t.lowerBound,o=t.upperBound;return e.x<=i.x&&s.x>=o.x&&e.y<=i.y&&s.y>=o.y&&e.z<=i.z&&s.z>=o.z}getCorners(t,e,s,i,o,n,r,a){const l=this.lowerBound,h=this.upperBound;t.copy(l),e.set(h.x,l.y,l.z),s.set(h.x,h.y,l.z),i.set(l.x,h.y,h.z),o.set(h.x,l.y,h.z),n.set(l.x,h.y,l.z),r.set(l.x,l.y,h.z),a.copy(h)}toLocalFrame(t,e){const s=h,i=s[0],o=s[1],n=s[2],r=s[3],a=s[4],l=s[5],c=s[6],u=s[7];this.getCorners(i,o,n,r,a,l,c,u);for(let e=0;8!==e;e++){const i=s[e];t.pointToLocal(i,i)}return e.setFromPoints(s)}toWorldFrame(t,e){const s=h,i=s[0],o=s[1],n=s[2],r=s[3],a=s[4],l=s[5],c=s[6],u=s[7];this.getCorners(i,o,n,r,a,l,c,u);for(let e=0;8!==e;e++){const i=s[e];t.pointToWorld(i,i)}return e.setFromPoints(s)}overlapsRay(t){const{direction:e,from:s}=t,i=1/e.x,o=1/e.y,n=1/e.z,r=(this.lowerBound.x-s.x)*i,a=(this.upperBound.x-s.x)*i,l=(this.lowerBound.y-s.y)*o,h=(this.upperBound.y-s.y)*o,c=(this.lowerBound.z-s.z)*n,u=(this.upperBound.z-s.z)*n,d=Math.max(Math.max(Math.min(r,a),Math.min(l,h)),Math.min(c,u)),p=Math.min(Math.min(Math.max(r,a),Math.max(l,h)),Math.max(c,u));return!(p<0)&&!(d>p)}}const l=new i,h=[new i,new i,new i,new i,new i,new i,new i,new i];class c{constructor(){this.matrix=[]}get(t,e){let{index:s}=t,{index:i}=e;if(i>s){const t=i;i=s,s=t}return this.matrix[(s*(s+1)>>1)+i-1]}set(t,e,s){let{index:i}=t,{index:o}=e;if(o>i){const t=o;o=i,i=t}this.matrix[(i*(i+1)>>1)+o-1]=s?1:0}reset(){for(let t=0,e=this.matrix.length;t!==e;t++)this.matrix[t]=0}setNumObjects(t){this.matrix.length=t*(t-1)>>1}}class u{constructor(){}addEventListener(t,e){void 0===this._listeners&&(this._listeners={});const s=this._listeners;return void 0===s[t]&&(s[t]=[]),s[t].includes(e)||s[t].push(e),this}hasEventListener(t,e){if(void 0===this._listeners)return!1;const s=this._listeners;return!(void 0===s[t]||!s[t].includes(e))}hasAnyEventListener(t){if(void 0===this._listeners)return!1;return void 0!==this._listeners[t]}removeEventListener(t,e){if(void 0===this._listeners)return this;const s=this._listeners;if(void 0===s[t])return this;const i=s[t].indexOf(e);return-1!==i&&s[t].splice(i,1),this}dispatchEvent(t){if(void 0===this._listeners)return this;const e=this._listeners[t.type];if(void 0!==e){t.target=this;for(let s=0,i=e.length;s<i;s++)e[s].call(this,t)}return this}}class d{constructor(t=0,e=0,s=0,i=1){this.x=t,this.y=e,this.z=s,this.w=i}set(t,e,s,i){return this.x=t,this.y=e,this.z=s,this.w=i,this}toString(){return this.x+","+this.y+","+this.z+","+this.w}toArray(){return[this.x,this.y,this.z,this.w]}setFromAxisAngle(t,e){const s=Math.sin(.5*e);return this.x=t.x*s,this.y=t.y*s,this.z=t.z*s,this.w=Math.cos(.5*e),this}toAxisAngle(t=new i){this.normalize();const e=2*Math.acos(this.w),s=Math.sqrt(1-this.w*this.w);return s<.001?(t.x=this.x,t.y=this.y,t.z=this.z):(t.x=this.x/s,t.y=this.y/s,t.z=this.z/s),[t,e]}setFromVectors(t,e){if(t.isAntiparallelTo(e)){const e=p,s=y;t.tangents(e,s),this.setFromAxisAngle(e,Math.PI)}else{const s=t.cross(e);this.x=s.x,this.y=s.y,this.z=s.z,this.w=Math.sqrt(t.length()**2*e.length()**2)+t.dot(e),this.normalize()}return this}mult(t,e=new d){const s=this.x,i=this.y,o=this.z,n=this.w,r=t.x,a=t.y,l=t.z,h=t.w;return e.x=s*h+n*r+i*l-o*a,e.y=i*h+n*a+o*r-s*l,e.z=o*h+n*l+s*a-i*r,e.w=n*h-s*r-i*a-o*l,e}inverse(t=new d){const e=this.x,s=this.y,i=this.z,o=this.w;this.conjugate(t);const n=1/(e*e+s*s+i*i+o*o);return t.x*=n,t.y*=n,t.z*=n,t.w*=n,t}conjugate(t=new d){return t.x=-this.x,t.y=-this.y,t.z=-this.z,t.w=this.w,t}normalize(){let t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return 0===t?(this.x=0,this.y=0,this.z=0,this.w=0):(t=1/t,this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}normalizeFast(){const t=(3-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2;return 0===t?(this.x=0,this.y=0,this.z=0,this.w=0):(this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}vmult(t,e=new i){const s=t.x,o=t.y,n=t.z,r=this.x,a=this.y,l=this.z,h=this.w,c=h*s+a*n-l*o,u=h*o+l*s-r*n,d=h*n+r*o-a*s,p=-r*s-a*o-l*n;return e.x=c*h+p*-r+u*-l-d*-a,e.y=u*h+p*-a+d*-r-c*-l,e.z=d*h+p*-l+c*-a-u*-r,e}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}toEuler(t,e="YZX"){let s,i,o;const n=this.x,r=this.y,a=this.z,l=this.w;switch(e){case"YZX":const t=n*r+a*l;if(t>.499&&(s=2*Math.atan2(n,l),i=Math.PI/2,o=0),t<-.499&&(s=-2*Math.atan2(n,l),i=-Math.PI/2,o=0),void 0===s){const e=n*n,h=r*r,c=a*a;s=Math.atan2(2*r*l-2*n*a,1-2*h-2*c),i=Math.asin(2*t),o=Math.atan2(2*n*l-2*r*a,1-2*e-2*c)}break;default:throw new Error("Euler order "+e+" not supported yet.")}t.y=s,t.z=i,t.x=o}setFromEuler(t,e,s,i="XYZ"){const o=Math.cos(t/2),n=Math.cos(e/2),r=Math.cos(s/2),a=Math.sin(t/2),l=Math.sin(e/2),h=Math.sin(s/2);return"XYZ"===i?(this.x=a*n*r+o*l*h,this.y=o*l*r-a*n*h,this.z=o*n*h+a*l*r,this.w=o*n*r-a*l*h):"YXZ"===i?(this.x=a*n*r+o*l*h,this.y=o*l*r-a*n*h,this.z=o*n*h-a*l*r,this.w=o*n*r+a*l*h):"ZXY"===i?(this.x=a*n*r-o*l*h,this.y=o*l*r+a*n*h,this.z=o*n*h+a*l*r,this.w=o*n*r-a*l*h):"ZYX"===i?(this.x=a*n*r-o*l*h,this.y=o*l*r+a*n*h,this.z=o*n*h-a*l*r,this.w=o*n*r+a*l*h):"YZX"===i?(this.x=a*n*r+o*l*h,this.y=o*l*r+a*n*h,this.z=o*n*h-a*l*r,this.w=o*n*r-a*l*h):"XZY"===i&&(this.x=a*n*r-o*l*h,this.y=o*l*r-a*n*h,this.z=o*n*h+a*l*r,this.w=o*n*r+a*l*h),this}clone(){return new d(this.x,this.y,this.z,this.w)}slerp(t,e,s=new d){const i=this.x,o=this.y,n=this.z,r=this.w;let a,l,h,c,u,p=t.x,y=t.y,m=t.z,v=t.w;return l=i*p+o*y+n*m+r*v,l<0&&(l=-l,p=-p,y=-y,m=-m,v=-v),1-l>1e-6?(a=Math.acos(l),h=Math.sin(a),c=Math.sin((1-e)*a)/h,u=Math.sin(e*a)/h):(c=1-e,u=e),s.x=c*i+u*p,s.y=c*o+u*y,s.z=c*n+u*m,s.w=c*r+u*v,s}integrate(t,e,s,i=new d){const o=t.x*s.x,n=t.y*s.y,r=t.z*s.z,a=this.x,l=this.y,h=this.z,c=this.w,u=.5*e;return i.x+=u*(o*c+n*h-r*l),i.y+=u*(n*c+r*a-o*h),i.z+=u*(r*c+o*l-n*a),i.w+=u*(-o*a-n*l-r*h),i}}const p=new i,y=new i;class m{constructor(t={}){this.id=m.idCounter++,this.type=t.type||0,this.boundingSphereRadius=0,this.collisionResponse=!t.collisionResponse||t.collisionResponse,this.collisionFilterGroup=void 0!==t.collisionFilterGroup?t.collisionFilterGroup:1,this.collisionFilterMask=void 0!==t.collisionFilterMask?t.collisionFilterMask:-1,this.material=t.material?t.material:null,this.body=null}updateBoundingSphereRadius(){throw"computeBoundingSphereRadius() not implemented for shape type "+this.type}volume(){throw"volume() not implemented for shape type "+this.type}calculateLocalInertia(t,e){throw"calculateLocalInertia() not implemented for shape type "+this.type}calculateWorldAABB(t,e,s,i){throw"calculateWorldAABB() not implemented for shape type "+this.type}}m.idCounter=0,m.types={SPHERE:1,PLANE:2,BOX:4,COMPOUND:8,CONVEXPOLYHEDRON:16,HEIGHTFIELD:32,PARTICLE:64,CYLINDER:128,TRIMESH:256};class v{constructor(t={}){this.position=new i,this.quaternion=new d,t.position&&this.position.copy(t.position),t.quaternion&&this.quaternion.copy(t.quaternion)}pointToLocal(t,e){return v.pointToLocalFrame(this.position,this.quaternion,t,e)}pointToWorld(t,e){return v.pointToWorldFrame(this.position,this.quaternion,t,e)}vectorToWorldFrame(t,e=new i){return this.quaternion.vmult(t,e),e}static pointToLocalFrame(t,e,s,o=new i){return s.vsub(t,o),e.conjugate(w),w.vmult(o,o),o}static pointToWorldFrame(t,e,s,o=new i){return e.vmult(s,o),o.vadd(t,o),o}static vectorToWorldFrame(t,e,s=new i){return t.vmult(e,s),s}static vectorToLocalFrame(t,e,s,o=new i){return e.w*=-1,e.vmult(s,o),e.w*=-1,o}}const w=new d;class f extends m{constructor(t={}){const{vertices:e=[],faces:s=[],normals:i=[],axes:o,boundingSphereRadius:n}=t;super({type:m.types.CONVEXPOLYHEDRON}),this.vertices=e,this.faces=s,this.faceNormals=i,0===this.faceNormals.length&&this.computeNormals(),n?this.boundingSphereRadius=n:this.updateBoundingSphereRadius(),this.worldVertices=[],this.worldVerticesNeedsUpdate=!0,this.worldFaceNormals=[],this.worldFaceNormalsNeedsUpdate=!0,this.uniqueAxes=o?o.slice():null,this.uniqueEdges=[],this.computeEdges()}computeEdges(){const t=this.faces,e=this.vertices,s=this.uniqueEdges;s.length=0;const o=new i;for(let i=0;i!==t.length;i++){const n=t[i],r=n.length;for(let t=0;t!==r;t++){const i=(t+1)%r;e[n[t]].vsub(e[n[i]],o),o.normalize();let a=!1;for(let t=0;t!==s.length;t++)if(s[t].almostEquals(o)||s[t].almostEquals(o)){a=!0;break}a||s.push(o.clone())}}}computeNormals(){this.faceNormals.length=this.faces.length;for(let t=0;t<this.faces.length;t++){for(let e=0;e<this.faces[t].length;e++)if(!this.vertices[this.faces[t][e]])throw new Error("Vertex "+this.faces[t][e]+" not found!");const e=this.faceNormals[t]||new i;this.getFaceNormal(t,e),e.negate(e),this.faceNormals[t]=e;const s=this.vertices[this.faces[t][0]];if(e.dot(s)<0){console.error(".faceNormals["+t+"] = Vec3("+e.toString()+") looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.");for(let e=0;e<this.faces[t].length;e++)console.warn(".vertices["+this.faces[t][e]+"] = Vec3("+this.vertices[this.faces[t][e]].toString()+")")}}}getFaceNormal(t,e){const s=this.faces[t],i=this.vertices[s[0]],o=this.vertices[s[1]],n=this.vertices[s[2]];f.computeNormal(i,o,n,e)}clipAgainstHull(t,e,s,o,n,r,a,l,h){const c=new i;let u=-1,d=-Number.MAX_VALUE;for(let t=0;t<s.faces.length;t++){c.copy(s.faceNormals[t]),n.vmult(c,c);const e=c.dot(r);e>d&&(d=e,u=t)}const p=[];for(let t=0;t<s.faces[u].length;t++){const e=s.vertices[s.faces[u][t]],r=new i;r.copy(e),n.vmult(r,r),o.vadd(r,r),p.push(r)}u>=0&&this.clipFaceAgainstHull(r,t,e,p,a,l,h)}findSeparatingAxis(t,e,s,o,n,r,a,l){const h=new i,c=new i,u=new i,d=new i,p=new i,y=new i;let m=Number.MAX_VALUE;const v=this;if(v.uniqueAxes)for(let i=0;i!==v.uniqueAxes.length;i++){s.vmult(v.uniqueAxes[i],h);const a=v.testSepAxis(h,t,e,s,o,n);if(!1===a)return!1;a<m&&(m=a,r.copy(h))}else{const i=a?a.length:v.faces.length;for(let l=0;l<i;l++){const i=a?a[l]:l;h.copy(v.faceNormals[i]),s.vmult(h,h);const c=v.testSepAxis(h,t,e,s,o,n);if(!1===c)return!1;c<m&&(m=c,r.copy(h))}}if(t.uniqueAxes)for(let i=0;i!==t.uniqueAxes.length;i++){n.vmult(t.uniqueAxes[i],c);const a=v.testSepAxis(c,t,e,s,o,n);if(!1===a)return!1;a<m&&(m=a,r.copy(c))}else{const i=l?l.length:t.faces.length;for(let a=0;a<i;a++){const i=l?l[a]:a;c.copy(t.faceNormals[i]),n.vmult(c,c);const h=v.testSepAxis(c,t,e,s,o,n);if(!1===h)return!1;h<m&&(m=h,r.copy(c))}}for(let i=0;i!==v.uniqueEdges.length;i++){s.vmult(v.uniqueEdges[i],d);for(let i=0;i!==t.uniqueEdges.length;i++)if(n.vmult(t.uniqueEdges[i],p),d.cross(p,y),!y.almostZero()){y.normalize();const i=v.testSepAxis(y,t,e,s,o,n);if(!1===i)return!1;i<m&&(m=i,r.copy(y))}}return o.vsub(e,u),u.dot(r)>0&&r.negate(r),!0}testSepAxis(t,e,s,i,o,n){f.project(this,t,s,i,g),f.project(e,t,o,n,x);const r=g[0],a=g[1],l=x[0],h=x[1];if(r<h||l<a)return!1;const c=r-h,u=l-a;return c<u?c:u}calculateLocalInertia(t,e){const s=new i,o=new i;this.computeLocalAABB(o,s);const n=s.x-o.x,r=s.y-o.y,a=s.z-o.z;e.x=1/12*t*(2*r*2*r+2*a*2*a),e.y=1/12*t*(2*n*2*n+2*a*2*a),e.z=1/12*t*(2*r*2*r+2*n*2*n)}getPlaneConstantOfFace(t){const e=this.faces[t],s=this.faceNormals[t],i=this.vertices[e[0]];return-s.dot(i)}clipFaceAgainstHull(t,e,s,o,n,r,a){const l=new i,h=new i,c=new i,u=new i,d=new i,p=new i,y=new i,m=new i,v=this,w=o,f=[];let g=-1,x=Number.MAX_VALUE;for(let e=0;e<v.faces.length;e++){l.copy(v.faceNormals[e]),s.vmult(l,l);const i=l.dot(t);i<x&&(x=i,g=e)}if(g<0)return;const b=v.faces[g];b.connectedFaces=[];for(let t=0;t<v.faces.length;t++)for(let e=0;e<v.faces[t].length;e++)-1!==b.indexOf(v.faces[t][e])&&t!==g&&-1===b.connectedFaces.indexOf(t)&&b.connectedFaces.push(t);const A=b.length;for(let t=0;t<A;t++){const i=v.vertices[b[t]],o=v.vertices[b[(t+1)%A]];i.vsub(o,h),c.copy(h),s.vmult(c,c),e.vadd(c,c),u.copy(this.faceNormals[g]),s.vmult(u,u),e.vadd(u,u),c.cross(u,d),d.negate(d),p.copy(i),s.vmult(p,p),e.vadd(p,p);const n=b.connectedFaces[t];y.copy(this.faceNormals[n]);const r=this.getPlaneConstantOfFace(n);m.copy(y),s.vmult(m,m);const a=r-m.dot(e);for(this.clipFaceAgainstPlane(w,f,m,a);w.length;)w.shift();for(;f.length;)w.push(f.shift())}y.copy(this.faceNormals[g]);const B=this.getPlaneConstantOfFace(g);m.copy(y),s.vmult(m,m);const E=B-m.dot(e);for(let t=0;t<w.length;t++){let e=m.dot(w[t])+E;if(e<=n&&(console.log("clamped: depth="+e+" to minDist="+n),e=n),e<=r){const s=w[t];if(e<=1e-6){const t={point:s,normal:m,depth:e};a.push(t)}}}}clipFaceAgainstPlane(t,e,s,o){let n,r;const a=t.length;if(a<2)return e;let l=t[t.length-1],h=t[0];n=s.dot(l)+o;for(let c=0;c<a;c++){if(h=t[c],r=s.dot(h)+o,n<0)if(r<0){const t=new i;t.copy(h),e.push(t)}else{const t=new i;l.lerp(h,n/(n-r),t),e.push(t)}else if(r<0){const t=new i;l.lerp(h,n/(n-r),t),e.push(t),e.push(h)}l=h,n=r}return e}computeWorldVertices(t,e){for(;this.worldVertices.length<this.vertices.length;)this.worldVertices.push(new i);const s=this.vertices,o=this.worldVertices;for(let i=0;i!==this.vertices.length;i++)e.vmult(s[i],o[i]),t.vadd(o[i],o[i]);this.worldVerticesNeedsUpdate=!1}computeLocalAABB(t,e){const s=this.vertices;t.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),e.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(let i=0;i<this.vertices.length;i++){const o=s[i];o.x<t.x?t.x=o.x:o.x>e.x&&(e.x=o.x),o.y<t.y?t.y=o.y:o.y>e.y&&(e.y=o.y),o.z<t.z?t.z=o.z:o.z>e.z&&(e.z=o.z)}}computeWorldFaceNormals(t){const e=this.faceNormals.length;for(;this.worldFaceNormals.length<e;)this.worldFaceNormals.push(new i);const s=this.faceNormals,o=this.worldFaceNormals;for(let i=0;i!==e;i++)t.vmult(s[i],o[i]);this.worldFaceNormalsNeedsUpdate=!1}updateBoundingSphereRadius(){let t=0;const e=this.vertices;for(let s=0;s!==e.length;s++){const i=e[s].lengthSquared();i>t&&(t=i)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,o){const n=this.vertices;let r,a,l,h,c,u,d=new i;for(let s=0;s<n.length;s++){d.copy(n[s]),e.vmult(d,d),t.vadd(d,d);const i=d;(void 0===r||i.x<r)&&(r=i.x),(void 0===h||i.x>h)&&(h=i.x),(void 0===a||i.y<a)&&(a=i.y),(void 0===c||i.y>c)&&(c=i.y),(void 0===l||i.z<l)&&(l=i.z),(void 0===u||i.z>u)&&(u=i.z)}s.set(r,a,l),o.set(h,c,u)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}getAveragePointLocal(t=new i){const e=this.vertices;for(let s=0;s<e.length;s++)t.vadd(e[s],t);return t.scale(1/e.length,t),t}transformAllPoints(t,e){const s=this.vertices.length,i=this.vertices;if(e){for(let t=0;t<s;t++){const s=i[t];e.vmult(s,s)}for(let t=0;t<this.faceNormals.length;t++){const s=this.faceNormals[t];e.vmult(s,s)}}if(t)for(let e=0;e<s;e++){const s=i[e];s.vadd(t,s)}}pointIsInside(t){const e=this.vertices,s=this.faces,o=this.faceNormals,n=new i;this.getAveragePointLocal(n);for(let r=0;r<this.faces.length;r++){let a=o[r];const l=e[s[r][0]],h=new i;t.vsub(l,h);const c=a.dot(h),u=new i;n.vsub(l,u);const d=a.dot(u);if(c<0&&d>0||c>0&&d<0)return!1}return-1}}f.computeNormal=(t,e,s,o)=>{const n=new i,r=new i;e.vsub(t,r),s.vsub(e,n),n.cross(r,o),o.isZero()||o.normalize()};const g=[],x=[];f.project=(t,e,s,o,n)=>{const r=t.vertices.length,a=new i;let l=0,h=0;const c=new i,u=t.vertices;c.setZero(),v.vectorToLocalFrame(s,o,e,a),v.pointToLocalFrame(s,o,c,c);const d=c.dot(a);h=l=u[0].dot(a);for(let t=1;t<r;t++){const e=u[t].dot(a);e>l&&(l=e),e<h&&(h=e)}if(h-=d,l-=d,h>l){const t=h;h=l,l=t}n[0]=l,n[1]=h};class b extends m{constructor(t){super({type:m.types.BOX}),this.halfExtents=t,this.convexPolyhedronRepresentation=null,this.updateConvexPolyhedronRepresentation(),this.updateBoundingSphereRadius()}updateConvexPolyhedronRepresentation(){const t=this.halfExtents.x,e=this.halfExtents.y,s=this.halfExtents.z,o=i,n=[new o(-t,-e,-s),new o(t,-e,-s),new o(t,e,-s),new o(-t,e,-s),new o(-t,-e,s),new o(t,-e,s),new o(t,e,s),new o(-t,e,s)],r=[new o(0,0,1),new o(0,1,0),new o(1,0,0)],a=new f({vertices:n,faces:[[3,2,1,0],[4,5,6,7],[5,4,0,1],[2,3,7,6],[0,4,7,3],[1,2,6,5]],axes:r});this.convexPolyhedronRepresentation=a,a.material=this.material}calculateLocalInertia(t,e=new i){return b.calculateInertia(this.halfExtents,t,e),e}getSideNormals(t,e){const s=t,i=this.halfExtents;if(s[0].set(i.x,0,0),s[1].set(0,i.y,0),s[2].set(0,0,i.z),s[3].set(-i.x,0,0),s[4].set(0,-i.y,0),s[5].set(0,0,-i.z),void 0!==e)for(let t=0;t!==s.length;t++)e.vmult(s[t],s[t]);return s}volume(){return 8*this.halfExtents.x*this.halfExtents.y*this.halfExtents.z}updateBoundingSphereRadius(){this.boundingSphereRadius=this.halfExtents.length()}forEachWorldCorner(t,e,s){const i=this.halfExtents,o=[[i.x,i.y,i.z],[-i.x,i.y,i.z],[-i.x,-i.y,i.z],[-i.x,-i.y,-i.z],[i.x,-i.y,-i.z],[i.x,i.y,-i.z],[-i.x,i.y,-i.z],[i.x,-i.y,i.z]];for(let i=0;i<o.length;i++)A.set(o[i][0],o[i][1],o[i][2]),e.vmult(A,A),t.vadd(A,A),s(A.x,A.y,A.z)}calculateWorldAABB(t,e,s,i){const o=this.halfExtents;B[0].set(o.x,o.y,o.z),B[1].set(-o.x,o.y,o.z),B[2].set(-o.x,-o.y,o.z),B[3].set(-o.x,-o.y,-o.z),B[4].set(o.x,-o.y,-o.z),B[5].set(o.x,o.y,-o.z),B[6].set(-o.x,o.y,-o.z),B[7].set(o.x,-o.y,o.z);const n=B[0];e.vmult(n,n),t.vadd(n,n),i.copy(n),s.copy(n);for(let o=1;o<8;o++){const n=B[o];e.vmult(n,n),t.vadd(n,n);const r=n.x,a=n.y,l=n.z;r>i.x&&(i.x=r),a>i.y&&(i.y=a),l>i.z&&(i.z=l),r<s.x&&(s.x=r),a<s.y&&(s.y=a),l<s.z&&(s.z=l)}}}b.calculateInertia=(t,e,s)=>{const i=t;s.x=1/12*e*(2*i.y*2*i.y+2*i.z*2*i.z),s.y=1/12*e*(2*i.x*2*i.x+2*i.z*2*i.z),s.z=1/12*e*(2*i.y*2*i.y+2*i.x*2*i.x)};const A=new i,B=[new i,new i,new i,new i,new i,new i,new i,new i],E=0,z=1,F=2;class S extends u{constructor(t={}){super(),this.id=S.idCounter++,this.index=-1,this.world=null,this.preStep=null,this.postStep=null,this.vlambda=new i,this.collisionFilterGroup="number"==typeof t.collisionFilterGroup?t.collisionFilterGroup:1,this.collisionFilterMask="number"==typeof t.collisionFilterMask?t.collisionFilterMask:-1,this.collisionResponse="boolean"!=typeof t.collisionResponse||t.collisionResponse,this.position=new i,this.previousPosition=new i,this.interpolatedPosition=new i,this.initPosition=new i,t.position&&(this.position.copy(t.position),this.previousPosition.copy(t.position),this.interpolatedPosition.copy(t.position),this.initPosition.copy(t.position)),this.velocity=new i,t.velocity&&this.velocity.copy(t.velocity),this.initVelocity=new i,this.force=new i;const e="number"==typeof t.mass?t.mass:0;this.mass=e,this.invMass=e>0?1/e:0,this.material=t.material||null,this.linearDamping="number"==typeof t.linearDamping?t.linearDamping:.01,this.type=e<=0?S.STATIC:S.DYNAMIC,typeof t.type==typeof S.STATIC&&(this.type=t.type),this.allowSleep=void 0===t.allowSleep||t.allowSleep,this.sleepState=0,this.sleepSpeedLimit=void 0!==t.sleepSpeedLimit?t.sleepSpeedLimit:.1,this.sleepTimeLimit=void 0!==t.sleepTimeLimit?t.sleepTimeLimit:1,this.timeLastSleepy=0,this.wakeUpAfterNarrowphase=!1,this.torque=new i,this.quaternion=new d,this.initQuaternion=new d,this.previousQuaternion=new d,this.interpolatedQuaternion=new d,t.quaternion&&(this.quaternion.copy(t.quaternion),this.initQuaternion.copy(t.quaternion),this.previousQuaternion.copy(t.quaternion),this.interpolatedQuaternion.copy(t.quaternion)),this.angularVelocity=new i,t.angularVelocity&&this.angularVelocity.copy(t.angularVelocity),this.initAngularVelocity=new i,this.shapes=[],this.shapeOffsets=[],this.shapeOrientations=[],this.inertia=new i,this.invInertia=new i,this.invInertiaWorld=new s,this.invMassSolve=0,this.invInertiaSolve=new i,this.invInertiaWorldSolve=new s,this.fixedRotation=void 0!==t.fixedRotation&&t.fixedRotation,this.angularDamping=void 0!==t.angularDamping?t.angularDamping:.01,this.linearFactor=new i(1,1,1),t.linearFactor&&this.linearFactor.copy(t.linearFactor),this.angularFactor=new i(1,1,1),t.angularFactor&&this.angularFactor.copy(t.angularFactor),this.aabb=new a,this.aabbNeedsUpdate=!0,this.boundingRadius=0,this.wlambda=new i,t.shape&&this.addShape(t.shape),this.updateMassProperties()}wakeUp(){const t=this.sleepState;this.sleepState=0,this.wakeUpAfterNarrowphase=!1,t===S.SLEEPING&&this.dispatchEvent(S.wakeupEvent)}sleep(){this.sleepState=S.SLEEPING,this.velocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.wakeUpAfterNarrowphase=!1}sleepTick(t){if(this.allowSleep){const e=this.sleepState,s=this.velocity.lengthSquared()+this.angularVelocity.lengthSquared(),i=this.sleepSpeedLimit**2;e===S.AWAKE&&s<i?(this.sleepState=S.SLEEPY,this.timeLastSleepy=t,this.dispatchEvent(S.sleepyEvent)):e===S.SLEEPY&&s>i?this.wakeUp():e===S.SLEEPY&&t-this.timeLastSleepy>this.sleepTimeLimit&&(this.sleep(),this.dispatchEvent(S.sleepEvent))}}updateSolveMassProperties(){this.sleepState===S.SLEEPING||this.type===S.KINEMATIC?(this.invMassSolve=0,this.invInertiaSolve.setZero(),this.invInertiaWorldSolve.setZero()):(this.invMassSolve=this.invMass,this.invInertiaSolve.copy(this.invInertia),this.invInertiaWorldSolve.copy(this.invInertiaWorld))}pointToLocalFrame(t,e=new i){return t.vsub(this.position,e),this.quaternion.conjugate().vmult(e,e),e}vectorToLocalFrame(t,e=new i){return this.quaternion.conjugate().vmult(t,e),e}pointToWorldFrame(t,e=new i){return this.quaternion.vmult(t,e),e.vadd(this.position,e),e}vectorToWorldFrame(t,e=new i){return this.quaternion.vmult(t,e),e}addShape(t,e,s){const o=new i,n=new d;return e&&o.copy(e),s&&n.copy(s),this.shapes.push(t),this.shapeOffsets.push(o),this.shapeOrientations.push(n),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=this,this}updateBoundingRadius(){const t=this.shapes,e=this.shapeOffsets,s=t.length;let i=0;for(let o=0;o!==s;o++){const s=t[o];s.updateBoundingSphereRadius();const n=e[o].length(),r=s.boundingSphereRadius;n+r>i&&(i=n+r)}this.boundingRadius=i}computeAABB(){const t=this.shapes,e=this.shapeOffsets,s=this.shapeOrientations,i=t.length,o=M,n=C,r=this.quaternion,a=this.aabb,l=q;for(let h=0;h!==i;h++){const i=t[h];r.vmult(e[h],o),o.vadd(this.position,o),r.mult(s[h],n),i.calculateWorldAABB(o,n,l.lowerBound,l.upperBound),0===h?a.copy(l):a.extend(l)}this.aabbNeedsUpdate=!1}updateInertiaWorld(t){const e=this.invInertia;if(e.x!==e.y||e.y!==e.z||t){const t=T,s=P;t.setRotationFromQuaternion(this.quaternion),t.transpose(s),t.scale(e,t),t.mmult(s,this.invInertiaWorld)}else;}applyForce(t,e){if(this.type!==S.DYNAMIC)return;const s=N;e.cross(t,s),this.force.vadd(t,this.force),this.torque.vadd(s,this.torque)}applyLocalForce(t,e){if(this.type!==S.DYNAMIC)return;const s=R,i=L;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,i),this.applyForce(s,i)}applyImpulse(t,e){if(this.type!==S.DYNAMIC)return;const s=e,i=I;i.copy(t),i.scale(this.invMass,i),this.velocity.vadd(i,this.velocity);const o=j;s.cross(t,o),this.invInertiaWorld.vmult(o,o),this.angularVelocity.vadd(o,this.angularVelocity)}applyLocalImpulse(t,e){if(this.type!==S.DYNAMIC)return;const s=V,i=k;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,i),this.applyImpulse(s,i)}updateMassProperties(){const t=W;this.invMass=this.mass>0?1/this.mass:0;const e=this.inertia,s=this.fixedRotation;this.computeAABB(),t.set((this.aabb.upperBound.x-this.aabb.lowerBound.x)/2,(this.aabb.upperBound.y-this.aabb.lowerBound.y)/2,(this.aabb.upperBound.z-this.aabb.lowerBound.z)/2),b.calculateInertia(t,this.mass,e),this.invInertia.set(e.x>0&&!s?1/e.x:0,e.y>0&&!s?1/e.y:0,e.z>0&&!s?1/e.z:0),this.updateInertiaWorld(!0)}getVelocityAtWorldPoint(t,e){const s=new i;return t.vsub(this.position,s),this.angularVelocity.cross(s,e),this.velocity.vadd(e,e),e}integrate(t,e,s){if(this.previousPosition.copy(this.position),this.previousQuaternion.copy(this.quaternion),this.type!==S.DYNAMIC&&this.type!==S.KINEMATIC||this.sleepState===S.SLEEPING)return;const i=this.velocity,o=this.angularVelocity,n=this.position,r=this.force,a=this.torque,l=this.quaternion,h=this.invMass,c=this.invInertiaWorld,u=this.linearFactor,d=h*t;i.x+=r.x*d*u.x,i.y+=r.y*d*u.y,i.z+=r.z*d*u.z;const p=c.elements,y=this.angularFactor,m=a.x*y.x,v=a.y*y.y,w=a.z*y.z;o.x+=t*(p[0]*m+p[1]*v+p[2]*w),o.y+=t*(p[3]*m+p[4]*v+p[5]*w),o.z+=t*(p[6]*m+p[7]*v+p[8]*w),n.x+=i.x*t,n.y+=i.y*t,n.z+=i.z*t,l.integrate(this.angularVelocity,t,this.angularFactor,l),e&&(s?l.normalizeFast():l.normalize()),this.aabbNeedsUpdate=!0,this.updateInertiaWorld()}}S.COLLIDE_EVENT_NAME="collide",S.DYNAMIC=1,S.STATIC=2,S.KINEMATIC=4,S.AWAKE=E,S.SLEEPY=z,S.SLEEPING=F,S.idCounter=0,S.wakeupEvent={type:"wakeup"},S.sleepyEvent={type:"sleepy"},S.sleepEvent={type:"sleep"};const M=new i,C=new d,q=new a,T=new s,P=new s,N=new i,R=new i,L=new i,I=new i,j=new i,V=new i,k=new i,W=new i;class O{constructor(){this.world=null,this.useBoundingBoxes=!1,this.dirty=!0}collisionPairs(t,e,s){throw new Error("collisionPairs not implemented for this BroadPhase class!")}needBroadphaseCollision(t,e){return 0!=(t.collisionFilterGroup&e.collisionFilterMask)&&0!=(e.collisionFilterGroup&t.collisionFilterMask)&&(0==(t.type&S.STATIC)&&t.sleepState!==S.SLEEPING||0==(e.type&S.STATIC)&&e.sleepState!==S.SLEEPING)}intersectionTest(t,e,s,i){this.useBoundingBoxes?this.doBoundingBoxBroadphase(t,e,s,i):this.doBoundingSphereBroadphase(t,e,s,i)}doBoundingSphereBroadphase(t,e,s,i){const o=_;e.position.vsub(t.position,o);const n=(t.boundingRadius+e.boundingRadius)**2;o.lengthSquared()<n&&(s.push(t),i.push(e))}doBoundingBoxBroadphase(t,e,s,i){t.aabbNeedsUpdate&&t.computeAABB(),e.aabbNeedsUpdate&&e.computeAABB(),t.aabb.overlaps(e.aabb)&&(s.push(t),i.push(e))}makePairsUnique(t,e){const s=H,i=U,o=G,n=t.length;for(let s=0;s!==n;s++)i[s]=t[s],o[s]=e[s];t.length=0,e.length=0;for(let t=0;t!==n;t++){const e=i[t].id,n=o[t].id,r=e<n?e+","+n:n+","+e;s[r]=t,s.keys.push(r)}for(let n=0;n!==s.keys.length;n++){const n=s.keys.pop(),r=s[n];t.push(i[r]),e.push(o[r]),delete s[n]}}setWorld(t){}aabbQuery(t,e,s){return console.warn(".aabbQuery is not implemented in this Broadphase subclass."),[]}}const _=new i,H={keys:[]},U=[],G=[];O.boundingSphereCheck=(t,e)=>{const s=new i;t.position.vsub(e.position,s);const o=t.shapes[0],n=e.shapes[0];return Math.pow(o.boundingSphereRadius+n.boundingSphereRadius,2)>s.lengthSquared()};class D extends O{constructor(){super()}collisionPairs(t,e,s){const i=t.bodies,o=i.length;let n,r;for(let t=0;t!==o;t++)for(let o=0;o!==t;o++)n=i[t],r=i[o],this.needBroadphaseCollision(n,r)&&this.intersectionTest(n,r,e,s)}aabbQuery(t,e,s=[]){for(let i=0;i<t.bodies.length;i++){const o=t.bodies[i];o.aabbNeedsUpdate&&o.computeAABB(),o.aabb.overlaps(e)&&s.push(o)}return s}}class X{constructor(){this.rayFromWorld=new i,this.rayToWorld=new i,this.hitNormalWorld=new i,this.hitPointWorld=new i,this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}reset(){this.rayFromWorld.setZero(),this.rayToWorld.setZero(),this.hitNormalWorld.setZero(),this.hitPointWorld.setZero(),this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}abort(){this.shouldStop=!0}set(t,e,s,i,o,n,r){this.rayFromWorld.copy(t),this.rayToWorld.copy(e),this.hitNormalWorld.copy(s),this.hitPointWorld.copy(i),this.shape=o,this.body=n,this.distance=r}}class Y{constructor(t=new i,e=new i){this.from=t.clone(),this.to=e.clone(),this.direction=new i,this.precision=1e-4,this.checkCollisionResponse=!0,this.skipBackfaces=!1,this.collisionFilterMask=-1,this.collisionFilterGroup=-1,this.mode=Y.ANY,this.result=new X,this.hasHit=!1,this.callback=t=>{}}intersectWorld(t,e){return this.mode=e.mode||Y.ANY,this.result=e.result||new X,this.skipBackfaces=!!e.skipBackfaces,this.collisionFilterMask=void 0!==e.collisionFilterMask?e.collisionFilterMask:-1,this.collisionFilterGroup=void 0!==e.collisionFilterGroup?e.collisionFilterGroup:-1,this.checkCollisionResponse=void 0===e.checkCollisionResponse||e.checkCollisionResponse,e.from&&this.from.copy(e.from),e.to&&this.to.copy(e.to),this.callback=e.callback||(()=>{}),this.hasHit=!1,this.result.reset(),this.updateDirection(),this.getAABB(Z),K.length=0,t.broadphase.aabbQuery(t,Z,K),this.intersectBodies(K),this.hasHit}intersectBody(t,e){e&&(this.result=e,this.updateDirection());const s=this.checkCollisionResponse;if(s&&!t.collisionResponse)return;if(0==(this.collisionFilterGroup&t.collisionFilterMask)||0==(t.collisionFilterGroup&this.collisionFilterMask))return;const i=tt,o=et;for(let e=0,n=t.shapes.length;e<n;e++){const n=t.shapes[e];if((!s||n.collisionResponse)&&(t.quaternion.mult(t.shapeOrientations[e],o),t.quaternion.vmult(t.shapeOffsets[e],i),i.vadd(t.position,i),this.intersectShape(n,o,i,t),this.result.shouldStop))break}}intersectBodies(t,e){e&&(this.result=e,this.updateDirection());for(let e=0,s=t.length;!this.result.shouldStop&&e<s;e++)this.intersectBody(t[e])}updateDirection(){this.to.vsub(this.from,this.direction),this.direction.normalize()}intersectShape(t,e,s,i){if(function(t,e,s){s.vsub(t,At);const i=At.dot(e);e.scale(i,Bt),Bt.vadd(t,Bt);return s.distanceTo(Bt)}(this.from,this.direction,s)>t.boundingSphereRadius)return;const o=this[t.type];o&&o.call(this,t,e,s,i,t)}_intersectBox(t,e,s,i,o){return this._intersectConvex(t.convexPolyhedronRepresentation,e,s,i,o)}_intersectPlane(t,e,s,o,n){const r=this.from,a=this.to,l=this.direction,h=new i(0,0,1);e.vmult(h,h);const c=new i;r.vsub(s,c);const u=c.dot(h);a.vsub(s,c);if(u*c.dot(h)>0)return;if(r.distanceTo(a)<u)return;const d=h.dot(l);if(Math.abs(d)<this.precision)return;const p=new i,y=new i,m=new i;r.vsub(s,p);const v=-h.dot(p)/d;l.scale(v,y),r.vadd(y,m),this.reportIntersection(h,m,n,o,-1)}getAABB(t){const{lowerBound:e,upperBound:s}=t,i=this.to,o=this.from;e.x=Math.min(i.x,o.x),e.y=Math.min(i.y,o.y),e.z=Math.min(i.z,o.z),s.x=Math.max(i.x,o.x),s.y=Math.max(i.y,o.y),s.z=Math.max(i.z,o.z)}_intersectHeightfield(t,e,s,i,o){t.data,t.elementSize;const n=lt;n.from.copy(this.from),n.to.copy(this.to),v.pointToLocalFrame(s,e,n.from,n.from),v.pointToLocalFrame(s,e,n.to,n.to),n.updateDirection();const r=ht;let l,h,c,u;l=h=0,c=u=t.data.length-1;const d=new a;n.getAABB(d),t.getIndexOfPosition(d.lowerBound.x,d.lowerBound.y,r,!0),l=Math.max(l,r[0]),h=Math.max(h,r[1]),t.getIndexOfPosition(d.upperBound.x,d.upperBound.y,r,!0),c=Math.min(c,r[0]+1),u=Math.min(u,r[1]+1);for(let r=l;r<c;r++)for(let a=h;a<u;a++){if(this.result.shouldStop)return;if(t.getAabbAtIndex(r,a,d),d.overlapsRay(n)){if(t.getConvexTrianglePillar(r,a,!1),v.pointToWorldFrame(s,e,t.pillarOffset,at),this._intersectConvex(t.pillarConvex,e,at,i,o,rt),this.result.shouldStop)return;t.getConvexTrianglePillar(r,a,!0),v.pointToWorldFrame(s,e,t.pillarOffset,at),this._intersectConvex(t.pillarConvex,e,at,i,o,rt)}}}_intersectSphere(t,e,s,i,o){const n=this.from,r=this.to,a=t.radius,l=(r.x-n.x)**2+(r.y-n.y)**2+(r.z-n.z)**2,h=2*((r.x-n.x)*(n.x-s.x)+(r.y-n.y)*(n.y-s.y)+(r.z-n.z)*(n.z-s.z)),c=h**2-4*l*((n.x-s.x)**2+(n.y-s.y)**2+(n.z-s.z)**2-a**2),u=ct,d=ut;if(!(c<0))if(0===c)n.lerp(r,c,u),u.vsub(s,d),d.normalize(),this.reportIntersection(d,u,o,i,-1);else{const t=(-h-Math.sqrt(c))/(2*l),e=(-h+Math.sqrt(c))/(2*l);if(t>=0&&t<=1&&(n.lerp(r,t,u),u.vsub(s,d),d.normalize(),this.reportIntersection(d,u,o,i,-1)),this.result.shouldStop)return;e>=0&&e<=1&&(n.lerp(r,e,u),u.vsub(s,d),d.normalize(),this.reportIntersection(d,u,o,i,-1))}}_intersectConvex(t,e,s,i,o,n){const r=dt,a=pt,l=n&&n.faceList||null,h=t.faces,c=t.vertices,u=t.faceNormals,d=this.direction,p=this.from,y=this.to,m=p.distanceTo(y),v=l?l.length:h.length,w=this.result;for(let t=0;!w.shouldStop&&t<v;t++){const n=l?l[t]:t,y=h[n],v=u[n],f=e,g=s;a.copy(c[y[0]]),f.vmult(a,a),a.vadd(g,a),a.vsub(p,a),f.vmult(v,r);const x=d.dot(r);if(Math.abs(x)<this.precision)continue;const b=r.dot(a)/x;if(!(b<0)){d.scale(b,st),st.vadd(p,st),it.copy(c[y[0]]),f.vmult(it,it),g.vadd(it,it);for(let t=1;!w.shouldStop&&t<y.length-1;t++){ot.copy(c[y[t]]),nt.copy(c[y[t+1]]),f.vmult(ot,ot),f.vmult(nt,nt),g.vadd(ot,ot),g.vadd(nt,nt);const e=st.distanceTo(p);!$(st,it,ot,nt)&&!$(st,ot,it,nt)||e>m||this.reportIntersection(r,st,o,i,n)}}}}_intersectTrimesh(t,e,s,i,o,n){const r=yt,a=xt,l=bt,h=pt,c=mt,u=vt,d=wt,p=gt,y=ft,m=(n&&n.faceList,t.indices),w=(t.vertices,this.from),f=this.to,g=this.direction;l.position.copy(s),l.quaternion.copy(e),v.vectorToLocalFrame(s,e,g,c),v.pointToLocalFrame(s,e,w,u),v.pointToLocalFrame(s,e,f,d),d.x*=t.scale.x,d.y*=t.scale.y,d.z*=t.scale.z,u.x*=t.scale.x,u.y*=t.scale.y,u.z*=t.scale.z,d.vsub(u,c),c.normalize();const x=u.distanceSquared(d);t.tree.rayQuery(this,l,a);for(let n=0,l=a.length;!this.result.shouldStop&&n!==l;n++){const l=a[n];t.getNormal(l,r),t.getVertex(m[3*l],it),it.vsub(u,h);const d=c.dot(r),w=r.dot(h)/d;if(w<0)continue;c.scale(w,st),st.vadd(u,st),t.getVertex(m[3*l+1],ot),t.getVertex(m[3*l+2],nt);const f=st.distanceSquared(u);!$(st,ot,it,nt)&&!$(st,it,ot,nt)||f>x||(v.vectorToWorldFrame(e,r,y),v.pointToWorldFrame(s,e,st,p),this.reportIntersection(y,p,o,i,l))}a.length=0}reportIntersection(t,e,s,i,o){const n=this.from,r=this.to,a=n.distanceTo(e),l=this.result;if(!(this.skipBackfaces&&t.dot(this.direction)>0))switch(l.hitFaceIndex=void 0!==o?o:-1,this.mode){case Y.ALL:this.hasHit=!0,l.set(n,r,t,e,s,i,a),l.hasHit=!0,this.callback(l);break;case Y.CLOSEST:(a<l.distance||!l.hasHit)&&(this.hasHit=!0,l.hasHit=!0,l.set(n,r,t,e,s,i,a));break;case Y.ANY:this.hasHit=!0,l.hasHit=!0,l.set(n,r,t,e,s,i,a),l.shouldStop=!0}}}Y.CLOSEST=1,Y.ANY=2,Y.ALL=4;const Z=new a,K=[],Q=new i,J=new i;function $(t,e,s,i){i.vsub(e,At),s.vsub(e,Q),t.vsub(e,J);const o=At.dot(At),n=At.dot(Q),r=At.dot(J),a=Q.dot(Q),l=Q.dot(J);let h,c;return(h=a*r-n*l)>=0&&(c=o*l-n*r)>=0&&h+c<o*a-n*n}Y.pointInTriangle=$;const tt=new i,et=new d,st=new i,it=new i,ot=new i,nt=new i;Y.prototype[m.types.BOX]=Y.prototype._intersectBox,Y.prototype[m.types.PLANE]=Y.prototype._intersectPlane;const rt={faceList:[0]},at=new i,lt=new Y,ht=[];Y.prototype[m.types.HEIGHTFIELD]=Y.prototype._intersectHeightfield;const ct=new i,ut=new i;Y.prototype[m.types.SPHERE]=Y.prototype._intersectSphere;const dt=new i,pt=new i;Y.prototype[m.types.CONVEXPOLYHEDRON]=Y.prototype._intersectConvex;const yt=new i,mt=new i,vt=new i,wt=new i,ft=new i,gt=new i,xt=(new a,[]),bt=new v;Y.prototype[m.types.TRIMESH]=Y.prototype._intersectTrimesh;const At=new i,Bt=new i;class Et extends O{constructor(t){super(),this.axisList=[],this.world=null,this.axisIndex=0;const e=this.axisList;this._addBodyHandler=t=>{e.push(t.body)},this._removeBodyHandler=t=>{const s=e.indexOf(t.body);-1!==s&&e.splice(s,1)},t&&this.setWorld(t)}setWorld(t){this.axisList.length=0;for(let e=0;e<t.bodies.length;e++)this.axisList.push(t.bodies[e]);t.removeEventListener("addBody",this._addBodyHandler),t.removeEventListener("removeBody",this._removeBodyHandler),t.addEventListener("addBody",this._addBodyHandler),t.addEventListener("removeBody",this._removeBodyHandler),this.world=t,this.dirty=!0}collisionPairs(t,e,s){const i=this.axisList,o=i.length,n=this.axisIndex;let r,a;for(this.dirty&&(this.sortList(),this.dirty=!1),r=0;r!==o;r++){const t=i[r];for(a=r+1;a<o;a++){const o=i[a];if(this.needBroadphaseCollision(t,o)){if(!Et.checkBounds(t,o,n))break;this.intersectionTest(t,o,e,s)}}}}sortList(){const t=this.axisList,e=this.axisIndex,s=t.length;for(let e=0;e!==s;e++){const s=t[e];s.aabbNeedsUpdate&&s.computeAABB()}0===e?Et.insertionSortX(t):1===e?Et.insertionSortY(t):2===e&&Et.insertionSortZ(t)}autoDetectAxis(){let t=0,e=0,s=0,i=0,o=0,n=0;const r=this.axisList,a=r.length,l=1/a;for(let l=0;l!==a;l++){const a=r[l],h=a.position.x;t+=h,e+=h*h;const c=a.position.y;s+=c,i+=c*c;const u=a.position.z;o+=u,n+=u*u}const h=e-t*t*l,c=i-s*s*l,u=n-o*o*l;this.axisIndex=h>c?h>u?0:2:c>u?1:2}aabbQuery(t,e,s=[]){this.dirty&&(this.sortList(),this.dirty=!1);const i=this.axisIndex;let o="x";1===i&&(o="y"),2===i&&(o="z");const n=this.axisList;e.lowerBound[o],e.upperBound[o];for(let t=0;t<n.length;t++){const i=n[t];i.aabbNeedsUpdate&&i.computeAABB(),i.aabb.overlaps(e)&&s.push(i)}return s}}function zt(){}Et.insertionSortX=t=>{for(let e=1,s=t.length;e<s;e++){const s=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.x<=s.aabb.lowerBound.x);i--)t[i+1]=t[i];t[i+1]=s}return t},Et.insertionSortY=t=>{for(let e=1,s=t.length;e<s;e++){const s=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.y<=s.aabb.lowerBound.y);i--)t[i+1]=t[i];t[i+1]=s}return t},Et.insertionSortZ=t=>{for(let e=1,s=t.length;e<s;e++){const s=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.z<=s.aabb.lowerBound.z);i--)t[i+1]=t[i];t[i+1]=s}return t},Et.checkBounds=(t,e,s)=>{let i,o;0===s?(i=t.position.x,o=e.position.x):1===s?(i=t.position.y,o=e.position.y):2===s&&(i=t.position.z,o=e.position.z);const n=t.boundingRadius;return o-e.boundingRadius<i+n},zt.defaults=(t={},e)=>{for(let s in e)s in t||(t[s]=e[s]);return t};class Ft{constructor(t,e,s={}){s=zt.defaults(s,{collideConnected:!0,wakeUpBodies:!0}),this.equations=[],this.bodyA=t,this.bodyB=e,this.id=Ft.idCounter++,this.collideConnected=s.collideConnected,s.wakeUpBodies&&(t&&t.wakeUp(),e&&e.wakeUp())}update(){throw new Error("method update() not implmemented in this Constraint subclass!")}enable(){const t=this.equations;for(let e=0;e<t.length;e++)t[e].enabled=!0}disable(){const t=this.equations;for(let e=0;e<t.length;e++)t[e].enabled=!1}}Ft.idCounter=0;class St{constructor(){this.spatial=new i,this.rotational=new i}multiplyElement(t){return t.spatial.dot(this.spatial)+t.rotational.dot(this.rotational)}multiplyVectors(t,e){return t.dot(this.spatial)+e.dot(this.rotational)}}class Mt{constructor(t,e,s=-1e6,i=1e6){this.id=Mt.id++,this.minForce=s,this.maxForce=i,this.bi=t,this.bj=e,this.a=0,this.b=0,this.eps=0,this.jacobianElementA=new St,this.jacobianElementB=new St,this.enabled=!0,this.multiplier=0,this.setSpookParams(1e7,4,1/60)}setSpookParams(t,e,s){const i=e,o=t,n=s;this.a=4/(n*(1+4*i)),this.b=4*i/(1+4*i),this.eps=4/(n*n*o*(1+4*i))}computeB(t,e,s){const i=this.computeGW();return-this.computeGq()*t-i*e-this.computeGiMf()*s}computeGq(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,o=s.position,n=i.position;return t.spatial.dot(o)+e.spatial.dot(n)}computeGW(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,o=s.velocity,n=i.velocity,r=s.angularVelocity,a=i.angularVelocity;return t.multiplyVectors(o,r)+e.multiplyVectors(n,a)}computeGWlambda(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,o=s.vlambda,n=i.vlambda,r=s.wlambda,a=i.wlambda;return t.multiplyVectors(o,r)+e.multiplyVectors(n,a)}computeGiMf(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,o=s.force,n=s.torque,r=i.force,a=i.torque,l=s.invMassSolve,h=i.invMassSolve;return o.scale(l,Ct),r.scale(h,qt),s.invInertiaWorldSolve.vmult(n,Tt),i.invInertiaWorldSolve.vmult(a,Pt),t.multiplyVectors(Ct,Tt)+e.multiplyVectors(qt,Pt)}computeGiMGt(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,o=s.invMassSolve,n=i.invMassSolve,r=s.invInertiaWorldSolve,a=i.invInertiaWorldSolve;let l=o+n;return r.vmult(t.rotational,Nt),l+=Nt.dot(t.rotational),a.vmult(e.rotational,Nt),l+=Nt.dot(e.rotational),l}addToWlambda(t){const e=this.jacobianElementA,s=this.jacobianElementB,i=this.bi,o=this.bj,n=Rt;i.vlambda.addScaledVector(i.invMassSolve*t,e.spatial,i.vlambda),o.vlambda.addScaledVector(o.invMassSolve*t,s.spatial,o.vlambda),i.invInertiaWorldSolve.vmult(e.rotational,n),i.wlambda.addScaledVector(t,n,i.wlambda),o.invInertiaWorldSolve.vmult(s.rotational,n),o.wlambda.addScaledVector(t,n,o.wlambda)}computeC(){return this.computeGiMGt()+this.eps}}Mt.id=0;const Ct=new i,qt=new i,Tt=new i,Pt=new i,Nt=new i,Rt=new i;class Lt extends Mt{constructor(t,e,s=1e6){super(t,e,0,s),this.restitution=0,this.ri=new i,this.rj=new i,this.ni=new i}computeB(t){const e=this.a,s=this.b,i=this.bi,o=this.bj,n=this.ri,r=this.rj,a=It,l=jt,h=i.velocity,c=i.angularVelocity,u=(i.force,i.torque,o.velocity),d=o.angularVelocity,p=(o.force,o.torque,Vt),y=this.jacobianElementA,m=this.jacobianElementB,v=this.ni;n.cross(v,a),r.cross(v,l),v.negate(y.spatial),a.negate(y.rotational),m.spatial.copy(v),m.rotational.copy(l),p.copy(o.position),p.vadd(r,p),p.vsub(i.position,p),p.vsub(n,p);const w=v.dot(p),f=this.restitution+1;return-w*e-(f*u.dot(v)-f*h.dot(v)+d.dot(l)-c.dot(a))*s-t*this.computeGiMf()}getImpactVelocityAlongNormal(){const t=kt,e=Wt,s=Ot,i=_t,o=Ht;return this.bi.position.vadd(this.ri,s),this.bj.position.vadd(this.rj,i),this.bi.getVelocityAtWorldPoint(s,t),this.bj.getVelocityAtWorldPoint(i,e),t.vsub(e,o),this.ni.dot(o)}}const It=new i,jt=new i,Vt=new i,kt=new i,Wt=new i,Ot=new i,_t=new i,Ht=new i;class Ut extends Ft{constructor(t,e=new i,s,o=new i,n=1e6){super(t,s),this.pivotA=e.clone(),this.pivotB=o.clone();const r=this.equationX=new Lt(t,s),a=this.equationY=new Lt(t,s),l=this.equationZ=new Lt(t,s);this.equations.push(r,a,l),r.minForce=a.minForce=l.minForce=-n,r.maxForce=a.maxForce=l.maxForce=n,r.ni.set(1,0,0),a.ni.set(0,1,0),l.ni.set(0,0,1)}update(){const t=this.bodyA,e=this.bodyB,s=this.equationX,i=this.equationY,o=this.equationZ;t.quaternion.vmult(this.pivotA,s.ri),e.quaternion.vmult(this.pivotB,s.rj),i.ri.copy(s.ri),i.rj.copy(s.rj),o.ri.copy(s.ri),o.rj.copy(s.rj)}}class Gt extends Mt{constructor(t,e,s={}){const o=void 0!==s.maxForce?s.maxForce:1e6;super(t,e,-o,o),this.axisA=s.axisA?s.axisA.clone():new i(1,0,0),this.axisB=s.axisB?s.axisB.clone():new i(0,1,0),this.angle=void 0!==s.angle?s.angle:0}computeB(t){const e=this.a,s=this.b,i=this.axisA,o=this.axisB,n=Dt,r=Xt,a=this.jacobianElementA,l=this.jacobianElementB;i.cross(o,n),o.cross(i,r),a.rotational.copy(r),l.rotational.copy(n);return-(Math.cos(this.angle)-i.dot(o))*e-this.computeGW()*s-t*this.computeGiMf()}}const Dt=new i,Xt=new i;class Yt extends Mt{constructor(t,e,s={}){const o=void 0!==s.maxForce?s.maxForce:1e6;super(t,e,-o,o),this.axisA=s.axisA?s.axisA.clone():new i(1,0,0),this.axisB=s.axisB?s.axisB.clone():new i(0,1,0),this.maxAngle=Math.PI/2}computeB(t){const e=this.a,s=this.b,i=this.axisA,o=this.axisB,n=Zt,r=Kt,a=this.jacobianElementA,l=this.jacobianElementB;i.cross(o,n),o.cross(i,r),a.rotational.copy(r),l.rotational.copy(n);return-(Math.cos(this.maxAngle)-i.dot(o))*e-this.computeGW()*s-t*this.computeGiMf()}}const Zt=new i,Kt=new i;class Qt extends Ut{constructor(t,e,s={}){const o=void 0!==s.maxForce?s.maxForce:1e6;super(t,s.pivotA?s.pivotA.clone():new i,e,s.pivotB?s.pivotB.clone():new i,o),this.axisA=s.axisA?s.axisA.clone():new i,this.axisB=s.axisB?s.axisB.clone():new i,this.collideConnected=!!s.collideConnected,this.angle=void 0!==s.angle?s.angle:0;const n=this.coneEquation=new Gt(t,e,s),r=this.twistEquation=new Yt(t,e,s);this.twistAngle=void 0!==s.twistAngle?s.twistAngle:0,n.maxForce=0,n.minForce=-o,r.maxForce=0,r.minForce=-o,this.equations.push(n,r)}update(){const t=this.bodyA,e=this.bodyB,s=this.coneEquation,i=this.twistEquation;super.update(),t.vectorToWorldFrame(this.axisA,s.axisA),e.vectorToWorldFrame(this.axisB,s.axisB),this.axisA.tangents(i.axisA,i.axisA),t.vectorToWorldFrame(i.axisA,i.axisA),this.axisB.tangents(i.axisB,i.axisB),e.vectorToWorldFrame(i.axisB,i.axisB),s.angle=this.angle,i.maxAngle=this.twistAngle}}class Jt extends Ft{constructor(t,e,s,i=1e6){super(t,e),void 0===s&&(s=t.position.distanceTo(e.position)),this.distance=s;const o=this.distanceEquation=new Lt(t,e);this.equations.push(o),o.minForce=-i,o.maxForce=i}update(){const t=this.bodyA,e=this.bodyB,s=this.distanceEquation,i=.5*this.distance,o=s.ni;e.position.vsub(t.position,o),o.normalize(),o.scale(i,s.ri),o.scale(-i,s.rj)}}class $t extends Ut{constructor(t,e,s={}){const o=void 0!==s.maxForce?s.maxForce:1e6,n=new i,r=new i,a=new i;t.position.vadd(e.position,a),a.scale(.5,a),e.pointToLocalFrame(a,r),t.pointToLocalFrame(a,n),super(t,n,e,r,o),this.xA=t.vectorToLocalFrame(i.UNIT_X),this.xB=e.vectorToLocalFrame(i.UNIT_X),this.yA=t.vectorToLocalFrame(i.UNIT_Y),this.yB=e.vectorToLocalFrame(i.UNIT_Y),this.zA=t.vectorToLocalFrame(i.UNIT_Z),this.zB=e.vectorToLocalFrame(i.UNIT_Z);const l=this.rotationalEquation1=new Yt(t,e,s),h=this.rotationalEquation2=new Yt(t,e,s),c=this.rotationalEquation3=new Yt(t,e,s);this.equations.push(l,h,c)}update(){const t=this.bodyA,e=this.bodyB,s=(this.motorEquation,this.rotationalEquation1),i=this.rotationalEquation2,o=this.rotationalEquation3;super.update(),t.vectorToWorldFrame(this.xA,s.axisA),e.vectorToWorldFrame(this.yB,s.axisB),t.vectorToWorldFrame(this.yA,i.axisA),e.vectorToWorldFrame(this.zB,i.axisB),t.vectorToWorldFrame(this.zA,o.axisA),e.vectorToWorldFrame(this.xB,o.axisB)}}class te extends Mt{constructor(t,e,s=1e6){super(t,e,-s,s),this.axisA=new i,this.axisB=new i,this.targetVelocity=0}computeB(t){this.a;const e=this.b,s=(this.bi,this.bj,this.axisA),i=this.axisB,o=this.jacobianElementA,n=this.jacobianElementB;o.rotational.copy(s),i.negate(n.rotational);return-(this.computeGW()-this.targetVelocity)*e-t*this.computeGiMf()}}class ee extends Ut{constructor(t,e,s={}){const o=void 0!==s.maxForce?s.maxForce:1e6;super(t,s.pivotA?s.pivotA.clone():new i,e,s.pivotB?s.pivotB.clone():new i,o);(this.axisA=s.axisA?s.axisA.clone():new i(1,0,0)).normalize();(this.axisB=s.axisB?s.axisB.clone():new i(1,0,0)).normalize(),this.collideConnected=!!s.collideConnected;const n=this.rotationalEquation1=new Yt(t,e,s),r=this.rotationalEquation2=new Yt(t,e,s),a=this.motorEquation=new te(t,e,o);a.enabled=!1,this.equations.push(n,r,a)}enableMotor(){this.motorEquation.enabled=!0}disableMotor(){this.motorEquation.enabled=!1}setMotorSpeed(t){this.motorEquation.targetVelocity=t}setMotorMaxForce(t){this.motorEquation.maxForce=t,this.motorEquation.minForce=-t}update(){const t=this.bodyA,e=this.bodyB,s=this.motorEquation,i=this.rotationalEquation1,o=this.rotationalEquation2,n=se,r=ie,a=this.axisA,l=this.axisB;super.update(),t.quaternion.vmult(a,n),e.quaternion.vmult(l,r),n.tangents(i.axisA,o.axisA),i.axisB.copy(r),o.axisB.copy(r),this.motorEquation.enabled&&(t.quaternion.vmult(this.axisA,s.axisA),e.quaternion.vmult(this.axisB,s.axisB))}}const se=new i,ie=new i;class oe extends Mt{constructor(t,e,s){super(t,e,-s,s),this.ri=new i,this.rj=new i,this.t=new i}computeB(t){this.a;const e=this.b,s=(this.bi,this.bj,this.ri),i=this.rj,o=ne,n=re,r=this.t;s.cross(r,o),i.cross(r,n);const a=this.jacobianElementA,l=this.jacobianElementB;r.negate(a.spatial),o.negate(a.rotational),l.spatial.copy(r),l.rotational.copy(n);return-this.computeGW()*e-t*this.computeGiMf()}}const ne=new i,re=new i;class ae{constructor(t,e,s){s=zt.defaults(s,{friction:.3,restitution:.3,contactEquationStiffness:1e7,contactEquationRelaxation:3,frictionEquationStiffness:1e7,frictionEquationRelaxation:3}),this.id=ae.idCounter++,this.materials=[t,e],this.friction=s.friction,this.restitution=s.restitution,this.contactEquationStiffness=s.contactEquationStiffness,this.contactEquationRelaxation=s.contactEquationRelaxation,this.frictionEquationStiffness=s.frictionEquationStiffness,this.frictionEquationRelaxation=s.frictionEquationRelaxation}}ae.idCounter=0;class le{constructor(t={}){let e="";"string"==typeof t&&(e=t,t={}),this.name=e,this.id=le.idCounter++,this.friction=void 0!==t.friction?t.friction:-1,this.restitution=void 0!==t.restitution?t.restitution:-1}}le.idCounter=0;class he{constructor(t,e,s={}){this.restLength="number"==typeof s.restLength?s.restLength:1,this.stiffness=s.stiffness||100,this.damping=s.damping||1,this.bodyA=t,this.bodyB=e,this.localAnchorA=new i,this.localAnchorB=new i,s.localAnchorA&&this.localAnchorA.copy(s.localAnchorA),s.localAnchorB&&this.localAnchorB.copy(s.localAnchorB),s.worldAnchorA&&this.setWorldAnchorA(s.worldAnchorA),s.worldAnchorB&&this.setWorldAnchorB(s.worldAnchorB)}setWorldAnchorA(t){this.bodyA.pointToLocalFrame(t,this.localAnchorA)}setWorldAnchorB(t){this.bodyB.pointToLocalFrame(t,this.localAnchorB)}getWorldAnchorA(t){this.bodyA.pointToWorldFrame(this.localAnchorA,t)}getWorldAnchorB(t){this.bodyB.pointToWorldFrame(this.localAnchorB,t)}applyForce(){const t=this.stiffness,e=this.damping,s=this.restLength,i=this.bodyA,o=this.bodyB,n=ce,r=ue,a=de,l=pe,h=xe,c=ye,u=me,d=ve,p=we,y=fe,m=ge;this.getWorldAnchorA(c),this.getWorldAnchorB(u),c.vsub(i.position,d),u.vsub(o.position,p),u.vsub(c,n);const v=n.length();r.copy(n),r.normalize(),o.velocity.vsub(i.velocity,a),o.angularVelocity.cross(p,h),a.vadd(h,a),i.angularVelocity.cross(d,h),a.vsub(h,a),r.scale(-t*(v-s)-e*a.dot(r),l),i.force.vsub(l,i.force),o.force.vadd(l,o.force),d.cross(l,y),p.cross(l,m),i.torque.vsub(y,i.torque),o.torque.vadd(m,o.torque)}}const ce=new i,ue=new i,de=new i,pe=new i,ye=new i,me=new i,ve=new i,we=new i,fe=new i,ge=new i,xe=new i;new Y;class be extends m{constructor(t){if(super({type:m.types.SPHERE}),this.radius=void 0!==t?t:1,this.radius<0)throw new Error("The sphere radius cannot be negative.");this.updateBoundingSphereRadius()}calculateLocalInertia(t,e=new i){const s=2*t*this.radius*this.radius/5;return e.x=s,e.y=s,e.z=s,e}volume(){return 4*Math.PI*Math.pow(this.radius,3)/3}updateBoundingSphereRadius(){this.boundingSphereRadius=this.radius}calculateWorldAABB(t,e,s,i){const o=this.radius,n=["x","y","z"];for(let e=0;e<n.length;e++){const r=n[e];s[r]=t[r]-o,i[r]=t[r]+o}}}class Ae extends f{constructor(t,e,s,o){const n=o,r=[],a=[],l=[],h=[],c=[],u=Math.cos,d=Math.sin;r.push(new i(e*u(0),.5*-s,-e*d(0))),h.push(0),r.push(new i(t*u(0),.5*s,-t*d(0))),c.push(1);for(let o=0;o<n;o++){const p=2*Math.PI/n*(o+1),y=2*Math.PI/n*(o+.5);o<n-1?(r.push(new i(e*u(p),.5*-s,-e*d(p))),h.push(2*o+2),r.push(new i(t*u(p),.5*s,-t*d(p))),c.push(2*o+3),l.push([2*o+2,2*o+3,2*o+1,2*o])):l.push([0,1,2*o+1,2*o]),(n%2==1||o<n/2)&&a.push(new i(u(y),0,-d(y)))}l.push(c),a.push(new i(0,1,0));const p=[];for(let t=0;t<h.length;t++)p.push(h[h.length-t-1]);l.push(p),super({vertices:r,faces:l,axes:a})}}class Be extends m{constructor(){super({type:m.types.PARTICLE})}calculateLocalInertia(t,e=new i){return e.set(0,0,0),e}volume(){return 0}updateBoundingSphereRadius(){this.boundingSphereRadius=0}calculateWorldAABB(t,e,s,i){s.copy(t),i.copy(t)}}class Ee extends m{constructor(){super({type:m.types.PLANE}),this.worldNormal=new i,this.worldNormalNeedsUpdate=!0,this.boundingSphereRadius=Number.MAX_VALUE}computeWorldNormal(t){const e=this.worldNormal;e.set(0,0,1),t.vmult(e,e),this.worldNormalNeedsUpdate=!1}calculateLocalInertia(t,e=new i){return e}volume(){return Number.MAX_VALUE}calculateWorldAABB(t,e,s,i){ze.set(0,0,1),e.vmult(ze,ze);const o=Number.MAX_VALUE;s.set(-o,-o,-o),i.set(o,o,o),1===ze.x?i.x=t.x:-1===ze.x&&(s.x=t.x),1===ze.y?i.y=t.y:-1===ze.y&&(s.y=t.y),1===ze.z?i.z=t.z:-1===ze.z&&(s.z=t.z)}updateBoundingSphereRadius(){this.boundingSphereRadius=Number.MAX_VALUE}}const ze=new i;class Fe extends m{constructor(t,e={}){e=zt.defaults(e,{maxValue:null,minValue:null,elementSize:1}),super({type:m.types.HEIGHTFIELD}),this.data=t,this.maxValue=e.maxValue,this.minValue=e.minValue,this.elementSize=e.elementSize,null===e.minValue&&this.updateMinValue(),null===e.maxValue&&this.updateMaxValue(),this.cacheEnabled=!0,this.pillarConvex=new f,this.pillarOffset=new i,this.updateBoundingSphereRadius(),this._cachedPillars={}}update(){this._cachedPillars={}}updateMinValue(){const t=this.data;let e=t[0][0];for(let s=0;s!==t.length;s++)for(let i=0;i!==t[s].length;i++){const o=t[s][i];o<e&&(e=o)}this.minValue=e}updateMaxValue(){const t=this.data;let e=t[0][0];for(let s=0;s!==t.length;s++)for(let i=0;i!==t[s].length;i++){const o=t[s][i];o>e&&(e=o)}this.maxValue=e}setHeightValueAtIndex(t,e,s){this.data[t][e]=s,this.clearCachedConvexTrianglePillar(t,e,!1),t>0&&(this.clearCachedConvexTrianglePillar(t-1,e,!0),this.clearCachedConvexTrianglePillar(t-1,e,!1)),e>0&&(this.clearCachedConvexTrianglePillar(t,e-1,!0),this.clearCachedConvexTrianglePillar(t,e-1,!1)),e>0&&t>0&&this.clearCachedConvexTrianglePillar(t-1,e-1,!0)}getRectMinMax(t,e,s,i,o=[]){const n=this.data;let r=this.minValue;for(let o=t;o<=s;o++)for(let t=e;t<=i;t++){const e=n[o][t];e>r&&(r=e)}o[0]=this.minValue,o[1]=r}getIndexOfPosition(t,e,s,i){const o=this.elementSize,n=this.data;let r=Math.floor(t/o),a=Math.floor(e/o);return s[0]=r,s[1]=a,i&&(r<0&&(r=0),a<0&&(a=0),r>=n.length-1&&(r=n.length-1),a>=n[0].length-1&&(a=n[0].length-1)),!(r<0||a<0||r>=n.length-1||a>=n[0].length-1)}getTriangleAt(t,e,s,i,o,n){const r=Se;this.getIndexOfPosition(t,e,r,s);let a=r[0],l=r[1];const h=this.data;s&&(a=Math.min(h.length-2,Math.max(0,a)),l=Math.min(h[0].length-2,Math.max(0,l)));const c=this.elementSize,u=(t/c-a)**2+(e/c-l)**2>(t/c-(a+1))**2+(e/c-(l+1))**2;return this.getTriangle(a,l,u,i,o,n),u}getNormalAt(t,e,s,i){const o=Pe,n=Ne,r=Re,a=Le,l=Ie;this.getTriangleAt(t,e,s,o,n,r),n.vsub(o,a),r.vsub(o,l),a.cross(l,i),i.normalize()}getAabbAtIndex(t,e,{lowerBound:s,upperBound:i}){const o=this.data,n=this.elementSize;s.set(t*n,e*n,o[t][e]),i.set((t+1)*n,(e+1)*n,o[t+1][e+1])}getHeightAt(t,e,s){const i=this.data,o=Ce,n=qe,r=Te,a=Se;this.getIndexOfPosition(t,e,a,s);let l=a[0],h=a[1];s&&(l=Math.min(i.length-2,Math.max(0,l)),h=Math.min(i[0].length-2,Math.max(0,h)));const c=this.getTriangleAt(t,e,s,o,n,r);!function(t,e,s,i,o,n,r,a,l){l.x=((n-a)*(t-r)+(r-o)*(e-a))/((n-a)*(s-r)+(r-o)*(i-a)),l.y=((a-i)*(t-r)+(s-r)*(e-a))/((n-a)*(s-r)+(r-o)*(i-a)),l.z=1-l.x-l.y}(t,e,o.x,o.y,n.x,n.y,r.x,r.y,Me);const u=Me;return c?i[l+1][h+1]*u.x+i[l][h+1]*u.y+i[l+1][h]*u.z:i[l][h]*u.x+i[l+1][h]*u.y+i[l][h+1]*u.z}getCacheConvexTrianglePillarKey(t,e,s){return t+"_"+e+"_"+(s?1:0)}getCachedConvexTrianglePillar(t,e,s){return this._cachedPillars[this.getCacheConvexTrianglePillarKey(t,e,s)]}setCachedConvexTrianglePillar(t,e,s,i,o){this._cachedPillars[this.getCacheConvexTrianglePillarKey(t,e,s)]={convex:i,offset:o}}clearCachedConvexTrianglePillar(t,e,s){delete this._cachedPillars[this.getCacheConvexTrianglePillarKey(t,e,s)]}getTriangle(t,e,s,i,o,n){const r=this.data,a=this.elementSize;s?(i.set((t+1)*a,(e+1)*a,r[t+1][e+1]),o.set(t*a,(e+1)*a,r[t][e+1]),n.set((t+1)*a,e*a,r[t+1][e])):(i.set(t*a,e*a,r[t][e]),o.set((t+1)*a,e*a,r[t+1][e]),n.set(t*a,(e+1)*a,r[t][e+1]))}getConvexTrianglePillar(t,e,s){let o=this.pillarConvex,n=this.pillarOffset;if(this.cacheEnabled){const r=this.getCachedConvexTrianglePillar(t,e,s);if(r)return this.pillarConvex=r.convex,void(this.pillarOffset=r.offset);o=new f,n=new i,this.pillarConvex=o,this.pillarOffset=n}const r=this.data,a=this.elementSize,l=o.faces;o.vertices.length=6;for(let t=0;t<6;t++)o.vertices[t]||(o.vertices[t]=new i);l.length=5;for(let t=0;t<5;t++)l[t]||(l[t]=[]);const h=o.vertices,c=(Math.min(r[t][e],r[t+1][e],r[t][e+1],r[t+1][e+1])-this.minValue)/2+this.minValue;s?(n.set((t+.75)*a,(e+.75)*a,c),h[0].set(.25*a,.25*a,r[t+1][e+1]-c),h[1].set(-.75*a,.25*a,r[t][e+1]-c),h[2].set(.25*a,-.75*a,r[t+1][e]-c),h[3].set(.25*a,.25*a,-c-1),h[4].set(-.75*a,.25*a,-c-1),h[5].set(.25*a,-.75*a,-c-1),l[0][0]=0,l[0][1]=1,l[0][2]=2,l[1][0]=5,l[1][1]=4,l[1][2]=3,l[2][0]=2,l[2][1]=5,l[2][2]=3,l[2][3]=0,l[3][0]=3,l[3][1]=4,l[3][2]=1,l[3][3]=0,l[4][0]=1,l[4][1]=4,l[4][2]=5,l[4][3]=2):(n.set((t+.25)*a,(e+.25)*a,c),h[0].set(-.25*a,-.25*a,r[t][e]-c),h[1].set(.75*a,-.25*a,r[t+1][e]-c),h[2].set(-.25*a,.75*a,r[t][e+1]-c),h[3].set(-.25*a,-.25*a,-c-1),h[4].set(.75*a,-.25*a,-c-1),h[5].set(-.25*a,.75*a,-c-1),l[0][0]=0,l[0][1]=1,l[0][2]=2,l[1][0]=5,l[1][1]=4,l[1][2]=3,l[2][0]=0,l[2][1]=2,l[2][2]=5,l[2][3]=3,l[3][0]=1,l[3][1]=0,l[3][2]=3,l[3][3]=4,l[4][0]=4,l[4][1]=5,l[4][2]=2,l[4][3]=1),o.computeNormals(),o.computeEdges(),o.updateBoundingSphereRadius(),this.setCachedConvexTrianglePillar(t,e,s,o,n)}calculateLocalInertia(t,e=new i){return e.set(0,0,0),e}volume(){return Number.MAX_VALUE}calculateWorldAABB(t,e,s,i){s.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE),i.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE)}updateBoundingSphereRadius(){const t=this.data,e=this.elementSize;this.boundingSphereRadius=new i(t.length*e,t[0].length*e,Math.max(Math.abs(this.maxValue),Math.abs(this.minValue))).length()}setHeightsFromImage(t,e){const{x:s,z:i,y:o}=e,n=document.createElement("canvas");n.width=t.width,n.height=t.height;const r=n.getContext("2d");r.drawImage(t,0,0);const a=r.getImageData(0,0,t.width,t.height),l=this.data;l.length=0,this.elementSize=Math.abs(s)/a.width;for(let t=0;t<a.height;t++){const e=[];for(let o=0;o<a.width;o++){const n=(a.data[4*(t*a.height+o)]+a.data[4*(t*a.height+o)+1]+a.data[4*(t*a.height+o)+2])/4/255*i;s<0?e.push(n):e.unshift(n)}o<0?l.unshift(e):l.push(e)}this.updateMaxValue(),this.updateMinValue(),this.update()}}const Se=[],Me=new i,Ce=new i,qe=new i,Te=new i,Pe=new i,Ne=new i,Re=new i,Le=new i,Ie=new i;class je{constructor(t={}){this.root=t.root||null,this.aabb=t.aabb?t.aabb.clone():new a,this.data=[],this.children=[]}reset(){this.children.length=this.data.length=0}insert(t,e,s=0){const i=this.data;if(!this.aabb.contains(t))return!1;const o=this.children;if(s<(this.maxDepth||this.root.maxDepth)){let i=!1;o.length||(this.subdivide(),i=!0);for(let i=0;8!==i;i++)if(o[i].insert(t,e,s+1))return!0;i&&(o.length=0)}return i.push(e),!0}subdivide(){const t=this.aabb,e=t.lowerBound,s=t.upperBound,o=this.children;o.push(new je({aabb:new a({lowerBound:new i(0,0,0)})}),new je({aabb:new a({lowerBound:new i(1,0,0)})}),new je({aabb:new a({lowerBound:new i(1,1,0)})}),new je({aabb:new a({lowerBound:new i(1,1,1)})}),new je({aabb:new a({lowerBound:new i(0,1,1)})}),new je({aabb:new a({lowerBound:new i(0,0,1)})}),new je({aabb:new a({lowerBound:new i(1,0,1)})}),new je({aabb:new a({lowerBound:new i(0,1,0)})})),s.vsub(e,ke),ke.scale(.5,ke);const n=this.root||this;for(let t=0;8!==t;t++){const s=o[t];s.root=n;const i=s.aabb.lowerBound;i.x*=ke.x,i.y*=ke.y,i.z*=ke.z,i.vadd(e,i),i.vadd(ke,s.aabb.upperBound)}}aabbQuery(t,e){this.data,this.children;const s=[this];for(;s.length;){const i=s.pop();i.aabb.overlaps(t)&&Array.prototype.push.apply(e,i.data),Array.prototype.push.apply(s,i.children)}return e}rayQuery(t,e,s){return t.getAABB(We),We.toLocalFrame(e,We),this.aabbQuery(We,s),s}removeEmptyNodes(){for(let t=this.children.length-1;t>=0;t--)this.children[t].removeEmptyNodes(),this.children[t].children.length||this.children[t].data.length||this.children.splice(t,1)}}class Ve extends je{constructor(t,e={}){super({root:null,aabb:t}),this.maxDepth=void 0!==e.maxDepth?e.maxDepth:8}}const ke=new i,We=new a;class Oe extends m{constructor(t,e){super({type:m.types.TRIMESH}),this.vertices=new Float32Array(t),this.indices=new Int16Array(e),this.normals=new Float32Array(e.length),this.aabb=new a,this.edges=null,this.scale=new i(1,1,1),this.tree=new Ve,this.updateEdges(),this.updateNormals(),this.updateAABB(),this.updateBoundingSphereRadius(),this.updateTree()}updateTree(){const t=this.tree;t.reset(),t.aabb.copy(this.aabb);const e=this.scale;t.aabb.lowerBound.x*=1/e.x,t.aabb.lowerBound.y*=1/e.y,t.aabb.lowerBound.z*=1/e.z,t.aabb.upperBound.x*=1/e.x,t.aabb.upperBound.y*=1/e.y,t.aabb.upperBound.z*=1/e.z;const s=new a,o=new i,n=new i,r=new i,l=[o,n,r];for(let e=0;e<this.indices.length/3;e++){const i=3*e;this._getUnscaledVertex(this.indices[i],o),this._getUnscaledVertex(this.indices[i+1],n),this._getUnscaledVertex(this.indices[i+2],r),s.setFromPoints(l),t.insert(s,e)}t.removeEmptyNodes()}getTrianglesInAABB(t,e){He.copy(t);const s=this.scale,i=s.x,o=s.y,n=s.z,r=He.lowerBound,a=He.upperBound;return r.x/=i,r.y/=o,r.z/=n,a.x/=i,a.y/=o,a.z/=n,this.tree.aabbQuery(He,e)}setScale(t){const e=this.scale.x===this.scale.y&&this.scale.y===this.scale.z,s=t.x===t.y&&t.y===t.z;e&&s||this.updateNormals(),this.scale.copy(t),this.updateAABB(),this.updateBoundingSphereRadius()}updateNormals(){const t=_e,e=this.normals;for(let s=0;s<this.indices.length/3;s++){const i=3*s,o=this.indices[i],n=this.indices[i+1],r=this.indices[i+2];this.getVertex(o,Ye),this.getVertex(n,Ze),this.getVertex(r,Ke),Oe.computeNormal(Ze,Ye,Ke,t),e[i]=t.x,e[i+1]=t.y,e[i+2]=t.z}}updateEdges(){const t={},e=(e,s)=>{t[e<s?e+"_"+s:s+"_"+e]=!0};for(let t=0;t<this.indices.length/3;t++){const s=3*t,i=this.indices[s],o=this.indices[s+1],n=this.indices[s+2];e(i,o),e(o,n),e(n,i)}const s=Object.keys(t);this.edges=new Int16Array(2*s.length);for(let t=0;t<s.length;t++){const e=s[t].split("_");this.edges[2*t]=parseInt(e[0],10),this.edges[2*t+1]=parseInt(e[1],10)}}getEdgeVertex(t,e,s){const i=this.edges[2*t+(e?1:0)];this.getVertex(i,s)}getEdgeVector(t,e){const s=Ue,i=Ge;this.getEdgeVertex(t,0,s),this.getEdgeVertex(t,1,i),i.vsub(s,e)}getVertex(t,e){const s=this.scale;return this._getUnscaledVertex(t,e),e.x*=s.x,e.y*=s.y,e.z*=s.z,e}_getUnscaledVertex(t,e){const s=3*t,i=this.vertices;return e.set(i[s],i[s+1],i[s+2])}getWorldVertex(t,e,s,i){return this.getVertex(t,i),v.pointToWorldFrame(e,s,i,i),i}getTriangleVertices(t,e,s,i){const o=3*t;this.getVertex(this.indices[o],e),this.getVertex(this.indices[o+1],s),this.getVertex(this.indices[o+2],i)}getNormal(t,e){const s=3*t;return e.set(this.normals[s],this.normals[s+1],this.normals[s+2])}calculateLocalInertia(t,e){this.computeLocalAABB(Qe);const s=Qe.upperBound.x-Qe.lowerBound.x,i=Qe.upperBound.y-Qe.lowerBound.y,o=Qe.upperBound.z-Qe.lowerBound.z;return e.set(1/12*t*(2*i*2*i+2*o*2*o),1/12*t*(2*s*2*s+2*o*2*o),1/12*t*(2*i*2*i+2*s*2*s))}computeLocalAABB(t){const e=t.lowerBound,s=t.upperBound,i=this.vertices.length,o=(this.vertices,Je);this.getVertex(0,o),e.copy(o),s.copy(o);for(let t=0;t!==i;t++)this.getVertex(t,o),o.x<e.x?e.x=o.x:o.x>s.x&&(s.x=o.x),o.y<e.y?e.y=o.y:o.y>s.y&&(s.y=o.y),o.z<e.z?e.z=o.z:o.z>s.z&&(s.z=o.z)}updateAABB(){this.computeLocalAABB(this.aabb)}updateBoundingSphereRadius(){let t=0;const e=this.vertices,s=new i;for(let i=0,o=e.length/3;i!==o;i++){this.getVertex(i,s);const e=s.lengthSquared();e>t&&(t=e)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,i){const o=$e,n=ts;o.position=t,o.quaternion=e,this.aabb.toWorldFrame(o,n),s.copy(n.lowerBound),i.copy(n.upperBound)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}}const _e=new i,He=new a,Ue=new i,Ge=new i,De=new i,Xe=new i;Oe.computeNormal=(t,e,s,i)=>{e.vsub(t,Xe),s.vsub(e,De),De.cross(Xe,i),i.isZero()||i.normalize()};const Ye=new i,Ze=new i,Ke=new i,Qe=new a,Je=new i,$e=new v,ts=new a;Oe.createTorus=(t=1,e=.5,s=8,i=6,o=2*Math.PI)=>{const n=[],r=[];for(let r=0;r<=s;r++)for(let a=0;a<=i;a++){const l=a/i*o,h=r/s*Math.PI*2,c=(t+e*Math.cos(h))*Math.cos(l),u=(t+e*Math.cos(h))*Math.sin(l),d=e*Math.sin(h);n.push(c,u,d)}for(let t=1;t<=s;t++)for(let e=1;e<=i;e++){const s=(i+1)*t+e-1,o=(i+1)*(t-1)+e-1,n=(i+1)*(t-1)+e,a=(i+1)*t+e;r.push(s,o,a),r.push(o,n,a)}return new Oe(n,r)};class es extends class{constructor(){this.equations=[]}solve(t,e){return 0}addEquation(t){t.enabled&&this.equations.push(t)}removeEquation(t){const e=this.equations,s=e.indexOf(t);-1!==s&&e.splice(s,1)}removeAllEquations(){this.equations.length=0}}{constructor(){super(),this.iterations=10,this.tolerance=1e-7}solve(t,e){let s=0;const i=this.iterations,o=this.tolerance*this.tolerance,n=this.equations,r=n.length,a=e.bodies,l=a.length,h=t;let c,u,d,p,y,m;if(0!==r)for(let t=0;t!==l;t++)a[t].updateSolveMassProperties();const v=is,w=os,f=ss;v.length=r,w.length=r,f.length=r;for(let t=0;t!==r;t++){const e=n[t];f[t]=0,w[t]=e.computeB(h),v[t]=1/e.computeC()}if(0!==r){for(let t=0;t!==l;t++){const e=a[t],s=e.vlambda,i=e.wlambda;s.set(0,0,0),i.set(0,0,0)}for(s=0;s!==i;s++){p=0;for(let t=0;t!==r;t++){const e=n[t];c=w[t],u=v[t],m=f[t],y=e.computeGWlambda(),d=u*(c-y-e.eps*m),m+d<e.minForce?d=e.minForce-m:m+d>e.maxForce&&(d=e.maxForce-m),f[t]+=d,p+=d>0?d:-d,e.addToWlambda(d)}if(p*p<o)break}for(let t=0;t!==l;t++){const e=a[t],s=e.velocity,i=e.angularVelocity;e.vlambda.vmul(e.linearFactor,e.vlambda),s.vadd(e.vlambda,s),e.wlambda.vmul(e.angularFactor,e.wlambda),i.vadd(e.wlambda,i)}let t=n.length;const e=1/h;for(;t--;)n[t].multiplier=f[t]*e}return s}}const ss=[],is=[],os=[];class ns extends class{constructor(){this.objects=[],this.type=Object}release(...t){const e=t.length;for(let s=0;s!==e;s++)this.objects.push(t[s]);return this}get(){return 0===this.objects.length?this.constructObject():this.objects.pop()}constructObject(){throw new Error("constructObject() not implemented in this Pool subclass yet!")}resize(t){const e=this.objects;for(;e.length>t;)e.pop();for(;e.length<t;)e.push(this.constructObject());return this}}{constructor(){super(),this.type=i}constructObject(){return new i}}const rs=m.types.SPHERE,as=m.types.SPHERE|m.types.PLANE,ls=m.types.BOX|m.types.BOX,hs=m.types.SPHERE|m.types.BOX,cs=m.types.PLANE|m.types.BOX,us=m.types.CONVEXPOLYHEDRON,ds=m.types.SPHERE|m.types.CONVEXPOLYHEDRON,ps=m.types.PLANE|m.types.CONVEXPOLYHEDRON,ys=m.types.BOX|m.types.CONVEXPOLYHEDRON,ms=m.types.SPHERE|m.types.HEIGHTFIELD,vs=m.types.BOX|m.types.HEIGHTFIELD,ws=m.types.CONVEXPOLYHEDRON|m.types.HEIGHTFIELD,fs=m.types.PARTICLE|m.types.SPHERE,gs=m.types.PLANE|m.types.PARTICLE,xs=m.types.BOX|m.types.PARTICLE,bs=m.types.PARTICLE|m.types.CONVEXPOLYHEDRON,As=m.types.SPHERE|m.types.TRIMESH,Bs=m.types.PLANE|m.types.TRIMESH;class Es{constructor(t){this.contactPointPool=[],this.frictionEquationPool=[],this.result=[],this.frictionResult=[],this.v3pool=new ns,this.world=t,this.currentContactMaterial=t.defaultContactMaterial,this.enableFrictionReduction=!1}createContactEquation(t,e,s,i,o,n){let r;this.contactPointPool.length?(r=this.contactPointPool.pop(),r.bi=t,r.bj=e):r=new Lt(t,e),r.enabled=t.collisionResponse&&e.collisionResponse&&s.collisionResponse&&i.collisionResponse;const a=this.currentContactMaterial;r.restitution=a.restitution,r.setSpookParams(a.contactEquationStiffness,a.contactEquationRelaxation,this.world.dt);const l=s.material||t.material,h=i.material||e.material;return l&&h&&l.restitution>=0&&h.restitution>=0&&(r.restitution=l.restitution*h.restitution),r.si=o||s,r.sj=n||i,r}createFrictionEquationsFromContact(t,e){const s=t.bi,i=t.bj,o=t.si,n=t.sj,r=this.world,a=this.currentContactMaterial;let l=a.friction;const h=o.material||s.material,c=n.material||i.material;if(h&&c&&h.friction>=0&&c.friction>=0&&(l=h.friction*c.friction),l>0){const o=l*r.gravity.length();let n=s.invMass+i.invMass;n>0&&(n=1/n);const h=this.frictionEquationPool,c=h.length?h.pop():new oe(s,i,o*n),u=h.length?h.pop():new oe(s,i,o*n);return c.bi=u.bi=s,c.bj=u.bj=i,c.minForce=u.minForce=-o*n,c.maxForce=u.maxForce=o*n,c.ri.copy(t.ri),c.rj.copy(t.rj),u.ri.copy(t.ri),u.rj.copy(t.rj),t.ni.tangents(c.t,u.t),c.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,r.dt),u.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,r.dt),c.enabled=u.enabled=t.enabled,e.push(c,u),!0}return!1}createFrictionFromAverage(t){let e=this.result[this.result.length-1];if(!this.createFrictionEquationsFromContact(e,this.frictionResult)||1===t)return;const s=this.frictionResult[this.frictionResult.length-2],i=this.frictionResult[this.frictionResult.length-1];zs.setZero(),Fs.setZero(),Ss.setZero();const o=e.bi;e.bj;for(let s=0;s!==t;s++)e=this.result[this.result.length-1-s],e.bi!==o?(zs.vadd(e.ni,zs),Fs.vadd(e.ri,Fs),Ss.vadd(e.rj,Ss)):(zs.vsub(e.ni,zs),Fs.vadd(e.rj,Fs),Ss.vadd(e.ri,Ss));const n=1/t;Fs.scale(n,s.ri),Ss.scale(n,s.rj),i.ri.copy(s.ri),i.rj.copy(s.rj),zs.normalize(),zs.tangents(s.t,i.t)}getContacts(t,e,s,i,o,n,r){this.contactPointPool=o,this.frictionEquationPool=r,this.result=i,this.frictionResult=n;const a=qs,l=Ts,h=Ms,c=Cs;for(let i=0,o=t.length;i!==o;i++){const o=t[i],n=e[i];let r=null;o.material&&n.material&&(r=s.getContactMaterial(o.material,n.material)||null);const u=o.type&S.KINEMATIC&&n.type&S.STATIC||o.type&S.STATIC&&n.type&S.KINEMATIC||o.type&S.KINEMATIC&&n.type&S.KINEMATIC;for(let t=0;t<o.shapes.length;t++){o.quaternion.mult(o.shapeOrientations[t],a),o.quaternion.vmult(o.shapeOffsets[t],h),h.vadd(o.position,h);const e=o.shapes[t];for(let t=0;t<n.shapes.length;t++){n.quaternion.mult(n.shapeOrientations[t],l),n.quaternion.vmult(n.shapeOffsets[t],c),c.vadd(n.position,c);const i=n.shapes[t];if(!(e.collisionFilterMask&i.collisionFilterGroup&&i.collisionFilterMask&e.collisionFilterGroup))continue;if(h.distanceTo(c)>e.boundingSphereRadius+i.boundingSphereRadius)continue;let d=null;e.material&&i.material&&(d=s.getContactMaterial(e.material,i.material)||null),this.currentContactMaterial=d||r||s.defaultContactMaterial;const p=this[e.type|i.type];if(p){let t=!1;t=e.type<i.type?p.call(this,e,i,h,c,a,l,o,n,e,i,u):p.call(this,i,e,c,h,l,a,n,o,e,i,u),t&&u&&(s.shapeOverlapKeeper.set(e.id,i.id),s.bodyOverlapKeeper.set(o.id,n.id))}}}}}sphereSphere(t,e,s,i,o,n,r,a,l,h,c){if(c)return s.distanceSquared(i)<(t.radius+e.radius)**2;const u=this.createContactEquation(r,a,t,e,l,h);i.vsub(s,u.ni),u.ni.normalize(),u.ri.copy(u.ni),u.rj.copy(u.ni),u.ri.scale(t.radius,u.ri),u.rj.scale(-e.radius,u.rj),u.ri.vadd(s,u.ri),u.ri.vsub(r.position,u.ri),u.rj.vadd(i,u.rj),u.rj.vsub(a.position,u.rj),this.result.push(u),this.createFrictionEquationsFromContact(u,this.frictionResult)}spherePlane(t,e,s,i,o,n,r,a,l,h,c){const u=this.createContactEquation(r,a,t,e,l,h);if(u.ni.set(0,0,1),n.vmult(u.ni,u.ni),u.ni.negate(u.ni),u.ni.normalize(),u.ni.scale(t.radius,u.ri),s.vsub(i,Ks),u.ni.scale(u.ni.dot(Ks),Qs),Ks.vsub(Qs,u.rj),-Ks.dot(u.ni)<=t.radius){if(c)return!0;const t=u.ri,e=u.rj;t.vadd(s,t),t.vsub(r.position,t),e.vadd(i,e),e.vsub(a.position,e),this.result.push(u),this.createFrictionEquationsFromContact(u,this.frictionResult)}}boxBox(t,e,s,i,o,n,r,a,l,h,c){return t.convexPolyhedronRepresentation.material=t.material,e.convexPolyhedronRepresentation.material=e.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e.convexPolyhedronRepresentation,s,i,o,n,r,a,t,e,c)}sphereBox(t,e,s,i,o,n,r,a,l,h,c){const u=this.v3pool,d=ri;s.vsub(i,si),e.getSideNormals(d,n);const p=t.radius;let y=!1;const m=li,v=hi,w=ci;let f=null,g=0,x=0,b=0,A=null;for(let t=0,e=d.length;t!==e&&!1===y;t++){const e=ii;e.copy(d[t]);const s=e.length();e.normalize();const i=si.dot(e);if(i<s+p&&i>0){const o=oi,n=ni;o.copy(d[(t+1)%3]),n.copy(d[(t+2)%3]);const r=o.length(),a=n.length();o.normalize(),n.normalize();const l=si.dot(o),h=si.dot(n);if(l<r&&l>-r&&h<a&&h>-a){const t=Math.abs(i-s-p);if((null===A||t<A)&&(A=t,x=l,b=h,f=s,m.copy(e),v.copy(o),w.copy(n),g++,c))return!0}}}if(g){y=!0;const o=this.createContactEquation(r,a,t,e,l,h);m.scale(-p,o.ri),o.ni.copy(m),o.ni.negate(o.ni),m.scale(f,m),v.scale(x,v),m.vadd(v,m),w.scale(b,w),m.vadd(w,o.rj),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),o.rj.vadd(i,o.rj),o.rj.vsub(a.position,o.rj),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}let B=u.get();const E=ai;for(let o=0;2!==o&&!y;o++)for(let n=0;2!==n&&!y;n++)for(let u=0;2!==u&&!y;u++)if(B.set(0,0,0),o?B.vadd(d[0],B):B.vsub(d[0],B),n?B.vadd(d[1],B):B.vsub(d[1],B),u?B.vadd(d[2],B):B.vsub(d[2],B),i.vadd(B,E),E.vsub(s,E),E.lengthSquared()<p*p){if(c)return!0;y=!0;const o=this.createContactEquation(r,a,t,e,l,h);o.ri.copy(E),o.ri.normalize(),o.ni.copy(o.ri),o.ri.scale(p,o.ri),o.rj.copy(B),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),o.rj.vadd(i,o.rj),o.rj.vsub(a.position,o.rj),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}u.release(B),B=null;const z=u.get(),F=u.get(),S=u.get(),M=u.get(),C=u.get(),q=d.length;for(let o=0;o!==q&&!y;o++)for(let n=0;n!==q&&!y;n++)if(o%3!=n%3){d[n].cross(d[o],z),z.normalize(),d[o].vadd(d[n],F),S.copy(s),S.vsub(F,S),S.vsub(i,S);const u=S.dot(z);z.scale(u,M);let m=0;for(;m===o%3||m===n%3;)m++;C.copy(s),C.vsub(M,C),C.vsub(F,C),C.vsub(i,C);const v=Math.abs(u),w=C.length();if(v<d[m].length()&&w<p){if(c)return!0;y=!0;const o=this.createContactEquation(r,a,t,e,l,h);F.vadd(M,o.rj),o.rj.copy(o.rj),C.negate(o.ni),o.ni.normalize(),o.ri.copy(o.rj),o.ri.vadd(i,o.ri),o.ri.vsub(s,o.ri),o.ri.normalize(),o.ri.scale(p,o.ri),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),o.rj.vadd(i,o.rj),o.rj.vsub(a.position,o.rj),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}}u.release(z,F,S,M,C)}planeBox(t,e,s,i,o,n,r,a,l,h,c){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,e.convexPolyhedronRepresentation.id=e.id,this.planeConvex(t,e.convexPolyhedronRepresentation,s,i,o,n,r,a,t,e,c)}convexConvex(t,e,s,i,o,n,r,a,l,h,c,u,d){const p=zi;if(!(s.distanceTo(i)>t.boundingSphereRadius+e.boundingSphereRadius)&&t.findSeparatingAxis(e,s,o,i,n,p,u,d)){const u=[],d=Fi;t.clipAgainstHull(s,o,e,i,n,p,-100,100,u);let y=0;for(let o=0;o!==u.length;o++){if(c)return!0;const n=this.createContactEquation(r,a,t,e,l,h),m=n.ri,v=n.rj;p.negate(n.ni),u[o].normal.negate(d),d.scale(u[o].depth,d),u[o].point.vadd(d,m),v.copy(u[o].point),m.vsub(s,m),v.vsub(i,v),m.vadd(s,m),m.vsub(r.position,m),v.vadd(i,v),v.vsub(a.position,v),this.result.push(n),y++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(n,this.frictionResult)}this.enableFrictionReduction&&y&&this.createFrictionFromAverage(y)}}sphereConvex(t,e,s,i,o,n,r,a,l,h,c){const u=this.v3pool;s.vsub(i,ui);const d=e.faceNormals,p=e.faces,y=e.vertices,m=t.radius;let v=!1;for(let o=0;o!==y.length;o++){const u=y[o],d=mi;n.vmult(u,d),i.vadd(d,d);const p=yi;if(d.vsub(s,p),p.lengthSquared()<m*m){if(c)return!0;v=!0;const o=this.createContactEquation(r,a,t,e,l,h);return o.ri.copy(p),o.ri.normalize(),o.ni.copy(o.ri),o.ri.scale(m,o.ri),d.vsub(i,o.rj),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),o.rj.vadd(i,o.rj),o.rj.vsub(a.position,o.rj),this.result.push(o),void this.createFrictionEquationsFromContact(o,this.frictionResult)}}for(let o=0,w=p.length;o!==w&&!1===v;o++){const w=d[o],f=p[o],g=vi;n.vmult(w,g);const x=wi;n.vmult(y[f[0]],x),x.vadd(i,x);const b=fi;g.scale(-m,b),s.vadd(b,b);const A=gi;b.vsub(x,A);const B=A.dot(g),E=xi;if(s.vsub(x,E),B<0&&E.dot(g)>0){const o=[];for(let t=0,e=f.length;t!==e;t++){const e=u.get();n.vmult(y[f[t]],e),i.vadd(e,e),o.push(e)}if(ei(o,g,s)){if(c)return!0;v=!0;const n=this.createContactEquation(r,a,t,e,l,h);g.scale(-m,n.ri),g.negate(n.ni);const d=u.get();g.scale(-B,d);const p=u.get();g.scale(-m,p),s.vsub(i,n.rj),n.rj.vadd(p,n.rj),n.rj.vadd(d,n.rj),n.rj.vadd(i,n.rj),n.rj.vsub(a.position,n.rj),n.ri.vadd(s,n.ri),n.ri.vsub(r.position,n.ri),u.release(d),u.release(p),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult);for(let t=0,e=o.length;t!==e;t++)u.release(o[t]);return}for(let d=0;d!==f.length;d++){const p=u.get(),v=u.get();n.vmult(y[f[(d+1)%f.length]],p),n.vmult(y[f[(d+2)%f.length]],v),i.vadd(p,p),i.vadd(v,v);const w=di;v.vsub(p,w);const g=pi;w.unit(g);const x=u.get(),b=u.get();s.vsub(p,b);const A=b.dot(g);g.scale(A,x),x.vadd(p,x);const B=u.get();if(x.vsub(s,B),A>0&&A*A<w.lengthSquared()&&B.lengthSquared()<m*m){if(c)return!0;const n=this.createContactEquation(r,a,t,e,l,h);x.vsub(i,n.rj),x.vsub(s,n.ni),n.ni.normalize(),n.ni.scale(m,n.ri),n.rj.vadd(i,n.rj),n.rj.vsub(a.position,n.rj),n.ri.vadd(s,n.ri),n.ri.vsub(r.position,n.ri),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult);for(let t=0,e=o.length;t!==e;t++)u.release(o[t]);return u.release(p),u.release(v),u.release(x),u.release(B),void u.release(b)}u.release(p),u.release(v),u.release(x),u.release(B),u.release(b)}for(let t=0,e=o.length;t!==e;t++)u.release(o[t])}}}planeConvex(t,e,s,i,o,n,r,a,l,h,c){const u=bi,d=Ai;d.set(0,0,1),o.vmult(d,d);let p=0;const y=Bi;for(let o=0;o!==e.vertices.length;o++){u.copy(e.vertices[o]),n.vmult(u,u),i.vadd(u,u),u.vsub(s,y);if(d.dot(y)<=0){if(c)return!0;const o=this.createContactEquation(r,a,t,e,l,h),n=Ei;d.scale(d.dot(y),n),u.vsub(n,n),n.vsub(s,o.ri),o.ni.copy(d),u.vsub(i,o.rj),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),o.rj.vadd(i,o.rj),o.rj.vsub(a.position,o.rj),this.result.push(o),p++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(o,this.frictionResult)}}this.enableFrictionReduction&&p&&this.createFrictionFromAverage(p)}boxConvex(t,e,s,i,o,n,r,a,l,h,c){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e,s,i,o,n,r,a,t,e,c)}sphereHeightfield(t,e,s,i,o,n,r,a,l,h,c){const u=e.data,d=t.radius,p=e.elementSize,y=Wi,m=ki;v.pointToLocalFrame(i,n,s,m);let w=Math.floor((m.x-d)/p)-1,f=Math.ceil((m.x+d)/p)+1,g=Math.floor((m.y-d)/p)-1,x=Math.ceil((m.y+d)/p)+1;if(f<0||x<0||w>u.length||g>u[0].length)return;w<0&&(w=0),f<0&&(f=0),g<0&&(g=0),x<0&&(x=0),w>=u.length&&(w=u.length-1),f>=u.length&&(f=u.length-1),x>=u[0].length&&(x=u[0].length-1),g>=u[0].length&&(g=u[0].length-1);const b=[];e.getRectMinMax(w,g,f,x,b);const A=b[0],B=b[1];if(m.z-d>B||m.z+d<A)return;const E=this.result;for(let l=w;l<f;l++)for(let h=g;h<x;h++){const u=E.length;let d=!1;if(e.getConvexTrianglePillar(l,h,!1),v.pointToWorldFrame(i,n,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(d=this.sphereConvex(t,e.pillarConvex,s,y,o,n,r,a,t,e,c)),c&&d)return!0;if(e.getConvexTrianglePillar(l,h,!0),v.pointToWorldFrame(i,n,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(d=this.sphereConvex(t,e.pillarConvex,s,y,o,n,r,a,t,e,c)),c&&d)return!0;if(E.length-u>2)return}}boxHeightfield(t,e,s,i,o,n,r,a,l,h,c){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexHeightfield(t.convexPolyhedronRepresentation,e,s,i,o,n,r,a,t,e,c)}convexHeightfield(t,e,s,i,o,n,r,a,l,h,c){const u=e.data,d=e.elementSize,p=t.boundingSphereRadius,y=ji,m=Vi,w=Ii;v.pointToLocalFrame(i,n,s,w);let f=Math.floor((w.x-p)/d)-1,g=Math.ceil((w.x+p)/d)+1,x=Math.floor((w.y-p)/d)-1,b=Math.ceil((w.y+p)/d)+1;if(g<0||b<0||f>u.length||x>u[0].length)return;f<0&&(f=0),g<0&&(g=0),x<0&&(x=0),b<0&&(b=0),f>=u.length&&(f=u.length-1),g>=u.length&&(g=u.length-1),b>=u[0].length&&(b=u[0].length-1),x>=u[0].length&&(x=u[0].length-1);const A=[];e.getRectMinMax(f,x,g,b,A);const B=A[0],E=A[1];if(!(w.z-p>E||w.z+p<B))for(let l=f;l<g;l++)for(let h=x;h<b;h++){let u=!1;if(e.getConvexTrianglePillar(l,h,!1),v.pointToWorldFrame(i,n,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(u=this.convexConvex(t,e.pillarConvex,s,y,o,n,r,a,null,null,c,m,null)),c&&u)return!0;if(e.getConvexTrianglePillar(l,h,!0),v.pointToWorldFrame(i,n,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(u=this.convexConvex(t,e.pillarConvex,s,y,o,n,r,a,null,null,c,m,null)),c&&u)return!0}}sphereParticle(t,e,s,i,o,n,r,a,l,h,c){const u=qi;u.set(0,0,1),i.vsub(s,u);if(u.lengthSquared()<=t.radius*t.radius){if(c)return!0;const s=this.createContactEquation(a,r,e,t,l,h);u.normalize(),s.rj.copy(u),s.rj.scale(t.radius,s.rj),s.ni.copy(u),s.ni.negate(s.ni),s.ri.set(0,0,0),this.result.push(s),this.createFrictionEquationsFromContact(s,this.frictionResult)}}planeParticle(t,e,s,i,o,n,r,a,l,h,c){const u=Si;u.set(0,0,1),r.quaternion.vmult(u,u);const d=Mi;i.vsub(r.position,d);if(u.dot(d)<=0){if(c)return!0;const s=this.createContactEquation(a,r,e,t,l,h);s.ni.copy(u),s.ni.negate(s.ni),s.ri.set(0,0,0);const o=Ci;u.scale(u.dot(i),o),i.vsub(o,o),s.rj.copy(o),this.result.push(s),this.createFrictionEquationsFromContact(s,this.frictionResult)}}boxParticle(t,e,s,i,o,n,r,a,l,h,c){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexParticle(t.convexPolyhedronRepresentation,e,s,i,o,n,r,a,t,e,c)}convexParticle(t,e,s,i,o,n,r,a,l,h,c){let u=-1;const d=Ni,p=Li;let y=null;const m=Pi;if(m.copy(i),m.vsub(s,m),o.conjugate(Ti),Ti.vmult(m,m),t.pointIsInside(m)){t.worldVerticesNeedsUpdate&&t.computeWorldVertices(s,o),t.worldFaceNormalsNeedsUpdate&&t.computeWorldFaceNormals(o);for(let e=0,s=t.faces.length;e!==s;e++){const s=[t.worldVertices[t.faces[e][0]]],o=t.worldFaceNormals[e];i.vsub(s[0],Ri);const n=-o.dot(Ri);if(null===y||Math.abs(n)<Math.abs(y)){if(c)return!0;y=n,u=e,d.copy(o)}}if(-1!==u){const o=this.createContactEquation(a,r,e,t,l,h);d.scale(y,p),p.vadd(i,p),p.vsub(s,p),o.rj.copy(p),d.negate(o.ni),o.ri.set(0,0,0);const n=o.ri,c=o.rj;n.vadd(i,n),n.vsub(a.position,n),c.vadd(s,c),c.vsub(r.position,c),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}else console.warn("Point found inside convex, but did not find penetrating face!")}}sphereTrimesh(t,e,s,i,o,n,r,a,l,h,c){const u=ks,d=Ws,p=Os,y=_s,m=Hs,w=Us,f=Ys,g=Vs,x=Is,b=Zs;v.pointToLocalFrame(i,n,s,m);const A=t.radius;f.lowerBound.set(m.x-A,m.y-A,m.z-A),f.upperBound.set(m.x+A,m.y+A,m.z+A),e.getTrianglesInAABB(f,b);const B=js,E=t.radius*t.radius;for(let o=0;o<b.length;o++)for(let u=0;u<3;u++)if(e.getVertex(e.indices[3*b[o]+u],B),B.vsub(m,x),x.lengthSquared()<=E){if(g.copy(B),v.pointToWorldFrame(i,n,g,B),B.vsub(s,x),c)return!0;let o=this.createContactEquation(r,a,t,e,l,h);o.ni.copy(x),o.ni.normalize(),o.ri.copy(o.ni),o.ri.scale(t.radius,o.ri),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),o.rj.copy(B),o.rj.vsub(a.position,o.rj),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}for(let o=0;o<b.length;o++)for(let f=0;f<3;f++){e.getVertex(e.indices[3*b[o]+f],u),e.getVertex(e.indices[3*b[o]+(f+1)%3],d),d.vsub(u,p),m.vsub(d,w);const g=w.dot(p);m.vsub(u,w);let x=w.dot(p);if(x>0&&g<0){m.vsub(u,w),y.copy(p),y.normalize(),x=w.dot(y),y.scale(x,w),w.vadd(u,w);if(w.distanceTo(m)<t.radius){if(c)return!0;const o=this.createContactEquation(r,a,t,e,l,h);w.vsub(m,o.ni),o.ni.normalize(),o.ni.scale(t.radius,o.ri),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),v.pointToWorldFrame(i,n,w,w),w.vsub(a.position,o.rj),v.vectorToWorldFrame(n,o.ni,o.ni),v.vectorToWorldFrame(n,o.ri,o.ri),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}}}const z=Gs,F=Ds,S=Xs,M=Ls;for(let o=0,u=b.length;o!==u;o++){e.getTriangleVertices(b[o],z,F,S),e.getNormal(b[o],M),m.vsub(z,w);let u=w.dot(M);if(M.scale(u,w),m.vsub(w,w),u=w.distanceTo(m),Y.pointInTriangle(w,z,F,S)&&u<t.radius){if(c)return!0;let o=this.createContactEquation(r,a,t,e,l,h);w.vsub(m,o.ni),o.ni.normalize(),o.ni.scale(t.radius,o.ri),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),v.pointToWorldFrame(i,n,w,w),w.vsub(a.position,o.rj),v.vectorToWorldFrame(n,o.ni,o.ni),v.vectorToWorldFrame(n,o.ri,o.ri),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}}b.length=0}planeTrimesh(t,e,s,o,n,r,a,l,h,c,u){const d=new i,p=Ps;p.set(0,0,1),n.vmult(p,p);for(let n=0;n<e.vertices.length/3;n++){e.getVertex(n,d);const y=new i;y.copy(d),v.pointToWorldFrame(o,r,y,d);const m=Ns;d.vsub(s,m);if(p.dot(m)<=0){if(u)return!0;const s=this.createContactEquation(a,l,t,e,h,c);s.ni.copy(p);const i=Rs;p.scale(m.dot(p),i),d.vsub(i,i),s.ri.copy(i),s.ri.vsub(a.position,s.ri),s.rj.copy(d),s.rj.vsub(l.position,s.rj),this.result.push(s),this.createFrictionEquationsFromContact(s,this.frictionResult)}}}}const zs=new i,Fs=new i,Ss=new i,Ms=new i,Cs=new i,qs=new d,Ts=new d;Es.prototype[ls]=Es.prototype.boxBox,Es.prototype[ys]=Es.prototype.boxConvex,Es.prototype[xs]=Es.prototype.boxParticle,Es.prototype[rs]=Es.prototype.sphereSphere;const Ps=new i,Ns=new i,Rs=new i;Es.prototype[Bs]=Es.prototype.planeTrimesh;const Ls=new i,Is=new i,js=new i,Vs=new i,ks=new i,Ws=new i,Os=new i,_s=new i,Hs=new i,Us=new i,Gs=new i,Ds=new i,Xs=new i,Ys=new a,Zs=[];Es.prototype[As]=Es.prototype.sphereTrimesh;const Ks=new i,Qs=new i;Es.prototype[as]=Es.prototype.spherePlane;const Js=new i,$s=new i,ti=new i;function ei(t,e,s){let i=null;const o=t.length;for(let n=0;n!==o;n++){const r=t[n],a=Js;t[(n+1)%o].vsub(r,a);const l=$s;a.cross(e,l);const h=ti;s.vsub(r,h);const c=l.dot(h);if(!(null===i||c>0&&!0===i||c<=0&&!1===i))return!1;null===i&&(i=c>0)}return!0}const si=new i,ii=new i,oi=new i,ni=new i,ri=[new i,new i,new i,new i,new i,new i],ai=new i,li=new i,hi=new i,ci=new i;Es.prototype[hs]=Es.prototype.sphereBox;const ui=new i,di=new i,pi=new i,yi=new i,mi=new i,vi=new i,wi=new i,fi=new i,gi=new i,xi=new i;Es.prototype[ds]=Es.prototype.sphereConvex,Es.prototype[cs]=Es.prototype.planeBox;const bi=new i,Ai=new i,Bi=new i,Ei=new i;Es.prototype[ps]=Es.prototype.planeConvex;const zi=new i,Fi=new i;Es.prototype[us]=Es.prototype.convexConvex;const Si=new i,Mi=new i,Ci=new i;Es.prototype[gs]=Es.prototype.planeParticle;const qi=new i;Es.prototype[fs]=Es.prototype.sphereParticle;const Ti=new d,Pi=new i,Ni=new i,Ri=new i,Li=new i;Es.prototype[bs]=Es.prototype.convexParticle,Es.prototype[vs]=Es.prototype.boxHeightfield;const Ii=new i,ji=new i,Vi=[0];Es.prototype[ws]=Es.prototype.convexHeightfield;const ki=new i,Wi=new i;Es.prototype[ms]=Es.prototype.sphereHeightfield;class Oi{constructor(){this.current=[],this.previous=[]}getKey(t,e){if(e<t){const s=e;e=t,t=s}return t<<16|e}set(t,e){const s=this.getKey(t,e),i=this.current;let o=0;for(;s>i[o];)o++;if(s!==i[o]){for(let t=i.length-1;t>=o;t--)i[t+1]=i[t];i[o]=s}}tick(){const t=this.current;this.current=this.previous,this.previous=t,this.current.length=0}getDiff(t,e){const s=this.current,i=this.previous,o=s.length,n=i.length;let r=0;for(let e=0;e<o;e++){let o=!1;const n=s[e];for(;n>i[r];)r++;o=n===i[r],o||_i(t,n)}r=0;for(let t=0;t<n;t++){let o=!1;const n=i[t];for(;n>s[r];)r++;o=s[r]===n,o||_i(e,n)}}}function _i(t,e){t.push((4294901760&e)>>16,65535&e)}class Hi{constructor(){this.data={keys:[]}}get(t,e){if(t>e){const s=e;e=t,t=s}return this.data[t+"-"+e]}set(t,e,s){if(t>e){const s=e;e=t,t=s}const i=t+"-"+e;this.get(t,e)||this.data.keys.push(i),this.data[i]=s}reset(){const t=this.data,e=t.keys;for(;e.length>0;){delete t[e.pop()]}}}class Ui extends u{constructor(t={}){super(),this.dt=-1,this.allowSleep=!!t.allowSleep,this.contacts=[],this.frictionEquations=[],this.quatNormalizeSkip=void 0!==t.quatNormalizeSkip?t.quatNormalizeSkip:0,this.quatNormalizeFast=void 0!==t.quatNormalizeFast&&t.quatNormalizeFast,this.time=0,this.stepnumber=0,this.default_dt=1/60,this.nextId=0,this.gravity=new i,t.gravity&&this.gravity.copy(t.gravity),this.broadphase=void 0!==t.broadphase?t.broadphase:new D,this.bodies=[],this.hasActiveBodies=!1,this.solver=void 0!==t.solver?t.solver:new es,this.constraints=[],this.narrowphase=new Es(this),this.collisionMatrix=new c,this.collisionMatrixPrevious=new c,this.bodyOverlapKeeper=new Oi,this.shapeOverlapKeeper=new Oi,this.materials=[],this.contactmaterials=[],this.contactMaterialTable=new Hi,this.defaultMaterial=new le("default"),this.defaultContactMaterial=new ae(this.defaultMaterial,this.defaultMaterial,{friction:.3,restitution:0}),this.doProfiling=!1,this.profile={solve:0,makeContactConstraints:0,broadphase:0,integrate:0,narrowphase:0},this.accumulator=0,this.subsystems=[],this.addBodyEvent={type:"addBody",body:null},this.removeBodyEvent={type:"removeBody",body:null},this.idToBodyMap={},this.broadphase.setWorld(this)}getContactMaterial(t,e){return this.contactMaterialTable.get(t.id,e.id)}numObjects(){return this.bodies.length}collisionMatrixTick(){const t=this.collisionMatrixPrevious;this.collisionMatrixPrevious=this.collisionMatrix,this.collisionMatrix=t,this.collisionMatrix.reset(),this.bodyOverlapKeeper.tick(),this.shapeOverlapKeeper.tick()}addConstraint(t){this.constraints.push(t)}removeConstraint(t){const e=this.constraints.indexOf(t);-1!==e&&this.constraints.splice(e,1)}rayTest(t,e,s){s instanceof X?this.raycastClosest(t,e,{skipBackfaces:!0},s):this.raycastAll(t,e,{skipBackfaces:!0},s)}raycastAll(t,e,s={},i){return s.mode=Y.ALL,s.from=t,s.to=e,s.callback=i,Gi.intersectWorld(this,s)}raycastAny(t,e,s={},i){return s.mode=Y.ANY,s.from=t,s.to=e,s.result=i,Gi.intersectWorld(this,s)}raycastClosest(t,e,s={},i){return s.mode=Y.CLOSEST,s.from=t,s.to=e,s.result=i,Gi.intersectWorld(this,s)}addBody(t){this.bodies.includes(t)||(t.index=this.bodies.length,this.bodies.push(t),t.world=this,t.initPosition.copy(t.position),t.initVelocity.copy(t.velocity),t.timeLastSleepy=this.time,t instanceof S&&(t.initAngularVelocity.copy(t.angularVelocity),t.initQuaternion.copy(t.quaternion)),this.collisionMatrix.setNumObjects(this.bodies.length),this.addBodyEvent.body=t,this.idToBodyMap[t.id]=t,this.dispatchEvent(this.addBodyEvent))}removeBody(t){t.world=null;const e=this.bodies.length-1,s=this.bodies,i=s.indexOf(t);if(-1!==i){s.splice(i,1);for(let t=0;t!==s.length;t++)s[t].index=t;this.collisionMatrix.setNumObjects(e),this.removeBodyEvent.body=t,delete this.idToBodyMap[t.id],this.dispatchEvent(this.removeBodyEvent)}}getBodyById(t){return this.idToBodyMap[t]}getShapeById(t){const e=this.bodies;for(let s=0,i=e.length;s<i;s++){const i=e[s].shapes;for(let e=0,s=i.length;e<s;e++){const s=i[e];if(s.id===t)return s}}}addMaterial(t){this.materials.push(t)}addContactMaterial(t){this.contactmaterials.push(t),this.contactMaterialTable.set(t.materials[0].id,t.materials[1].id,t)}step(t,e=0,s=10){if(0===e)this.internalStep(t),this.time+=t;else{this.accumulator+=e;let i=0;for(;this.accumulator>=t&&i<s;)this.internalStep(t),this.accumulator-=t,i++;const o=this.accumulator%t/t;for(let t=0;t!==this.bodies.length;t++){const e=this.bodies[t];e.previousPosition.lerp(e.position,o,e.interpolatedPosition),e.previousQuaternion.slerp(e.quaternion,o,e.interpolatedQuaternion),e.previousQuaternion.normalize()}this.time+=e}}internalStep(t){this.dt=t;const e=this.contacts,s=Qi,i=Ji,o=this.numObjects(),n=this.bodies,r=this.solver,a=this.gravity,l=this.doProfiling,h=this.profile,c=S.DYNAMIC;let u=-1/0;const d=this.constraints,p=Ki,y=(a.length(),a.x),m=a.y,v=a.z;let w=0;for(l&&(u=performance.now()),w=0;w!==o;w++){const t=n[w];if(t.type===c){const e=t.force,s=t.mass;e.x+=s*y,e.y+=s*m,e.z+=s*v}}for(let t=0,e=this.subsystems.length;t!==e;t++)this.subsystems[t].update();l&&(u=performance.now()),s.length=0,i.length=0,this.broadphase.collisionPairs(this,s,i),l&&(h.broadphase=performance.now()-u);let f=d.length;for(w=0;w!==f;w++){const t=d[w];if(!t.collideConnected)for(let e=s.length-1;e>=0;e-=1)(t.bodyA===s[e]&&t.bodyB===i[e]||t.bodyB===s[e]&&t.bodyA===i[e])&&(s.splice(e,1),i.splice(e,1))}this.collisionMatrixTick(),l&&(u=performance.now());const g=Zi,x=e.length;for(w=0;w!==x;w++)g.push(e[w]);e.length=0;const b=this.frictionEquations.length;for(w=0;w!==b;w++)p.push(this.frictionEquations[w]);for(this.frictionEquations.length=0,this.narrowphase.getContacts(s,i,this,e,g,this.frictionEquations,p),l&&(h.narrowphase=performance.now()-u),l&&(u=performance.now()),w=0;w<this.frictionEquations.length;w++)r.addEquation(this.frictionEquations[w]);const A=e.length;for(let t=0;t!==A;t++){const s=e[t],i=s.bi,o=s.bj,n=s.si,a=s.sj;let l;l=i.material&&o.material&&this.getContactMaterial(i.material,o.material)||this.defaultContactMaterial;let h=l.friction;if(i.material&&o.material&&(i.material.friction>=0&&o.material.friction>=0&&(h=i.material.friction*o.material.friction),i.material.restitution>=0&&o.material.restitution>=0&&(s.restitution=i.material.restitution*o.material.restitution)),r.addEquation(s),i.allowSleep&&i.type===S.DYNAMIC&&i.sleepState===S.SLEEPING&&o.sleepState===S.AWAKE&&o.type!==S.STATIC){o.velocity.lengthSquared()+o.angularVelocity.lengthSquared()>=2*o.sleepSpeedLimit**2&&(i.wakeUpAfterNarrowphase=!0)}if(o.allowSleep&&o.type===S.DYNAMIC&&o.sleepState===S.SLEEPING&&i.sleepState===S.AWAKE&&i.type!==S.STATIC){i.velocity.lengthSquared()+i.angularVelocity.lengthSquared()>=2*i.sleepSpeedLimit**2&&(o.wakeUpAfterNarrowphase=!0)}this.collisionMatrix.set(i,o,!0),this.collisionMatrixPrevious.get(i,o)||(Yi.body=o,Yi.contact=s,i.dispatchEvent(Yi),Yi.body=i,o.dispatchEvent(Yi)),this.bodyOverlapKeeper.set(i.id,o.id),this.shapeOverlapKeeper.set(n.id,a.id)}for(this.emitContactEvents(),l&&(h.makeContactConstraints=performance.now()-u,u=performance.now()),w=0;w!==o;w++){const t=n[w];t.wakeUpAfterNarrowphase&&(t.wakeUp(),t.wakeUpAfterNarrowphase=!1)}for(f=d.length,w=0;w!==f;w++){const t=d[w];t.update();for(let e=0,s=t.equations.length;e!==s;e++){const s=t.equations[e];r.addEquation(s)}}r.solve(t,this),l&&(h.solve=performance.now()-u),r.removeAllEquations();const B=Math.pow;for(w=0;w!==o;w++){const e=n[w];if(e.type&c){const s=B(1-e.linearDamping,t),i=e.velocity;i.scale(s,i);const o=e.angularVelocity;if(o){const s=B(1-e.angularDamping,t);o.scale(s,o)}}}for(this.dispatchEvent(Xi),w=0;w!==o;w++){const t=n[w];t.preStep&&t.preStep.call(t)}l&&(u=performance.now());const E=this.stepnumber%(this.quatNormalizeSkip+1)==0,z=this.quatNormalizeFast;for(w=0;w!==o;w++)n[w].integrate(t,E,z);for(this.clearForces(),this.broadphase.dirty=!0,l&&(h.integrate=performance.now()-u),this.time+=t,this.stepnumber+=1,this.dispatchEvent(Di),w=0;w!==o;w++){const t=n[w],e=t.postStep;e&&e.call(t)}let F=!0;if(this.allowSleep)for(F=!1,w=0;w!==o;w++){const t=n[w];t.sleepTick(this.time),t.sleepState!==S.SLEEPING&&(F=!0)}this.hasActiveBodies=F}clearForces(){const t=this.bodies,e=t.length;for(let s=0;s!==e;s++){const e=t[s];e.force,e.torque;e.force.set(0,0,0),e.torque.set(0,0,0)}}}new a;const Gi=new Y;if("undefined"==typeof performance&&(performance={}),!performance.now){let t=Date.now();performance.timing&&performance.timing.navigationStart&&(t=performance.timing.navigationStart),performance.now=()=>Date.now()-t}const Di={type:"postStep"},Xi={type:"preStep"},Yi={type:S.COLLIDE_EVENT_NAME,body:null,contact:null},Zi=[],Ki=[],Qi=[],Ji=[];Ui.prototype.emitContactEvents=(()=>{const t=[],e=[],s={type:"beginContact",bodyA:null,bodyB:null},i={type:"endContact",bodyA:null,bodyB:null},o={type:"beginShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},n={type:"endShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null};return function(){const r=this.hasAnyEventListener("beginContact"),a=this.hasAnyEventListener("endContact");if((r||a)&&this.bodyOverlapKeeper.getDiff(t,e),r){for(let e=0,i=t.length;e<i;e+=2)s.bodyA=this.getBodyById(t[e]),s.bodyB=this.getBodyById(t[e+1]),this.dispatchEvent(s);s.bodyA=s.bodyB=null}if(a){for(let t=0,s=e.length;t<s;t+=2)i.bodyA=this.getBodyById(e[t]),i.bodyB=this.getBodyById(e[t+1]),this.dispatchEvent(i);i.bodyA=i.bodyB=null}t.length=e.length=0;const l=this.hasAnyEventListener("beginShapeContact"),h=this.hasAnyEventListener("endShapeContact");if((l||h)&&this.shapeOverlapKeeper.getDiff(t,e),l){for(let e=0,s=t.length;e<s;e+=2){const s=this.getShapeById(t[e]),i=this.getShapeById(t[e+1]);o.shapeA=s,o.shapeB=i,o.bodyA=s.body,o.bodyB=i.body,this.dispatchEvent(o)}o.bodyA=o.bodyB=o.shapeA=o.shapeB=null}if(h){for(let t=0,s=e.length;t<s;t+=2){const s=this.getShapeById(e[t]),i=this.getShapeById(e[t+1]);n.shapeA=s,n.shapeB=i,n.bodyA=s.body,n.bodyB=i.body,this.dispatchEvent(n)}n.bodyA=n.bodyB=n.shapeA=n.shapeB=null}}})();let $i={};const to={},eo={},so=new Ui,io={step:1/60},oo={},no=new i;function ro(t,e){switch(t){case"Box":return new b(new i(...e));case"ConvexPolyhedron":const[t,s,o]=e;return new f({vertices:t.map(([t,e,s])=>new i(t,e,s)),normals:o?o.map(([t,e,s])=>new i(t,e,s)):null,faces:s});case"Cylinder":return new Ae(...e);case"Heightfield":return new Fe(...e);case"Particle":return new Be;case"Plane":return new Ee;case"Sphere":return new be(...e);case"Trimesh":return new Oe(...e)}}function ao(){self.postMessage({op:"sync",bodies:so.bodies.map(t=>t.uuid)}),$i=so.bodies.reduce((e,s)=>t({},e,{[s.uuid]:s}),{})}self.onmessage=s=>{const{op:o,uuid:n,type:r,positions:a,quaternions:l,props:h}=s.data;switch(o){case"init":{const{gravity:t,tolerance:e,step:s,iterations:i,allowSleep:o,broadphase:n,axisIndex:r,defaultContactMaterial:a}=h,l={NaiveBroadphase:D,SAPBroadphase:Et};so.allowSleep=o,so.gravity.set(t[0],t[1],t[2]),so.solver.tolerance=e,so.solver.iterations=i,so.broadphase=new(l[n+"Broadphase"]||D)(so),so.broadphase.axisIndex=null!=r?r:0,Object.assign(so.defaultContactMaterial,a),io.step=s;break}case"step":{so.step(io.step);const t=so.bodies.length;for(let e=0;e<t;e++){let t=so.bodies[e],s=t.position,i=t.quaternion;a[3*e+0]=s.x,a[3*e+1]=s.y,a[3*e+2]=s.z,l[4*e+0]=i.x,l[4*e+1]=i.y,l[4*e+2]=i.z,l[4*e+3]=i.w}const e=[];for(const t of Object.keys(oo)){const[s,o]=oo[t];let n=$i[s][o];n instanceof i?n=n.toArray():n instanceof d&&(n.toEuler(no),n=no.toArray()),e.push([t,n])}self.postMessage({op:"frame",positions:a,quaternions:l,observations:e,active:so.hasActiveBodies},[a.buffer,l.buffer]);break}case"addBodies":for(let s=0;s<n.length;s++){const o=h[s],{args:a=[],position:l=[0,0,0],rotation:c=[0,0,0],scale:u=[1,1,1],velocity:p=[0,0,0],angularVelocity:y=[0,0,0],linearFactor:m=[1,1,1],angularFactor:v=[1,1,1],type:w,mass:f,material:g,shapes:x,onCollide:b}=o,A=e(o,["args","position","rotation","scale","velocity","angularVelocity","linearFactor","angularFactor","type","mass","material","shapes","onCollide"]),B=new S(t({},A,{mass:"Static"===w?0:f,type:w?S[w.toUpperCase()]:void 0,material:g?new le(g):void 0}));B.uuid=n[s],"Compound"===r?x.forEach(t=>{let{type:s,args:o,position:n,rotation:r,material:a}=t,l=e(t,["type","args","position","rotation","material"]);const h=B.addShape(ro(s,o),n?new i(...n):void 0,r?(new d).setFromEuler(...r):void 0);a&&(h.material=new le(a)),Object.assign(h,l)}):B.addShape(ro(r,a)),B.position.set(l[0],l[1],l[2]),B.quaternion.setFromEuler(c[0],c[1],c[2]),B.velocity.set(p[0],p[1],p[2]),B.angularVelocity.set(y[0],y[1],y[2]),B.linearFactor.set(m[0],m[1],m[2]),B.angularFactor.set(v[0],v[1],v[2]),so.addBody(B),b&&B.addEventListener("collide",({type:t,body:e,target:s,contact:i})=>{const{ni:o,ri:n,rj:r}=i;self.postMessage({op:"event",type:t,body:e.uuid,target:s.uuid,contact:{ni:o.toArray(),ri:n.toArray(),rj:r.toArray(),impactVelocity:i.getImpactVelocityAlongNormal()},collisionFilters:{bodyFilterGroup:e.collisionFilterGroup,bodyFilterMask:e.collisionFilterMask,targetFilterGroup:s.collisionFilterGroup,targetFilterMask:s.collisionFilterMask}})})}ao();break;case"removeBodies":for(let t=0;t<n.length;t++)so.removeBody($i[n[t]]);ao();break;case"subscribe":{const{id:t,type:e}=h;oo[t]=[n,e];break}case"unsubscribe":delete oo[h];break;case"setPosition":$i[n].position.set(h[0],h[1],h[2]);break;case"setQuaternion":$i[n].quaternion.setFromEuler(h[0],h[1],h[2]);break;case"setVelocity":$i[n].velocity.set(h[0],h[1],h[2]);break;case"setAngularVelocity":$i[n].angularVelocity.set(h[0],h[1],h[2]);break;case"setLinearFactor":$i[n].linearFactor.set(h[0],h[1],h[2]);break;case"setAngularFactor":$i[n].angularFactor.set(h[0],h[1],h[2]);break;case"setMass":$i[n].mass=h;break;case"setLinearDamping":$i[n].linearDamping=h;break;case"setAngularDamping":$i[n].angularDamping=h;break;case"setAllowSleep":$i[n].allowSleep=h;break;case"setSleepSpeedLimit":$i[n].sleepSpeedLimit=h;break;case"setSleepTimeLimit":$i[n].sleepTimeLimit=h;break;case"setCollisionFilterGroup":$i[n].collisionFilterGroup=h;break;case"setCollisionFilterMask":case"setCollisionFilterMask":$i[n].collisionFilterMask=h;break;case"setFixedRotation":$i[n].fixedRotation=h;break;case"applyForce":$i[n].applyForce(new i(...h[0]),new i(...h[1]));break;case"applyImpulse":$i[n].applyImpulse(new i(...h[0]),new i(...h[1]));break;case"applyLocalForce":$i[n].applyLocalForce(new i(...h[0]),new i(...h[1]));break;case"applyLocalImpulse":$i[n].applyLocalImpulse(new i(...h[0]),new i(...h[1]));break;case"addConstraint":{const[s,o,a]=h;let l,{pivotA:c,pivotB:u,axisA:d,axisB:p}=a,y=e(a,["pivotA","pivotB","axisA","axisB"]);switch(c=Array.isArray(c)?new i(...c):void 0,u=Array.isArray(u)?new i(...u):void 0,d=Array.isArray(d)?new i(...d):void 0,p=Array.isArray(p)?new i(...p):void 0,r){case"PointToPoint":l=new Ut($i[s],c,$i[o],u,a.maxForce);break;case"ConeTwist":l=new Qt($i[s],$i[o],t({pivotA:c,pivotB:u,axisA:d,axisB:p},y));break;case"Hinge":l=new ee($i[s],$i[o],t({pivotA:c,pivotB:u,axisA:d,axisB:p},y));break;case"Distance":l=new Jt($i[s],$i[o],a.distance,a.maxForce);break;case"Lock":l=new $t($i[s],$i[o],a);break;default:l=new Ft($i[s],$i[o],a)}l.uuid=n,so.addConstraint(l);break}case"removeConstraint":so.removeConstraint(n);break;case"enableConstraint":so.constraints.filter(({uuid:t})=>t===n).map(t=>t.enable());break;case"disableConstraint":so.constraints.filter(({uuid:t})=>t===n).map(t=>t.disable());break;case"addSpring":{const[t,e,s]=h;let{worldAnchorA:o,worldAnchorB:r,localAnchorA:a,localAnchorB:l,restLength:c,stiffness:u,damping:d}=s;o=Array.isArray(o)?new i(...o):void 0,r=Array.isArray(r)?new i(...r):void 0,a=Array.isArray(a)?new i(...a):void 0,l=Array.isArray(l)?new i(...l):void 0;let p=new he($i[t],$i[e],{worldAnchorA:o,worldAnchorB:r,localAnchorA:a,localAnchorB:l,restLength:c,stiffness:u,damping:d});p.uuid=n;let y=t=>p.applyForce();to[n]=y,so.addEventListener("postStep",to[n]);break}case"removeSpring":so.removeEventListener("postStep",to[n]);break;case"addRay":{const{from:s,to:o}=h,r=e(h,["from","to"]),a=new Y(s?new i(...s):void 0,o?new i(...o):void 0);r.mode=Y[r.mode.toUpperCase()],r.result=new X,eo[n]=()=>{a.intersectWorld(so,r);const i=r.result,{body:l,shape:h,rayFromWorld:c,rayToWorld:u,hitNormalWorld:d,hitPointWorld:p}=i,y=e(i,["body","shape","rayFromWorld","rayToWorld","hitNormalWorld","hitPointWorld"]);self.postMessage(t({op:"event",type:"rayhit",ray:{from:s,to:o,direction:a.direction.toArray(),collisionFilterGroup:a.collisionFilterGroup,collisionFilterMask:a.collisionFilterMask,uuid:n},body:l?l.uuid:null,shape:h?t({},h,{body:l.uuid}):null,rayFromWorld:c.toArray(),rayToWorld:u.toArray(),hitNormalWorld:d.toArray(),hitPointWorld:p.toArray()},y))},so.addEventListener("preStep",eo[n]);break}case"removeRay":so.removeEventListener("preStep",eo[n]),delete eo[n]}};

\",l=\"data:application/json;charset=utf-8;base64,{"version":3,"file":"worker.js","sources":["node_modules/cannon-es/dist/cannon-es.js","src/worker.js"],"sourcesContent":["/**\r\n * Records what objects are colliding with each other\r\n * @class ObjectCollisionMatrix\r\n * @constructor\r\n */\nclass ObjectCollisionMatrix {\n  // The matrix storage.\n  constructor() {\n    this.matrix = {};\n  }\n  /**\r\n   * @method get\r\n   * @param  {Body} i\r\n   * @param  {Body} j\r\n   * @return {boolean}\r\n   */\n\n\n  get(bi, bj) {\n    let {\n      id: i\n    } = bi;\n    let {\n      id: j\n    } = bj;\n\n    if (j > i) {\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n\n    return i + \"-\" + j in this.matrix;\n  }\n  /**\r\n   * @method set\r\n   * @param  {Body} i\r\n   * @param  {Body} j\r\n   * @param {boolean} value\r\n   */\n\n\n  set(bi, bj, value) {\n    let {\n      id: i\n    } = bi;\n    let {\n      id: j\n    } = bj;\n\n    if (j > i) {\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n\n    if (value) {\n      this.matrix[i + \"-\" + j] = true;\n    } else {\n      delete this.matrix[i + \"-\" + j];\n    }\n  }\n  /**\r\n   * Empty the matrix\r\n   * @method reset\r\n   */\n\n\n  reset() {\n    this.matrix = {};\n  }\n  /**\r\n   * Set max number of objects\r\n   * @method setNumObjects\r\n   * @param {Number} n\r\n   */\n\n\n  setNumObjects(n) {}\n\n}\n\n/**\r\n * A 3x3 matrix.\r\n * @class Mat3\r\n * @constructor\r\n * @param {Array} elements A vector of length 9, containing all matrix elements. Optional.\r\n * @author schteppe / http://github.com/schteppe\r\n */\nclass Mat3 {\n  constructor(elements = [0, 0, 0, 0, 0, 0, 0, 0, 0]) {\n    this.elements = elements;\n  }\n  /**\r\n   * Sets the matrix to identity\r\n   * @method identity\r\n   * @todo Should perhaps be renamed to setIdentity() to be more clear.\r\n   * @todo Create another function that immediately creates an identity matrix eg. eye()\r\n   */\n\n\n  identity() {\n    const e = this.elements;\n    e[0] = 1;\n    e[1] = 0;\n    e[2] = 0;\n    e[3] = 0;\n    e[4] = 1;\n    e[5] = 0;\n    e[6] = 0;\n    e[7] = 0;\n    e[8] = 1;\n  }\n  /**\r\n   * Set all elements to zero\r\n   * @method setZero\r\n   */\n\n\n  setZero() {\n    const e = this.elements;\n    e[0] = 0;\n    e[1] = 0;\n    e[2] = 0;\n    e[3] = 0;\n    e[4] = 0;\n    e[5] = 0;\n    e[6] = 0;\n    e[7] = 0;\n    e[8] = 0;\n  }\n  /**\r\n   * Sets the matrix diagonal elements from a Vec3\r\n   * @method setTrace\r\n   * @param {Vec3} vec3\r\n   */\n\n\n  setTrace(vector) {\n    const e = this.elements;\n    e[0] = vector.x;\n    e[4] = vector.y;\n    e[8] = vector.z;\n  }\n  /**\r\n   * Gets the matrix diagonal elements\r\n   * @method getTrace\r\n   * @return {Vec3}\r\n   */\n\n\n  getTrace(target = new Vec3()) {\n    const e = this.elements;\n    target.x = e[0];\n    target.y = e[4];\n    target.z = e[8];\n  }\n  /**\r\n   * Matrix-Vector multiplication\r\n   * @method vmult\r\n   * @param {Vec3} v The vector to multiply with\r\n   * @param {Vec3} target Optional, target to save the result in.\r\n   */\n\n\n  vmult(v, target = new Vec3()) {\n    const e = this.elements;\n    const x = v.x;\n    const y = v.y;\n    const z = v.z;\n    target.x = e[0] * x + e[1] * y + e[2] * z;\n    target.y = e[3] * x + e[4] * y + e[5] * z;\n    target.z = e[6] * x + e[7] * y + e[8] * z;\n    return target;\n  }\n  /**\r\n   * Matrix-scalar multiplication\r\n   * @method smult\r\n   * @param {Number} s\r\n   */\n\n\n  smult(s) {\n    for (let i = 0; i < this.elements.length; i++) {\n      this.elements[i] *= s;\n    }\n  }\n  /**\r\n   * Matrix multiplication\r\n   * @method mmult\r\n   * @param {Mat3} matrix Matrix to multiply with from left side.\r\n   * @return {Mat3} The result.\r\n   */\n\n\n  mmult(matrix, target = new Mat3()) {\n    const {\n      elements\n    } = matrix;\n\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        let sum = 0.0;\n\n        for (let k = 0; k < 3; k++) {\n          sum += elements[i + k * 3] * this.elements[k + j * 3];\n        }\n\n        target.elements[i + j * 3] = sum;\n      }\n    }\n\n    return target;\n  }\n  /**\r\n   * Scale each column of the matrix\r\n   * @method scale\r\n   * @param {Vec3} v\r\n   * @return {Mat3} The result.\r\n   */\n\n\n  scale(vector, target = new Mat3()) {\n    const e = this.elements;\n    const t = target.elements;\n\n    for (let i = 0; i !== 3; i++) {\n      t[3 * i + 0] = vector.x * e[3 * i + 0];\n      t[3 * i + 1] = vector.y * e[3 * i + 1];\n      t[3 * i + 2] = vector.z * e[3 * i + 2];\n    }\n\n    return target;\n  }\n  /**\r\n   * Solve Ax=b\r\n   * @method solve\r\n   * @param {Vec3} b The right hand side\r\n   * @param {Vec3} target Optional. Target vector to save in.\r\n   * @return {Vec3} The solution x\r\n   * @todo should reuse arrays\r\n   */\n\n\n  solve(b, target = new Vec3()) {\n    // Construct equations\n    const nr = 3; // num rows\n\n    const nc = 4; // num cols\n\n    const eqns = [];\n    let i;\n    let j;\n\n    for (i = 0; i < nr * nc; i++) {\n      eqns.push(0);\n    }\n\n    for (i = 0; i < 3; i++) {\n      for (j = 0; j < 3; j++) {\n        eqns[i + nc * j] = this.elements[i + 3 * j];\n      }\n    }\n\n    eqns[3 + 4 * 0] = b.x;\n    eqns[3 + 4 * 1] = b.y;\n    eqns[3 + 4 * 2] = b.z; // Compute right upper triangular version of the matrix - Gauss elimination\n\n    let n = 3;\n    const k = n;\n    let np;\n    const kp = 4; // num rows\n\n    let p;\n\n    do {\n      i = k - n;\n\n      if (eqns[i + nc * i] === 0) {\n        // the pivot is null, swap lines\n        for (j = i + 1; j < k; j++) {\n          if (eqns[i + nc * j] !== 0) {\n            np = kp;\n\n            do {\n              // do ligne( i ) = ligne( i ) + ligne( k )\n              p = kp - np;\n              eqns[p + nc * i] += eqns[p + nc * j];\n            } while (--np);\n\n            break;\n          }\n        }\n      }\n\n      if (eqns[i + nc * i] !== 0) {\n        for (j = i + 1; j < k; j++) {\n          const multiplier = eqns[i + nc * j] / eqns[i + nc * i];\n          np = kp;\n\n          do {\n            // do ligne( k ) = ligne( k ) - multiplier * ligne( i )\n            p = kp - np;\n            eqns[p + nc * j] = p <= i ? 0 : eqns[p + nc * j] - eqns[p + nc * i] * multiplier;\n          } while (--np);\n        }\n      }\n    } while (--n); // Get the solution\n\n\n    target.z = eqns[2 * nc + 3] / eqns[2 * nc + 2];\n    target.y = (eqns[1 * nc + 3] - eqns[1 * nc + 2] * target.z) / eqns[1 * nc + 1];\n    target.x = (eqns[0 * nc + 3] - eqns[0 * nc + 2] * target.z - eqns[0 * nc + 1] * target.y) / eqns[0 * nc + 0];\n\n    if (isNaN(target.x) || isNaN(target.y) || isNaN(target.z) || target.x === Infinity || target.y === Infinity || target.z === Infinity) {\n      throw \"Could not solve equation! Got x=[\" + target.toString() + \"], b=[\" + b.toString() + \"], A=[\" + this.toString() + \"]\";\n    }\n\n    return target;\n  }\n  /**\r\n   * Get an element in the matrix by index. Index starts at 0, not 1!!!\r\n   * @method e\r\n   * @param {Number} row\r\n   * @param {Number} column\r\n   * @param {Number} value Optional. If provided, the matrix element will be set to this value.\r\n   * @return {Number}\r\n   */\n\n\n  e(row, column, value) {\n    if (value === undefined) {\n      return this.elements[column + 3 * row];\n    } else {\n      // Set value\n      this.elements[column + 3 * row] = value;\n    }\n  }\n  /**\r\n   * Copy another matrix into this matrix object.\r\n   * @method copy\r\n   * @param {Mat3} source\r\n   * @return {Mat3} this\r\n   */\n\n\n  copy(matrix) {\n    for (let i = 0; i < matrix.elements.length; i++) {\n      this.elements[i] = matrix.elements[i];\n    }\n\n    return this;\n  }\n  /**\r\n   * Returns a string representation of the matrix.\r\n   * @method toString\r\n   * @return string\r\n   */\n\n\n  toString() {\n    let r = '';\n    const sep = ',';\n\n    for (let i = 0; i < 9; i++) {\n      r += this.elements[i] + sep;\n    }\n\n    return r;\n  }\n  /**\r\n   * reverse the matrix\r\n   * @method reverse\r\n   * @param {Mat3} target Optional. Target matrix to save in.\r\n   * @return {Mat3} The solution x\r\n   */\n\n\n  reverse(target = new Mat3()) {\n    // Construct equations\n    const nr = 3; // num rows\n\n    const nc = 6; // num cols\n\n    const eqns = [];\n    let i;\n    let j;\n\n    for (i = 0; i < nr * nc; i++) {\n      eqns.push(0);\n    }\n\n    for (i = 0; i < 3; i++) {\n      for (j = 0; j < 3; j++) {\n        eqns[i + nc * j] = this.elements[i + 3 * j];\n      }\n    }\n\n    eqns[3 + 6 * 0] = 1;\n    eqns[3 + 6 * 1] = 0;\n    eqns[3 + 6 * 2] = 0;\n    eqns[4 + 6 * 0] = 0;\n    eqns[4 + 6 * 1] = 1;\n    eqns[4 + 6 * 2] = 0;\n    eqns[5 + 6 * 0] = 0;\n    eqns[5 + 6 * 1] = 0;\n    eqns[5 + 6 * 2] = 1; // Compute right upper triangular version of the matrix - Gauss elimination\n\n    let n = 3;\n    const k = n;\n    let np;\n    const kp = nc; // num rows\n\n    let p;\n\n    do {\n      i = k - n;\n\n      if (eqns[i + nc * i] === 0) {\n        // the pivot is null, swap lines\n        for (j = i + 1; j < k; j++) {\n          if (eqns[i + nc * j] !== 0) {\n            np = kp;\n\n            do {\n              // do line( i ) = line( i ) + line( k )\n              p = kp - np;\n              eqns[p + nc * i] += eqns[p + nc * j];\n            } while (--np);\n\n            break;\n          }\n        }\n      }\n\n      if (eqns[i + nc * i] !== 0) {\n        for (j = i + 1; j < k; j++) {\n          const multiplier = eqns[i + nc * j] / eqns[i + nc * i];\n          np = kp;\n\n          do {\n            // do line( k ) = line( k ) - multiplier * line( i )\n            p = kp - np;\n            eqns[p + nc * j] = p <= i ? 0 : eqns[p + nc * j] - eqns[p + nc * i] * multiplier;\n          } while (--np);\n        }\n      }\n    } while (--n); // eliminate the upper left triangle of the matrix\n\n\n    i = 2;\n\n    do {\n      j = i - 1;\n\n      do {\n        const multiplier = eqns[i + nc * j] / eqns[i + nc * i];\n        np = nc;\n\n        do {\n          p = nc - np;\n          eqns[p + nc * j] = eqns[p + nc * j] - eqns[p + nc * i] * multiplier;\n        } while (--np);\n      } while (j--);\n    } while (--i); // operations on the diagonal\n\n\n    i = 2;\n\n    do {\n      const multiplier = 1 / eqns[i + nc * i];\n      np = nc;\n\n      do {\n        p = nc - np;\n        eqns[p + nc * i] = eqns[p + nc * i] * multiplier;\n      } while (--np);\n    } while (i--);\n\n    i = 2;\n\n    do {\n      j = 2;\n\n      do {\n        p = eqns[nr + j + nc * i];\n\n        if (isNaN(p) || p === Infinity) {\n          throw \"Could not reverse! A=[\" + this.toString() + \"]\";\n        }\n\n        target.e(i, j, p);\n      } while (j--);\n    } while (i--);\n\n    return target;\n  }\n  /**\r\n   * Set the matrix from a quaterion\r\n   * @method setRotationFromQuaternion\r\n   * @param {Quaternion} q\r\n   */\n\n\n  setRotationFromQuaternion(q) {\n    const x = q.x;\n    const y = q.y;\n    const z = q.z;\n    const w = q.w;\n    const x2 = x + x;\n    const y2 = y + y;\n    const z2 = z + z;\n    const xx = x * x2;\n    const xy = x * y2;\n    const xz = x * z2;\n    const yy = y * y2;\n    const yz = y * z2;\n    const zz = z * z2;\n    const wx = w * x2;\n    const wy = w * y2;\n    const wz = w * z2;\n    const e = this.elements;\n    e[3 * 0 + 0] = 1 - (yy + zz);\n    e[3 * 0 + 1] = xy - wz;\n    e[3 * 0 + 2] = xz + wy;\n    e[3 * 1 + 0] = xy + wz;\n    e[3 * 1 + 1] = 1 - (xx + zz);\n    e[3 * 1 + 2] = yz - wx;\n    e[3 * 2 + 0] = xz - wy;\n    e[3 * 2 + 1] = yz + wx;\n    e[3 * 2 + 2] = 1 - (xx + yy);\n    return this;\n  }\n  /**\r\n   * Transpose the matrix\r\n   * @method transpose\r\n   * @param  {Mat3} target Optional. Where to store the result.\r\n   * @return {Mat3} The target Mat3, or a new Mat3 if target was omitted.\r\n   */\n\n\n  transpose(target = new Mat3()) {\n    const Mt = target.elements;\n    const M = this.elements;\n\n    for (let i = 0; i !== 3; i++) {\n      for (let j = 0; j !== 3; j++) {\n        Mt[3 * i + j] = M[3 * j + i];\n      }\n    }\n\n    return target;\n  }\n\n}\n\n/**\r\n * 3-dimensional vector\r\n * @class Vec3\r\n * @constructor\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @param {Number} z\r\n * @author schteppe\r\n * @example\r\n *     const v = new Vec3(1, 2, 3);\r\n *     console.log('x=' + v.x); // x=1\r\n */\n\nclass Vec3 {\n  constructor(x = 0.0, y = 0.0, z = 0.0) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n  /**\r\n   * Vector cross product\r\n   * @method cross\r\n   * @param {Vec3} v\r\n   * @param {Vec3} target Optional. Target to save in.\r\n   * @return {Vec3}\r\n   */\n\n\n  cross(vector, target = new Vec3()) {\n    const vx = vector.x;\n    const vy = vector.y;\n    const vz = vector.z;\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    target.x = y * vz - z * vy;\n    target.y = z * vx - x * vz;\n    target.z = x * vy - y * vx;\n    return target;\n  }\n  /**\r\n   * Set the vectors' 3 elements\r\n   * @method set\r\n   * @param {Number} x\r\n   * @param {Number} y\r\n   * @param {Number} z\r\n   * @return Vec3\r\n   */\n\n\n  set(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    return this;\n  }\n  /**\r\n   * Set all components of the vector to zero.\r\n   * @method setZero\r\n   */\n\n\n  setZero() {\n    this.x = this.y = this.z = 0;\n  }\n  /**\r\n   * Vector addition\r\n   * @method vadd\r\n   * @param {Vec3} v\r\n   * @param {Vec3} target Optional.\r\n   * @return {Vec3}\r\n   */\n\n\n  vadd(vector, target) {\n    if (target) {\n      target.x = vector.x + this.x;\n      target.y = vector.y + this.y;\n      target.z = vector.z + this.z;\n    } else {\n      return new Vec3(this.x + vector.x, this.y + vector.y, this.z + vector.z);\n    }\n  }\n  /**\r\n   * Vector subtraction\r\n   * @method vsub\r\n   * @param {Vec3} v\r\n   * @param {Vec3} target Optional. Target to save in.\r\n   * @return {Vec3}\r\n   */\n\n\n  vsub(vector, target) {\n    if (target) {\n      target.x = this.x - vector.x;\n      target.y = this.y - vector.y;\n      target.z = this.z - vector.z;\n    } else {\n      return new Vec3(this.x - vector.x, this.y - vector.y, this.z - vector.z);\n    }\n  }\n  /**\r\n   * Get the cross product matrix a_cross from a vector, such that a x b = a_cross * b = c\r\n   * @method crossmat\r\n   * @see http://www8.cs.umu.se/kurser/TDBD24/VT06/lectures/Lecture6.pdf\r\n   * @return {Mat3}\r\n   */\n\n\n  crossmat() {\n    return new Mat3([0, -this.z, this.y, this.z, 0, -this.x, -this.y, this.x, 0]);\n  }\n  /**\r\n   * Normalize the vector. Note that this changes the values in the vector.\r\n   * @method normalize\r\n   * @return {Number} Returns the norm of the vector\r\n   */\n\n\n  normalize() {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const n = Math.sqrt(x * x + y * y + z * z);\n\n    if (n > 0.0) {\n      const invN = 1 / n;\n      this.x *= invN;\n      this.y *= invN;\n      this.z *= invN;\n    } else {\n      // Make something up\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n    }\n\n    return n;\n  }\n  /**\r\n   * Get the version of this vector that is of length 1.\r\n   * @method unit\r\n   * @param {Vec3} target Optional target to save in\r\n   * @return {Vec3} Returns the unit vector\r\n   */\n\n\n  unit(target = new Vec3()) {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    let ninv = Math.sqrt(x * x + y * y + z * z);\n\n    if (ninv > 0.0) {\n      ninv = 1.0 / ninv;\n      target.x = x * ninv;\n      target.y = y * ninv;\n      target.z = z * ninv;\n    } else {\n      target.x = 1;\n      target.y = 0;\n      target.z = 0;\n    }\n\n    return target;\n  }\n  /**\r\n   * Get the length of the vector\r\n   * @method length\r\n   * @return {Number}\r\n   */\n\n\n  length() {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    return Math.sqrt(x * x + y * y + z * z);\n  }\n  /**\r\n   * Get the squared length of the vector.\r\n   * @method lengthSquared\r\n   * @return {Number}\r\n   */\n\n\n  lengthSquared() {\n    return this.dot(this);\n  }\n  /**\r\n   * Get distance from this point to another point\r\n   * @method distanceTo\r\n   * @param  {Vec3} p\r\n   * @return {Number}\r\n   */\n\n\n  distanceTo(p) {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const px = p.x;\n    const py = p.y;\n    const pz = p.z;\n    return Math.sqrt((px - x) * (px - x) + (py - y) * (py - y) + (pz - z) * (pz - z));\n  }\n  /**\r\n   * Get squared distance from this point to another point\r\n   * @method distanceSquared\r\n   * @param  {Vec3} p\r\n   * @return {Number}\r\n   */\n\n\n  distanceSquared(p) {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const px = p.x;\n    const py = p.y;\n    const pz = p.z;\n    return (px - x) * (px - x) + (py - y) * (py - y) + (pz - z) * (pz - z);\n  }\n  /**\r\n   * Multiply all the components of the vector with a scalar.\r\n   * @method scale\r\n   * @param {Number} scalar\r\n   * @param {Vec3} target The vector to save the result in.\r\n   * @return {Vec3}\r\n   */\n\n\n  scale(scalar, target = new Vec3()) {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    target.x = scalar * x;\n    target.y = scalar * y;\n    target.z = scalar * z;\n    return target;\n  }\n  /**\r\n   * Multiply the vector with an other vector, component-wise.\r\n   * @method vmult\r\n   * @param {Number} vector\r\n   * @param {Vec3} target The vector to save the result in.\r\n   * @return {Vec3}\r\n   */\n\n\n  vmul(vector, target = new Vec3()) {\n    target.x = vector.x * this.x;\n    target.y = vector.y * this.y;\n    target.z = vector.z * this.z;\n    return target;\n  }\n  /**\r\n   * Scale a vector and add it to this vector. Save the result in \"target\". (target = this + vector * scalar)\r\n   * @method addScaledVector\r\n   * @param {Number} scalar\r\n   * @param {Vec3} vector\r\n   * @param {Vec3} target The vector to save the result in.\r\n   * @return {Vec3}\r\n   */\n\n\n  addScaledVector(scalar, vector, target = new Vec3()) {\n    target.x = this.x + scalar * vector.x;\n    target.y = this.y + scalar * vector.y;\n    target.z = this.z + scalar * vector.z;\n    return target;\n  }\n  /**\r\n   * Calculate dot product\r\n   * @method dot\r\n   * @param {Vec3} v\r\n   * @return {Number}\r\n   */\n\n\n  dot(vector) {\n    return this.x * vector.x + this.y * vector.y + this.z * vector.z;\n  }\n  /**\r\n   * @method isZero\r\n   * @return bool\r\n   */\n\n\n  isZero() {\n    return this.x === 0 && this.y === 0 && this.z === 0;\n  }\n  /**\r\n   * Make the vector point in the opposite direction.\r\n   * @method negate\r\n   * @param {Vec3} target Optional target to save in\r\n   * @return {Vec3}\r\n   */\n\n\n  negate(target = new Vec3()) {\n    target.x = -this.x;\n    target.y = -this.y;\n    target.z = -this.z;\n    return target;\n  }\n  /**\r\n   * Compute two artificial tangents to the vector\r\n   * @method tangents\r\n   * @param {Vec3} t1 Vector object to save the first tangent in\r\n   * @param {Vec3} t2 Vector object to save the second tangent in\r\n   */\n\n\n  tangents(t1, t2) {\n    const norm = this.length();\n\n    if (norm > 0.0) {\n      const n = Vec3_tangents_n;\n      const inorm = 1 / norm;\n      n.set(this.x * inorm, this.y * inorm, this.z * inorm);\n      const randVec = Vec3_tangents_randVec;\n\n      if (Math.abs(n.x) < 0.9) {\n        randVec.set(1, 0, 0);\n        n.cross(randVec, t1);\n      } else {\n        randVec.set(0, 1, 0);\n        n.cross(randVec, t1);\n      }\n\n      n.cross(t1, t2);\n    } else {\n      // The normal length is zero, make something up\n      t1.set(1, 0, 0);\n      t2.set(0, 1, 0);\n    }\n  }\n  /**\r\n   * Converts to a more readable format\r\n   * @method toString\r\n   * @return string\r\n   */\n\n\n  toString() {\n    return this.x + \",\" + this.y + \",\" + this.z;\n  }\n  /**\r\n   * Converts to an array\r\n   * @method toArray\r\n   * @return Array\r\n   */\n\n\n  toArray() {\n    return [this.x, this.y, this.z];\n  }\n  /**\r\n   * Copies value of source to this vector.\r\n   * @method copy\r\n   * @param {Vec3} source\r\n   * @return {Vec3} this\r\n   */\n\n\n  copy(vector) {\n    this.x = vector.x;\n    this.y = vector.y;\n    this.z = vector.z;\n    return this;\n  }\n  /**\r\n   * Do a linear interpolation between two vectors\r\n   * @method lerp\r\n   * @param {Vec3} v\r\n   * @param {Number} t A number between 0 and 1. 0 will make this function return u, and 1 will make it return v. Numbers in between will generate a vector in between them.\r\n   * @param {Vec3} target\r\n   */\n\n\n  lerp(vector, t, target) {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    target.x = x + (vector.x - x) * t;\n    target.y = y + (vector.y - y) * t;\n    target.z = z + (vector.z - z) * t;\n  }\n  /**\r\n   * Check if a vector equals is almost equal to another one.\r\n   * @method almostEquals\r\n   * @param {Vec3} v\r\n   * @param {Number} precision\r\n   * @return bool\r\n   */\n\n\n  almostEquals(vector, precision = 1e-6) {\n    if (Math.abs(this.x - vector.x) > precision || Math.abs(this.y - vector.y) > precision || Math.abs(this.z - vector.z) > precision) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\r\n   * Check if a vector is almost zero\r\n   * @method almostZero\r\n   * @param {Number} precision\r\n   */\n\n\n  almostZero(precision = 1e-6) {\n    if (Math.abs(this.x) > precision || Math.abs(this.y) > precision || Math.abs(this.z) > precision) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\r\n   * Check if the vector is anti-parallel to another vector.\r\n   * @method isAntiparallelTo\r\n   * @param  {Vec3}  v\r\n   * @param  {Number}  precision Set to zero for exact comparisons\r\n   * @return {Boolean}\r\n   */\n\n\n  isAntiparallelTo(vector, precision) {\n    this.negate(antip_neg);\n    return antip_neg.almostEquals(vector, precision);\n  }\n  /**\r\n   * Clone the vector\r\n   * @method clone\r\n   * @return {Vec3}\r\n   */\n\n\n  clone() {\n    return new Vec3(this.x, this.y, this.z);\n  }\n\n}\nVec3.ZERO = new Vec3(0, 0, 0);\nVec3.UNIT_X = new Vec3(1, 0, 0);\nVec3.UNIT_Y = new Vec3(0, 1, 0);\nVec3.UNIT_Z = new Vec3(0, 0, 1);\n/**\r\n * Compute two artificial tangents to the vector\r\n * @method tangents\r\n * @param {Vec3} t1 Vector object to save the first tangent in\r\n * @param {Vec3} t2 Vector object to save the second tangent in\r\n */\n\nconst Vec3_tangents_n = new Vec3();\nconst Vec3_tangents_randVec = new Vec3();\nconst antip_neg = new Vec3();\n\n/**\r\n * Axis aligned bounding box class.\r\n * @class AABB\r\n * @constructor\r\n * @param {Object} [options]\r\n * @param {Vec3}   [options.upperBound] The upper bound of the bounding box.\r\n * @param {Vec3}   [options.lowerBound] The lower bound of the bounding box\r\n */\nclass AABB {\n  // The lower bound of the bounding box\n  // The upper bound of the bounding box\n  constructor(options = {}) {\n    this.lowerBound = new Vec3();\n    this.upperBound = new Vec3();\n\n    if (options.lowerBound) {\n      this.lowerBound.copy(options.lowerBound);\n    }\n\n    if (options.upperBound) {\n      this.upperBound.copy(options.upperBound);\n    }\n  }\n  /**\r\n   * Set the AABB bounds from a set of points.\r\n   * @method setFromPoints\r\n   * @param {Array} points An array of Vec3's.\r\n   * @param {Vec3} position Optional.\r\n   * @param {Quaternion} quaternion Optional.\r\n   * @param {number} skinSize Optional.\r\n   * @return {AABB} The self object\r\n   */\n\n\n  setFromPoints(points, position, quaternion, skinSize) {\n    const l = this.lowerBound;\n    const u = this.upperBound;\n    const q = quaternion; // Set to the first point\n\n    l.copy(points[0]);\n\n    if (q) {\n      q.vmult(l, l);\n    }\n\n    u.copy(l);\n\n    for (let i = 1; i < points.length; i++) {\n      let p = points[i];\n\n      if (q) {\n        q.vmult(p, tmp);\n        p = tmp;\n      }\n\n      if (p.x > u.x) {\n        u.x = p.x;\n      }\n\n      if (p.x < l.x) {\n        l.x = p.x;\n      }\n\n      if (p.y > u.y) {\n        u.y = p.y;\n      }\n\n      if (p.y < l.y) {\n        l.y = p.y;\n      }\n\n      if (p.z > u.z) {\n        u.z = p.z;\n      }\n\n      if (p.z < l.z) {\n        l.z = p.z;\n      }\n    } // Add offset\n\n\n    if (position) {\n      position.vadd(l, l);\n      position.vadd(u, u);\n    }\n\n    if (skinSize) {\n      l.x -= skinSize;\n      l.y -= skinSize;\n      l.z -= skinSize;\n      u.x += skinSize;\n      u.y += skinSize;\n      u.z += skinSize;\n    }\n\n    return this;\n  }\n  /**\r\n   * Copy bounds from an AABB to this AABB\r\n   * @method copy\r\n   * @param  {AABB} aabb Source to copy from\r\n   * @return {AABB} The this object, for chainability\r\n   */\n\n\n  copy(aabb) {\n    this.lowerBound.copy(aabb.lowerBound);\n    this.upperBound.copy(aabb.upperBound);\n    return this;\n  }\n  /**\r\n   * Clone an AABB\r\n   * @method clone\r\n   */\n\n\n  clone() {\n    return new AABB().copy(this);\n  }\n  /**\r\n   * Extend this AABB so that it covers the given AABB too.\r\n   * @method extend\r\n   * @param  {AABB} aabb\r\n   */\n\n\n  extend(aabb) {\n    this.lowerBound.x = Math.min(this.lowerBound.x, aabb.lowerBound.x);\n    this.upperBound.x = Math.max(this.upperBound.x, aabb.upperBound.x);\n    this.lowerBound.y = Math.min(this.lowerBound.y, aabb.lowerBound.y);\n    this.upperBound.y = Math.max(this.upperBound.y, aabb.upperBound.y);\n    this.lowerBound.z = Math.min(this.lowerBound.z, aabb.lowerBound.z);\n    this.upperBound.z = Math.max(this.upperBound.z, aabb.upperBound.z);\n  }\n  /**\r\n   * Returns true if the given AABB overlaps this AABB.\r\n   * @method overlaps\r\n   * @param  {AABB} aabb\r\n   * @return {Boolean}\r\n   */\n\n\n  overlaps(aabb) {\n    const l1 = this.lowerBound;\n    const u1 = this.upperBound;\n    const l2 = aabb.lowerBound;\n    const u2 = aabb.upperBound; //      l2        u2\n    //      |---------|\n    // |--------|\n    // l1       u1\n\n    const overlapsX = l2.x <= u1.x && u1.x <= u2.x || l1.x <= u2.x && u2.x <= u1.x;\n    const overlapsY = l2.y <= u1.y && u1.y <= u2.y || l1.y <= u2.y && u2.y <= u1.y;\n    const overlapsZ = l2.z <= u1.z && u1.z <= u2.z || l1.z <= u2.z && u2.z <= u1.z;\n    return overlapsX && overlapsY && overlapsZ;\n  } // Mostly for debugging\n\n\n  volume() {\n    const l = this.lowerBound;\n    const u = this.upperBound;\n    return (u.x - l.x) * (u.y - l.y) * (u.z - l.z);\n  }\n  /**\r\n   * Returns true if the given AABB is fully contained in this AABB.\r\n   * @method contains\r\n   * @param {AABB} aabb\r\n   * @return {Boolean}\r\n   */\n\n\n  contains(aabb) {\n    const l1 = this.lowerBound;\n    const u1 = this.upperBound;\n    const l2 = aabb.lowerBound;\n    const u2 = aabb.upperBound; //      l2        u2\n    //      |---------|\n    // |---------------|\n    // l1              u1\n\n    return l1.x <= l2.x && u1.x >= u2.x && l1.y <= l2.y && u1.y >= u2.y && l1.z <= l2.z && u1.z >= u2.z;\n  }\n  /**\r\n   * @method getCorners\r\n   * @param {Vec3} a\r\n   * @param {Vec3} b\r\n   * @param {Vec3} c\r\n   * @param {Vec3} d\r\n   * @param {Vec3} e\r\n   * @param {Vec3} f\r\n   * @param {Vec3} g\r\n   * @param {Vec3} h\r\n   */\n\n\n  getCorners(a, b, c, d, e, f, g, h) {\n    const l = this.lowerBound;\n    const u = this.upperBound;\n    a.copy(l);\n    b.set(u.x, l.y, l.z);\n    c.set(u.x, u.y, l.z);\n    d.set(l.x, u.y, u.z);\n    e.set(u.x, l.y, u.z);\n    f.set(l.x, u.y, l.z);\n    g.set(l.x, l.y, u.z);\n    h.copy(u);\n  }\n  /**\r\n   * Get the representation of an AABB in another frame.\r\n   * @method toLocalFrame\r\n   * @param  {Transform} frame\r\n   * @param  {AABB} target\r\n   * @return {AABB} The \"target\" AABB object.\r\n   */\n\n\n  toLocalFrame(frame, target) {\n    const corners = transformIntoFrame_corners;\n    const a = corners[0];\n    const b = corners[1];\n    const c = corners[2];\n    const d = corners[3];\n    const e = corners[4];\n    const f = corners[5];\n    const g = corners[6];\n    const h = corners[7]; // Get corners in current frame\n\n    this.getCorners(a, b, c, d, e, f, g, h); // Transform them to new local frame\n\n    for (let i = 0; i !== 8; i++) {\n      const corner = corners[i];\n      frame.pointToLocal(corner, corner);\n    }\n\n    return target.setFromPoints(corners);\n  }\n  /**\r\n   * Get the representation of an AABB in the global frame.\r\n   * @method toWorldFrame\r\n   * @param  {Transform} frame\r\n   * @param  {AABB} target\r\n   * @return {AABB} The \"target\" AABB object.\r\n   */\n\n\n  toWorldFrame(frame, target) {\n    const corners = transformIntoFrame_corners;\n    const a = corners[0];\n    const b = corners[1];\n    const c = corners[2];\n    const d = corners[3];\n    const e = corners[4];\n    const f = corners[5];\n    const g = corners[6];\n    const h = corners[7]; // Get corners in current frame\n\n    this.getCorners(a, b, c, d, e, f, g, h); // Transform them to new local frame\n\n    for (let i = 0; i !== 8; i++) {\n      const corner = corners[i];\n      frame.pointToWorld(corner, corner);\n    }\n\n    return target.setFromPoints(corners);\n  }\n  /**\r\n   * Check if the AABB is hit by a ray.\r\n   * @param  {Ray} ray\r\n   * @return {Boolean}\r\n   */\n\n\n  overlapsRay(ray) {\n    const {\n      direction,\n      from\n    } = ray;\n\n    const dirFracX = 1 / direction.x;\n    const dirFracY = 1 / direction.y;\n    const dirFracZ = 1 / direction.z; // this.lowerBound is the corner of AABB with minimal coordinates - left bottom, rt is maximal corner\n\n    const t1 = (this.lowerBound.x - from.x) * dirFracX;\n    const t2 = (this.upperBound.x - from.x) * dirFracX;\n    const t3 = (this.lowerBound.y - from.y) * dirFracY;\n    const t4 = (this.upperBound.y - from.y) * dirFracY;\n    const t5 = (this.lowerBound.z - from.z) * dirFracZ;\n    const t6 = (this.upperBound.z - from.z) * dirFracZ; // const tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)));\n    // const tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)));\n\n    const tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)), Math.min(t5, t6));\n    const tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)), Math.max(t5, t6)); // if tmax < 0, ray (line) is intersecting AABB, but whole AABB is behing us\n\n    if (tmax < 0) {\n      //t = tmax;\n      return false;\n    } // if tmin > tmax, ray doesn't intersect AABB\n\n\n    if (tmin > tmax) {\n      //t = tmax;\n      return false;\n    }\n\n    return true;\n  }\n\n}\nconst tmp = new Vec3();\nconst transformIntoFrame_corners = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\n\n/**\r\n * Collision \"matrix\". It's actually a triangular-shaped array of whether two bodies are touching this step, for reference next step\r\n * @class ArrayCollisionMatrix\r\n * @constructor\r\n */\nclass ArrayCollisionMatrix {\n  // The matrix storage.\n  constructor() {\n    this.matrix = [];\n  }\n  /**\r\n   * Get an element\r\n   * @method get\r\n   * @param  {Body} i\r\n   * @param  {Body} j\r\n   * @return {Number}\r\n   */\n\n\n  get(bi, bj) {\n    let {\n      index: i\n    } = bi;\n    let {\n      index: j\n    } = bj;\n\n    if (j > i) {\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n\n    return this.matrix[(i * (i + 1) >> 1) + j - 1];\n  }\n  /**\r\n   * Set an element\r\n   * @method set\r\n   * @param {Body} i\r\n   * @param {Body} j\r\n   * @param {boolean} value\r\n   */\n\n\n  set(bi, bj, value) {\n    let {\n      index: i\n    } = bi;\n    let {\n      index: j\n    } = bj;\n\n    if (j > i) {\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n\n    this.matrix[(i * (i + 1) >> 1) + j - 1] = value ? 1 : 0;\n  }\n  /**\r\n   * Sets all elements to zero\r\n   * @method reset\r\n   */\n\n\n  reset() {\n    for (let i = 0, l = this.matrix.length; i !== l; i++) {\n      this.matrix[i] = 0;\n    }\n  }\n  /**\r\n   * Sets the max number of objects\r\n   * @method setNumObjects\r\n   * @param {Number} n\r\n   */\n\n\n  setNumObjects(n) {\n    this.matrix.length = n * (n - 1) >> 1;\n  }\n\n}\n\n/**\r\n * Base class for objects that dispatches events.\r\n * @class EventTarget\r\n * @constructor\r\n */\nclass EventTarget {\n  constructor() {}\n  /**\r\n   * Add an event listener\r\n   * @method addEventListener\r\n   * @param  {String} type\r\n   * @param  {Function} listener\r\n   * @return {EventTarget} The self object, for chainability.\r\n   */\n\n\n  addEventListener(type, listener) {\n    if (this._listeners === undefined) {\n      this._listeners = {};\n    }\n\n    const listeners = this._listeners;\n\n    if (listeners[type] === undefined) {\n      listeners[type] = [];\n    }\n\n    if (!listeners[type].includes(listener)) {\n      listeners[type].push(listener);\n    }\n\n    return this;\n  }\n  /**\r\n   * Check if an event listener is added\r\n   * @method hasEventListener\r\n   * @param  {String} type\r\n   * @param  {Function} listener\r\n   * @return {Boolean}\r\n   */\n\n\n  hasEventListener(type, listener) {\n    if (this._listeners === undefined) {\n      return false;\n    }\n\n    const listeners = this._listeners;\n\n    if (listeners[type] !== undefined && listeners[type].includes(listener)) {\n      return true;\n    }\n\n    return false;\n  }\n  /**\r\n   * Check if any event listener of the given type is added\r\n   * @method hasAnyEventListener\r\n   * @param  {String} type\r\n   * @return {Boolean}\r\n   */\n\n\n  hasAnyEventListener(type) {\n    if (this._listeners === undefined) {\n      return false;\n    }\n\n    const listeners = this._listeners;\n    return listeners[type] !== undefined;\n  }\n  /**\r\n   * Remove an event listener\r\n   * @method removeEventListener\r\n   * @param  {String} type\r\n   * @param  {Function} listener\r\n   * @return {EventTarget} The self object, for chainability.\r\n   */\n\n\n  removeEventListener(type, listener) {\n    if (this._listeners === undefined) {\n      return this;\n    }\n\n    const listeners = this._listeners;\n\n    if (listeners[type] === undefined) {\n      return this;\n    }\n\n    const index = listeners[type].indexOf(listener);\n\n    if (index !== -1) {\n      listeners[type].splice(index, 1);\n    }\n\n    return this;\n  }\n  /**\r\n   * Emit an event.\r\n   * @method dispatchEvent\r\n   * @param  {Object} event\r\n   * @param  {String} event.type\r\n   * @return {EventTarget} The self object, for chainability.\r\n   */\n\n\n  dispatchEvent(event) {\n    if (this._listeners === undefined) {\n      return this;\n    }\n\n    const listeners = this._listeners;\n    const listenerArray = listeners[event.type];\n\n    if (listenerArray !== undefined) {\n      event.target = this;\n\n      for (let i = 0, l = listenerArray.length; i < l; i++) {\n        listenerArray[i].call(this, event);\n      }\n    }\n\n    return this;\n  }\n\n}\n\n/**\n * A Quaternion describes a rotation in 3D space. The Quaternion is mathematically defined as Q = x*i + y*j + z*k + w, where (i,j,k) are imaginary basis vectors. (x,y,z) can be seen as a vector related to the axis of rotation, while the real multiplier, w, is related to the amount of rotation.\n * @param {Number} x Multiplier of the imaginary basis vector i.\n * @param {Number} y Multiplier of the imaginary basis vector j.\n * @param {Number} z Multiplier of the imaginary basis vector k.\n * @param {Number} w Multiplier of the real part.\n * @see http://en.wikipedia.org/wiki/Quaternion\n */\n\nclass Quaternion {\n  constructor(x = 0, y = 0, z = 0, w = 1) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n  }\n  /**\n   * Set the value of the quaternion.\n   */\n\n\n  set(x, y, z, w) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n    return this;\n  }\n  /**\n   * Convert to a readable format\n   * @return {String} \"x,y,z,w\"\n   */\n\n\n  toString() {\n    return this.x + \",\" + this.y + \",\" + this.z + \",\" + this.w;\n  }\n  /**\n   * Convert to an Array\n   * @return {Array} [x, y, z, w]\n   */\n\n\n  toArray() {\n    return [this.x, this.y, this.z, this.w];\n  }\n  /**\n   * Set the quaternion components given an axis and an angle in radians.\n   */\n\n\n  setFromAxisAngle(vector, angle) {\n    const s = Math.sin(angle * 0.5);\n    this.x = vector.x * s;\n    this.y = vector.y * s;\n    this.z = vector.z * s;\n    this.w = Math.cos(angle * 0.5);\n    return this;\n  }\n  /**\n   * Converts the quaternion to [ axis, angle ] representation.\n   * @param {Vec3} [targetAxis] A vector object to reuse for storing the axis.\n   * @return {Array} An array, first element is the axis and the second is the angle in radians.\n   */\n\n\n  toAxisAngle(targetAxis = new Vec3()) {\n    this.normalize(); // if w>1 acos and sqrt will produce errors, this cant happen if quaternion is normalised\n\n    const angle = 2 * Math.acos(this.w);\n    const s = Math.sqrt(1 - this.w * this.w); // assuming quaternion normalised then w is less than 1, so term always positive.\n\n    if (s < 0.001) {\n      // test to avoid divide by zero, s is always positive due to sqrt\n      // if s close to zero then direction of axis not important\n      targetAxis.x = this.x; // if it is important that axis is normalised then replace with x=1; y=z=0;\n\n      targetAxis.y = this.y;\n      targetAxis.z = this.z;\n    } else {\n      targetAxis.x = this.x / s; // normalise axis\n\n      targetAxis.y = this.y / s;\n      targetAxis.z = this.z / s;\n    }\n\n    return [targetAxis, angle];\n  }\n  /**\n   * Set the quaternion value given two vectors. The resulting rotation will be the needed rotation to rotate u to v.\n   */\n\n\n  setFromVectors(u, v) {\n    if (u.isAntiparallelTo(v)) {\n      const t1 = sfv_t1;\n      const t2 = sfv_t2;\n      u.tangents(t1, t2);\n      this.setFromAxisAngle(t1, Math.PI);\n    } else {\n      const a = u.cross(v);\n      this.x = a.x;\n      this.y = a.y;\n      this.z = a.z;\n      this.w = Math.sqrt(u.length() ** 2 * v.length() ** 2) + u.dot(v);\n      this.normalize();\n    }\n\n    return this;\n  }\n  /**\n   * Multiply the quaternion with an other quaternion.\n   */\n\n\n  mult(quat, target = new Quaternion()) {\n    const ax = this.x;\n    const ay = this.y;\n    const az = this.z;\n    const aw = this.w;\n    const bx = quat.x;\n    const by = quat.y;\n    const bz = quat.z;\n    const bw = quat.w;\n    target.x = ax * bw + aw * bx + ay * bz - az * by;\n    target.y = ay * bw + aw * by + az * bx - ax * bz;\n    target.z = az * bw + aw * bz + ax * by - ay * bx;\n    target.w = aw * bw - ax * bx - ay * by - az * bz;\n    return target;\n  }\n  /**\n   * Get the inverse quaternion rotation.\n   */\n\n\n  inverse(target = new Quaternion()) {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const w = this.w;\n    this.conjugate(target);\n    const inorm2 = 1 / (x * x + y * y + z * z + w * w);\n    target.x *= inorm2;\n    target.y *= inorm2;\n    target.z *= inorm2;\n    target.w *= inorm2;\n    return target;\n  }\n  /**\n   * Get the quaternion conjugate\n   */\n\n\n  conjugate(target = new Quaternion()) {\n    target.x = -this.x;\n    target.y = -this.y;\n    target.z = -this.z;\n    target.w = this.w;\n    return target;\n  }\n  /**\n   * Normalize the quaternion. Note that this changes the values of the quaternion.\n   * @method normalize\n   */\n\n\n  normalize() {\n    let l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n\n    if (l === 0) {\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n      this.w = 0;\n    } else {\n      l = 1 / l;\n      this.x *= l;\n      this.y *= l;\n      this.z *= l;\n      this.w *= l;\n    }\n\n    return this;\n  }\n  /**\n   * Approximation of quaternion normalization. Works best when quat is already almost-normalized.\n   * @see http://jsperf.com/fast-quaternion-normalization\n   * @author unphased, https://github.com/unphased\n   */\n\n\n  normalizeFast() {\n    const f = (3.0 - (this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w)) / 2.0;\n\n    if (f === 0) {\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n      this.w = 0;\n    } else {\n      this.x *= f;\n      this.y *= f;\n      this.z *= f;\n      this.w *= f;\n    }\n\n    return this;\n  }\n  /**\n   * Multiply the quaternion by a vector\n   */\n\n\n  vmult(v, target = new Vec3()) {\n    const x = v.x;\n    const y = v.y;\n    const z = v.z;\n    const qx = this.x;\n    const qy = this.y;\n    const qz = this.z;\n    const qw = this.w; // q*v\n\n    const ix = qw * x + qy * z - qz * y;\n    const iy = qw * y + qz * x - qx * z;\n    const iz = qw * z + qx * y - qy * x;\n    const iw = -qx * x - qy * y - qz * z;\n    target.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    target.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    target.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    return target;\n  }\n  /**\n   * Copies value of source to this quaternion.\n   * @method copy\n   * @param {Quaternion} source\n   * @return {Quaternion} this\n   */\n\n\n  copy(quat) {\n    this.x = quat.x;\n    this.y = quat.y;\n    this.z = quat.z;\n    this.w = quat.w;\n    return this;\n  }\n  /**\n   * Convert the quaternion to euler angle representation. Order: YZX, as this page describes: http://www.euclideanspace.com/maths/standards/index.htm\n   * @method toEuler\n   * @param {Vec3} target\n   * @param {String} order Three-character string, defaults to \"YZX\"\n   */\n\n\n  toEuler(target, order = 'YZX') {\n    let heading;\n    let attitude;\n    let bank;\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const w = this.w;\n\n    switch (order) {\n      case 'YZX':\n        const test = x * y + z * w;\n\n        if (test > 0.499) {\n          // singularity at north pole\n          heading = 2 * Math.atan2(x, w);\n          attitude = Math.PI / 2;\n          bank = 0;\n        }\n\n        if (test < -0.499) {\n          // singularity at south pole\n          heading = -2 * Math.atan2(x, w);\n          attitude = -Math.PI / 2;\n          bank = 0;\n        }\n\n        if (heading === undefined) {\n          const sqx = x * x;\n          const sqy = y * y;\n          const sqz = z * z;\n          heading = Math.atan2(2 * y * w - 2 * x * z, 1 - 2 * sqy - 2 * sqz); // Heading\n\n          attitude = Math.asin(2 * test); // attitude\n\n          bank = Math.atan2(2 * x * w - 2 * y * z, 1 - 2 * sqx - 2 * sqz); // bank\n        }\n\n        break;\n\n      default:\n        throw new Error(\"Euler order \" + order + \" not supported yet.\");\n    }\n\n    target.y = heading;\n    target.z = attitude;\n    target.x = bank;\n  }\n  /**\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Number} z\n   * @param {String} order The order to apply angles: 'XYZ' or 'YXZ' or any other combination\n   * @see http://www.mathworks.com/matlabcentral/fileexchange/20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/content/SpinCalc.m\n   */\n\n\n  setFromEuler(x, y, z, order = 'XYZ') {\n    const c1 = Math.cos(x / 2);\n    const c2 = Math.cos(y / 2);\n    const c3 = Math.cos(z / 2);\n    const s1 = Math.sin(x / 2);\n    const s2 = Math.sin(y / 2);\n    const s3 = Math.sin(z / 2);\n\n    if (order === 'XYZ') {\n      this.x = s1 * c2 * c3 + c1 * s2 * s3;\n      this.y = c1 * s2 * c3 - s1 * c2 * s3;\n      this.z = c1 * c2 * s3 + s1 * s2 * c3;\n      this.w = c1 * c2 * c3 - s1 * s2 * s3;\n    } else if (order === 'YXZ') {\n      this.x = s1 * c2 * c3 + c1 * s2 * s3;\n      this.y = c1 * s2 * c3 - s1 * c2 * s3;\n      this.z = c1 * c2 * s3 - s1 * s2 * c3;\n      this.w = c1 * c2 * c3 + s1 * s2 * s3;\n    } else if (order === 'ZXY') {\n      this.x = s1 * c2 * c3 - c1 * s2 * s3;\n      this.y = c1 * s2 * c3 + s1 * c2 * s3;\n      this.z = c1 * c2 * s3 + s1 * s2 * c3;\n      this.w = c1 * c2 * c3 - s1 * s2 * s3;\n    } else if (order === 'ZYX') {\n      this.x = s1 * c2 * c3 - c1 * s2 * s3;\n      this.y = c1 * s2 * c3 + s1 * c2 * s3;\n      this.z = c1 * c2 * s3 - s1 * s2 * c3;\n      this.w = c1 * c2 * c3 + s1 * s2 * s3;\n    } else if (order === 'YZX') {\n      this.x = s1 * c2 * c3 + c1 * s2 * s3;\n      this.y = c1 * s2 * c3 + s1 * c2 * s3;\n      this.z = c1 * c2 * s3 - s1 * s2 * c3;\n      this.w = c1 * c2 * c3 - s1 * s2 * s3;\n    } else if (order === 'XZY') {\n      this.x = s1 * c2 * c3 - c1 * s2 * s3;\n      this.y = c1 * s2 * c3 - s1 * c2 * s3;\n      this.z = c1 * c2 * s3 + s1 * s2 * c3;\n      this.w = c1 * c2 * c3 + s1 * s2 * s3;\n    }\n\n    return this;\n  }\n  /**\n   * @method clone\n   * @return {Quaternion}\n   */\n\n\n  clone() {\n    return new Quaternion(this.x, this.y, this.z, this.w);\n  }\n  /**\n   * Performs a spherical linear interpolation between two quat\n   *\n   * @param {Quaternion} toQuat second operand\n   * @param {Number} t interpolation amount between the self quaternion and toQuat\n   * @param {Quaternion} [target] A quaternion to store the result in. If not provided, a new one will be created.\n   * @returns {Quaternion} The \"target\" object\n   */\n\n\n  slerp(toQuat, t, target = new Quaternion()) {\n    const ax = this.x;\n    const ay = this.y;\n    const az = this.z;\n    const aw = this.w;\n    let bx = toQuat.x;\n    let by = toQuat.y;\n    let bz = toQuat.z;\n    let bw = toQuat.w;\n    let omega;\n    let cosom;\n    let sinom;\n    let scale0;\n    let scale1; // calc cosine\n\n    cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n    if (cosom < 0.0) {\n      cosom = -cosom;\n      bx = -bx;\n      by = -by;\n      bz = -bz;\n      bw = -bw;\n    } // calculate coefficients\n\n\n    if (1.0 - cosom > 0.000001) {\n      // standard case (slerp)\n      omega = Math.acos(cosom);\n      sinom = Math.sin(omega);\n      scale0 = Math.sin((1.0 - t) * omega) / sinom;\n      scale1 = Math.sin(t * omega) / sinom;\n    } else {\n      // \"from\" and \"to\" quaternions are very close\n      //  ... so we can do a linear interpolation\n      scale0 = 1.0 - t;\n      scale1 = t;\n    } // calculate final values\n\n\n    target.x = scale0 * ax + scale1 * bx;\n    target.y = scale0 * ay + scale1 * by;\n    target.z = scale0 * az + scale1 * bz;\n    target.w = scale0 * aw + scale1 * bw;\n    return target;\n  }\n  /**\n   * Rotate an absolute orientation quaternion given an angular velocity and a time step.\n   */\n\n\n  integrate(angularVelocity, dt, angularFactor, target = new Quaternion()) {\n    const ax = angularVelocity.x * angularFactor.x,\n          ay = angularVelocity.y * angularFactor.y,\n          az = angularVelocity.z * angularFactor.z,\n          bx = this.x,\n          by = this.y,\n          bz = this.z,\n          bw = this.w;\n    const half_dt = dt * 0.5;\n    target.x += half_dt * (ax * bw + ay * bz - az * by);\n    target.y += half_dt * (ay * bw + az * bx - ax * bz);\n    target.z += half_dt * (az * bw + ax * by - ay * bx);\n    target.w += half_dt * (-ax * bx - ay * by - az * bz);\n    return target;\n  }\n\n}\nconst sfv_t1 = new Vec3();\nconst sfv_t2 = new Vec3();\n\nconst SHAPE_TYPES = {\n  SPHERE: 1,\n  PLANE: 2,\n  BOX: 4,\n  COMPOUND: 8,\n  CONVEXPOLYHEDRON: 16,\n  HEIGHTFIELD: 32,\n  PARTICLE: 64,\n  CYLINDER: 128,\n  TRIMESH: 256\n};\n\n/**\n * Base class for shapes\n * @class Shape\n * @constructor\n * @param {object} [options]\n * @param {number} [options.collisionFilterGroup=1]\n * @param {number} [options.collisionFilterMask=-1]\n * @param {number} [options.collisionResponse=true]\n * @param {number} [options.material=null]\n * @author schteppe\n */\nclass Shape {\n  // Identifyer of the Shape.\n  // The type of this shape. Must be set to an int > 0 by subclasses.\n  // The local bounding sphere radius of this shape.\n  // Whether to produce contact forces when in contact with other bodies. Note that contacts will be generated, but they will be disabled.\n  constructor(options = {}) {\n    this.id = Shape.idCounter++;\n    this.type = options.type || 0;\n    this.boundingSphereRadius = 0;\n    this.collisionResponse = options.collisionResponse ? options.collisionResponse : true;\n    this.collisionFilterGroup = options.collisionFilterGroup !== undefined ? options.collisionFilterGroup : 1;\n    this.collisionFilterMask = options.collisionFilterMask !== undefined ? options.collisionFilterMask : -1;\n    this.material = options.material ? options.material : null;\n    this.body = null;\n  }\n  /**\n   * Computes the bounding sphere radius. The result is stored in the property .boundingSphereRadius\n   * @method updateBoundingSphereRadius\n   */\n\n\n  updateBoundingSphereRadius() {\n    throw \"computeBoundingSphereRadius() not implemented for shape type \" + this.type;\n  }\n  /**\n   * Get the volume of this shape\n   * @method volume\n   * @return {Number}\n   */\n\n\n  volume() {\n    throw \"volume() not implemented for shape type \" + this.type;\n  }\n  /**\n   * Calculates the inertia in the local frame for this shape.\n   * @method calculateLocalInertia\n   * @param {Number} mass\n   * @param {Vec3} target\n   * @see http://en.wikipedia.org/wiki/List_of_moments_of_inertia\n   */\n\n\n  calculateLocalInertia(mass, target) {\n    throw \"calculateLocalInertia() not implemented for shape type \" + this.type;\n  }\n\n  calculateWorldAABB(pos, quat, min, max) {\n    throw \"calculateWorldAABB() not implemented for shape type \" + this.type;\n  }\n\n}\nShape.idCounter = 0;\n/**\n * The available shape types.\n * @static\n * @property types\n * @type {Object}\n */\n\nShape.types = SHAPE_TYPES;\n\nclass Transform {\n  constructor(options = {}) {\n    this.position = new Vec3();\n    this.quaternion = new Quaternion();\n\n    if (options.position) {\n      this.position.copy(options.position);\n    }\n\n    if (options.quaternion) {\n      this.quaternion.copy(options.quaternion);\n    }\n  }\n  /**\r\n   * Get a global point in local transform coordinates.\r\n   */\n\n\n  pointToLocal(worldPoint, result) {\n    return Transform.pointToLocalFrame(this.position, this.quaternion, worldPoint, result);\n  }\n  /**\r\n   * Get a local point in global transform coordinates.\r\n   */\n\n\n  pointToWorld(localPoint, result) {\n    return Transform.pointToWorldFrame(this.position, this.quaternion, localPoint, result);\n  }\n\n  vectorToWorldFrame(localVector, result = new Vec3()) {\n    this.quaternion.vmult(localVector, result);\n    return result;\n  }\n\n  static pointToLocalFrame(position, quaternion, worldPoint, result = new Vec3()) {\n    worldPoint.vsub(position, result);\n    quaternion.conjugate(tmpQuat);\n    tmpQuat.vmult(result, result);\n    return result;\n  }\n\n  static pointToWorldFrame(position, quaternion, localPoint, result = new Vec3()) {\n    quaternion.vmult(localPoint, result);\n    result.vadd(position, result);\n    return result;\n  }\n\n  static vectorToWorldFrame(quaternion, localVector, result = new Vec3()) {\n    quaternion.vmult(localVector, result);\n    return result;\n  }\n\n  static vectorToLocalFrame(position, quaternion, worldVector, result = new Vec3()) {\n    quaternion.w *= -1;\n    quaternion.vmult(worldVector, result);\n    quaternion.w *= -1;\n    return result;\n  }\n\n}\nconst tmpQuat = new Quaternion();\n\n/**\r\n * A set of polygons describing a convex shape.\r\n * @class ConvexPolyhedron\r\n * @constructor\r\n * @extends Shape\r\n * @description The shape MUST be convex for the code to work properly. No polygons may be coplanar (contained\r\n * in the same 3D plane), instead these should be merged into one polygon.\r\n *\r\n * @param {array} points An array of Vec3's\r\n * @param {array} faces Array of integer arrays, describing which vertices that is included in each face.\r\n *\r\n * @author qiao / https://github.com/qiao (original author, see https://github.com/qiao/three.js/commit/85026f0c769e4000148a67d45a9e9b9c5108836f)\r\n * @author schteppe / https://github.com/schteppe\r\n * @see http://www.altdevblogaday.com/2011/05/13/contact-generation-between-3d-convex-meshes/\r\n *\r\n * @todo Move the clipping functions to ContactGenerator?\r\n * @todo Automatically merge coplanar polygons in constructor.\r\n */\nclass ConvexPolyhedron extends Shape {\n  // Array of integer arrays, indicating which vertices each face consists of\n  // If given, these locally defined, normalized axes are the only ones being checked when doing separating axis check.\n  constructor(props = {}) {\n    const {\n      vertices = [],\n      faces = [],\n      normals = [],\n      axes,\n      boundingSphereRadius\n    } = props;\n    super({\n      type: Shape.types.CONVEXPOLYHEDRON\n    });\n    this.vertices = vertices;\n    this.faces = faces;\n    this.faceNormals = normals;\n\n    if (this.faceNormals.length === 0) {\n      this.computeNormals();\n    }\n\n    if (!boundingSphereRadius) {\n      this.updateBoundingSphereRadius();\n    } else {\n      this.boundingSphereRadius = boundingSphereRadius;\n    }\n\n    this.worldVertices = []; // World transformed version of .vertices\n\n    this.worldVerticesNeedsUpdate = true;\n    this.worldFaceNormals = []; // World transformed version of .faceNormals\n\n    this.worldFaceNormalsNeedsUpdate = true;\n    this.uniqueAxes = axes ? axes.slice() : null;\n    this.uniqueEdges = [];\n    this.computeEdges();\n  }\n  /**\r\n   * Computes uniqueEdges\r\n   * @method computeEdges\r\n   */\n\n\n  computeEdges() {\n    const faces = this.faces;\n    const vertices = this.vertices;\n    const edges = this.uniqueEdges;\n    edges.length = 0;\n    const edge = new Vec3();\n\n    for (let i = 0; i !== faces.length; i++) {\n      const face = faces[i];\n      const numVertices = face.length;\n\n      for (let j = 0; j !== numVertices; j++) {\n        const k = (j + 1) % numVertices;\n        vertices[face[j]].vsub(vertices[face[k]], edge);\n        edge.normalize();\n        let found = false;\n\n        for (let p = 0; p !== edges.length; p++) {\n          if (edges[p].almostEquals(edge) || edges[p].almostEquals(edge)) {\n            found = true;\n            break;\n          }\n        }\n\n        if (!found) {\n          edges.push(edge.clone());\n        }\n      }\n    }\n  }\n  /**\r\n   * Compute the normals of the faces. Will reuse existing Vec3 objects in the .faceNormals array if they exist.\r\n   * @method computeNormals\r\n   */\n\n\n  computeNormals() {\n    this.faceNormals.length = this.faces.length; // Generate normals\n\n    for (let i = 0; i < this.faces.length; i++) {\n      // Check so all vertices exists for this face\n      for (let j = 0; j < this.faces[i].length; j++) {\n        if (!this.vertices[this.faces[i][j]]) {\n          throw new Error(\"Vertex \" + this.faces[i][j] + \" not found!\");\n        }\n      }\n\n      const n = this.faceNormals[i] || new Vec3();\n      this.getFaceNormal(i, n);\n      n.negate(n);\n      this.faceNormals[i] = n;\n      const vertex = this.vertices[this.faces[i][0]];\n\n      if (n.dot(vertex) < 0) {\n        console.error(\".faceNormals[\" + i + \"] = Vec3(\" + n.toString() + \") looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.\");\n\n        for (let j = 0; j < this.faces[i].length; j++) {\n          console.warn(\".vertices[\" + this.faces[i][j] + \"] = Vec3(\" + this.vertices[this.faces[i][j]].toString() + \")\");\n        }\n      }\n    }\n  }\n  /**\r\n   * Compute the normal of a face from its vertices\r\n   * @method getFaceNormal\r\n   * @param  {Number} i\r\n   * @param  {Vec3} target\r\n   */\n\n\n  getFaceNormal(i, target) {\n    const f = this.faces[i];\n    const va = this.vertices[f[0]];\n    const vb = this.vertices[f[1]];\n    const vc = this.vertices[f[2]];\n    ConvexPolyhedron.computeNormal(va, vb, vc, target);\n  }\n  /**\r\n   * @method clipAgainstHull\r\n   * @param {Vec3} posA\r\n   * @param {Quaternion} quatA\r\n   * @param {ConvexPolyhedron} hullB\r\n   * @param {Vec3} posB\r\n   * @param {Quaternion} quatB\r\n   * @param {Vec3} separatingNormal\r\n   * @param {Number} minDist Clamp distance\r\n   * @param {Number} maxDist\r\n   * @param {array} result The an array of contact point objects, see clipFaceAgainstHull\r\n   */\n\n\n  clipAgainstHull(posA, quatA, hullB, posB, quatB, separatingNormal, minDist, maxDist, result) {\n    const WorldNormal = new Vec3();\n    let closestFaceB = -1;\n    let dmax = -Number.MAX_VALUE;\n\n    for (let face = 0; face < hullB.faces.length; face++) {\n      WorldNormal.copy(hullB.faceNormals[face]);\n      quatB.vmult(WorldNormal, WorldNormal);\n      const d = WorldNormal.dot(separatingNormal);\n\n      if (d > dmax) {\n        dmax = d;\n        closestFaceB = face;\n      }\n    }\n\n    const worldVertsB1 = [];\n\n    for (let i = 0; i < hullB.faces[closestFaceB].length; i++) {\n      const b = hullB.vertices[hullB.faces[closestFaceB][i]];\n      const worldb = new Vec3();\n      worldb.copy(b);\n      quatB.vmult(worldb, worldb);\n      posB.vadd(worldb, worldb);\n      worldVertsB1.push(worldb);\n    }\n\n    if (closestFaceB >= 0) {\n      this.clipFaceAgainstHull(separatingNormal, posA, quatA, worldVertsB1, minDist, maxDist, result);\n    }\n  }\n  /**\r\n   * Find the separating axis between this hull and another\r\n   * @method findSeparatingAxis\r\n   * @param {ConvexPolyhedron} hullB\r\n   * @param {Vec3} posA\r\n   * @param {Quaternion} quatA\r\n   * @param {Vec3} posB\r\n   * @param {Quaternion} quatB\r\n   * @param {Vec3} target The target vector to save the axis in\r\n   * @return {bool} Returns false if a separation is found, else true\r\n   */\n\n\n  findSeparatingAxis(hullB, posA, quatA, posB, quatB, target, faceListA, faceListB) {\n    const faceANormalWS3 = new Vec3();\n    const Worldnormal1 = new Vec3();\n    const deltaC = new Vec3();\n    const worldEdge0 = new Vec3();\n    const worldEdge1 = new Vec3();\n    const Cross = new Vec3();\n    let dmin = Number.MAX_VALUE;\n    const hullA = this;\n\n    if (!hullA.uniqueAxes) {\n      const numFacesA = faceListA ? faceListA.length : hullA.faces.length; // Test face normals from hullA\n\n      for (let i = 0; i < numFacesA; i++) {\n        const fi = faceListA ? faceListA[i] : i; // Get world face normal\n\n        faceANormalWS3.copy(hullA.faceNormals[fi]);\n        quatA.vmult(faceANormalWS3, faceANormalWS3);\n        const d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);\n\n        if (d === false) {\n          return false;\n        }\n\n        if (d < dmin) {\n          dmin = d;\n          target.copy(faceANormalWS3);\n        }\n      }\n    } else {\n      // Test unique axes\n      for (let i = 0; i !== hullA.uniqueAxes.length; i++) {\n        // Get world axis\n        quatA.vmult(hullA.uniqueAxes[i], faceANormalWS3);\n        const d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);\n\n        if (d === false) {\n          return false;\n        }\n\n        if (d < dmin) {\n          dmin = d;\n          target.copy(faceANormalWS3);\n        }\n      }\n    }\n\n    if (!hullB.uniqueAxes) {\n      // Test face normals from hullB\n      const numFacesB = faceListB ? faceListB.length : hullB.faces.length;\n\n      for (let i = 0; i < numFacesB; i++) {\n        const fi = faceListB ? faceListB[i] : i;\n        Worldnormal1.copy(hullB.faceNormals[fi]);\n        quatB.vmult(Worldnormal1, Worldnormal1);\n        const d = hullA.testSepAxis(Worldnormal1, hullB, posA, quatA, posB, quatB);\n\n        if (d === false) {\n          return false;\n        }\n\n        if (d < dmin) {\n          dmin = d;\n          target.copy(Worldnormal1);\n        }\n      }\n    } else {\n      // Test unique axes in B\n      for (let i = 0; i !== hullB.uniqueAxes.length; i++) {\n        quatB.vmult(hullB.uniqueAxes[i], Worldnormal1);\n        const d = hullA.testSepAxis(Worldnormal1, hullB, posA, quatA, posB, quatB);\n\n        if (d === false) {\n          return false;\n        }\n\n        if (d < dmin) {\n          dmin = d;\n          target.copy(Worldnormal1);\n        }\n      }\n    } // Test edges\n\n\n    for (let e0 = 0; e0 !== hullA.uniqueEdges.length; e0++) {\n      // Get world edge\n      quatA.vmult(hullA.uniqueEdges[e0], worldEdge0);\n\n      for (let e1 = 0; e1 !== hullB.uniqueEdges.length; e1++) {\n        // Get world edge 2\n        quatB.vmult(hullB.uniqueEdges[e1], worldEdge1);\n        worldEdge0.cross(worldEdge1, Cross);\n\n        if (!Cross.almostZero()) {\n          Cross.normalize();\n          const dist = hullA.testSepAxis(Cross, hullB, posA, quatA, posB, quatB);\n\n          if (dist === false) {\n            return false;\n          }\n\n          if (dist < dmin) {\n            dmin = dist;\n            target.copy(Cross);\n          }\n        }\n      }\n    }\n\n    posB.vsub(posA, deltaC);\n\n    if (deltaC.dot(target) > 0.0) {\n      target.negate(target);\n    }\n\n    return true;\n  }\n  /**\r\n   * Test separating axis against two hulls. Both hulls are projected onto the axis and the overlap size is returned if there is one.\r\n   * @method testSepAxis\r\n   * @param {Vec3} axis\r\n   * @param {ConvexPolyhedron} hullB\r\n   * @param {Vec3} posA\r\n   * @param {Quaternion} quatA\r\n   * @param {Vec3} posB\r\n   * @param {Quaternion} quatB\r\n   * @return {number} The overlap depth, or FALSE if no penetration.\r\n   */\n\n\n  testSepAxis(axis, hullB, posA, quatA, posB, quatB) {\n    const hullA = this;\n    ConvexPolyhedron.project(hullA, axis, posA, quatA, maxminA);\n    ConvexPolyhedron.project(hullB, axis, posB, quatB, maxminB);\n    const maxA = maxminA[0];\n    const minA = maxminA[1];\n    const maxB = maxminB[0];\n    const minB = maxminB[1];\n\n    if (maxA < minB || maxB < minA) {\n      return false; // Separated\n    }\n\n    const d0 = maxA - minB;\n    const d1 = maxB - minA;\n    const depth = d0 < d1 ? d0 : d1;\n    return depth;\n  }\n  /**\r\n   * @method calculateLocalInertia\r\n   * @param  {Number} mass\r\n   * @param  {Vec3} target\r\n   */\n\n\n  calculateLocalInertia(mass, target) {\n    // Approximate with box inertia\n    // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it\n    const aabbmax = new Vec3();\n    const aabbmin = new Vec3();\n    this.computeLocalAABB(aabbmin, aabbmax);\n    const x = aabbmax.x - aabbmin.x;\n    const y = aabbmax.y - aabbmin.y;\n    const z = aabbmax.z - aabbmin.z;\n    target.x = 1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * z * 2 * z);\n    target.y = 1.0 / 12.0 * mass * (2 * x * 2 * x + 2 * z * 2 * z);\n    target.z = 1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * x * 2 * x);\n  }\n  /**\r\n   * @method getPlaneConstantOfFace\r\n   * @param  {Number} face_i Index of the face\r\n   * @return {Number}\r\n   */\n\n\n  getPlaneConstantOfFace(face_i) {\n    const f = this.faces[face_i];\n    const n = this.faceNormals[face_i];\n    const v = this.vertices[f[0]];\n    const c = -n.dot(v);\n    return c;\n  }\n  /**\r\n   * Clip a face against a hull.\r\n   * @method clipFaceAgainstHull\r\n   * @param {Vec3} separatingNormal\r\n   * @param {Vec3} posA\r\n   * @param {Quaternion} quatA\r\n   * @param {Array} worldVertsB1 An array of Vec3 with vertices in the world frame.\r\n   * @param {Number} minDist Distance clamping\r\n   * @param {Number} maxDist\r\n   * @param Array result Array to store resulting contact points in. Will be objects with properties: point, depth, normal. These are represented in world coordinates.\r\n   */\n\n\n  clipFaceAgainstHull(separatingNormal, posA, quatA, worldVertsB1, minDist, maxDist, result) {\n    const faceANormalWS = new Vec3();\n    const edge0 = new Vec3();\n    const WorldEdge0 = new Vec3();\n    const worldPlaneAnormal1 = new Vec3();\n    const planeNormalWS1 = new Vec3();\n    const worldA1 = new Vec3();\n    const localPlaneNormal = new Vec3();\n    const planeNormalWS = new Vec3();\n    const hullA = this;\n    const worldVertsB2 = [];\n    const pVtxIn = worldVertsB1;\n    const pVtxOut = worldVertsB2;\n    let closestFaceA = -1;\n    let dmin = Number.MAX_VALUE; // Find the face with normal closest to the separating axis\n\n    for (let face = 0; face < hullA.faces.length; face++) {\n      faceANormalWS.copy(hullA.faceNormals[face]);\n      quatA.vmult(faceANormalWS, faceANormalWS);\n      const d = faceANormalWS.dot(separatingNormal);\n\n      if (d < dmin) {\n        dmin = d;\n        closestFaceA = face;\n      }\n    }\n\n    if (closestFaceA < 0) {\n      return;\n    } // Get the face and construct connected faces\n\n\n    const polyA = hullA.faces[closestFaceA];\n    polyA.connectedFaces = [];\n\n    for (let i = 0; i < hullA.faces.length; i++) {\n      for (let j = 0; j < hullA.faces[i].length; j++) {\n        if (\n        /* Sharing a vertex*/\n        polyA.indexOf(hullA.faces[i][j]) !== -1 &&\n        /* Not the one we are looking for connections from */\n        i !== closestFaceA &&\n        /* Not already added */\n        polyA.connectedFaces.indexOf(i) === -1) {\n          polyA.connectedFaces.push(i);\n        }\n      }\n    } // Clip the polygon to the back of the planes of all faces of hull A,\n    // that are adjacent to the witness face\n\n\n    const numVerticesA = polyA.length;\n\n    for (let i = 0; i < numVerticesA; i++) {\n      const a = hullA.vertices[polyA[i]];\n      const b = hullA.vertices[polyA[(i + 1) % numVerticesA]];\n      a.vsub(b, edge0);\n      WorldEdge0.copy(edge0);\n      quatA.vmult(WorldEdge0, WorldEdge0);\n      posA.vadd(WorldEdge0, WorldEdge0);\n      worldPlaneAnormal1.copy(this.faceNormals[closestFaceA]);\n      quatA.vmult(worldPlaneAnormal1, worldPlaneAnormal1);\n      posA.vadd(worldPlaneAnormal1, worldPlaneAnormal1);\n      WorldEdge0.cross(worldPlaneAnormal1, planeNormalWS1);\n      planeNormalWS1.negate(planeNormalWS1);\n      worldA1.copy(a);\n      quatA.vmult(worldA1, worldA1);\n      posA.vadd(worldA1, worldA1);\n      const otherFace = polyA.connectedFaces[i];\n      localPlaneNormal.copy(this.faceNormals[otherFace]);\n      const localPlaneEq = this.getPlaneConstantOfFace(otherFace);\n      planeNormalWS.copy(localPlaneNormal);\n      quatA.vmult(planeNormalWS, planeNormalWS);\n      const planeEqWS = localPlaneEq - planeNormalWS.dot(posA); // Clip face against our constructed plane\n\n      this.clipFaceAgainstPlane(pVtxIn, pVtxOut, planeNormalWS, planeEqWS); // Throw away all clipped points, but save the remaining until next clip\n\n      while (pVtxIn.length) {\n        pVtxIn.shift();\n      }\n\n      while (pVtxOut.length) {\n        pVtxIn.push(pVtxOut.shift());\n      }\n    } // only keep contact points that are behind the witness face\n\n\n    localPlaneNormal.copy(this.faceNormals[closestFaceA]);\n    const localPlaneEq = this.getPlaneConstantOfFace(closestFaceA);\n    planeNormalWS.copy(localPlaneNormal);\n    quatA.vmult(planeNormalWS, planeNormalWS);\n    const planeEqWS = localPlaneEq - planeNormalWS.dot(posA);\n\n    for (let i = 0; i < pVtxIn.length; i++) {\n      let depth = planeNormalWS.dot(pVtxIn[i]) + planeEqWS; // ???\n\n      if (depth <= minDist) {\n        console.log(\"clamped: depth=\" + depth + \" to minDist=\" + minDist);\n        depth = minDist;\n      }\n\n      if (depth <= maxDist) {\n        const point = pVtxIn[i];\n\n        if (depth <= 1e-6) {\n          const p = {\n            point,\n            normal: planeNormalWS,\n            depth\n          };\n          result.push(p);\n        }\n      }\n    }\n  }\n  /**\r\n   * Clip a face in a hull against the back of a plane.\r\n   * @method clipFaceAgainstPlane\r\n   * @param {Array} inVertices\r\n   * @param {Array} outVertices\r\n   * @param {Vec3} planeNormal\r\n   * @param {Number} planeConstant The constant in the mathematical plane equation\r\n   */\n\n\n  clipFaceAgainstPlane(inVertices, outVertices, planeNormal, planeConstant) {\n    let n_dot_first;\n    let n_dot_last;\n    const numVerts = inVertices.length;\n\n    if (numVerts < 2) {\n      return outVertices;\n    }\n\n    let firstVertex = inVertices[inVertices.length - 1];\n    let lastVertex = inVertices[0];\n    n_dot_first = planeNormal.dot(firstVertex) + planeConstant;\n\n    for (let vi = 0; vi < numVerts; vi++) {\n      lastVertex = inVertices[vi];\n      n_dot_last = planeNormal.dot(lastVertex) + planeConstant;\n\n      if (n_dot_first < 0) {\n        if (n_dot_last < 0) {\n          // Start < 0, end < 0, so output lastVertex\n          const newv = new Vec3();\n          newv.copy(lastVertex);\n          outVertices.push(newv);\n        } else {\n          // Start < 0, end >= 0, so output intersection\n          const newv = new Vec3();\n          firstVertex.lerp(lastVertex, n_dot_first / (n_dot_first - n_dot_last), newv);\n          outVertices.push(newv);\n        }\n      } else {\n        if (n_dot_last < 0) {\n          // Start >= 0, end < 0 so output intersection and end\n          const newv = new Vec3();\n          firstVertex.lerp(lastVertex, n_dot_first / (n_dot_first - n_dot_last), newv);\n          outVertices.push(newv);\n          outVertices.push(lastVertex);\n        }\n      }\n\n      firstVertex = lastVertex;\n      n_dot_first = n_dot_last;\n    }\n\n    return outVertices;\n  } // Updates .worldVertices and sets .worldVerticesNeedsUpdate to false.\n\n\n  computeWorldVertices(position, quat) {\n    while (this.worldVertices.length < this.vertices.length) {\n      this.worldVertices.push(new Vec3());\n    }\n\n    const verts = this.vertices;\n    const worldVerts = this.worldVertices;\n\n    for (let i = 0; i !== this.vertices.length; i++) {\n      quat.vmult(verts[i], worldVerts[i]);\n      position.vadd(worldVerts[i], worldVerts[i]);\n    }\n\n    this.worldVerticesNeedsUpdate = false;\n  }\n\n  computeLocalAABB(aabbmin, aabbmax) {\n    const vertices = this.vertices;\n    aabbmin.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n    aabbmax.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n\n    for (let i = 0; i < this.vertices.length; i++) {\n      const v = vertices[i];\n\n      if (v.x < aabbmin.x) {\n        aabbmin.x = v.x;\n      } else if (v.x > aabbmax.x) {\n        aabbmax.x = v.x;\n      }\n\n      if (v.y < aabbmin.y) {\n        aabbmin.y = v.y;\n      } else if (v.y > aabbmax.y) {\n        aabbmax.y = v.y;\n      }\n\n      if (v.z < aabbmin.z) {\n        aabbmin.z = v.z;\n      } else if (v.z > aabbmax.z) {\n        aabbmax.z = v.z;\n      }\n    }\n  }\n  /**\r\n   * Updates .worldVertices and sets .worldVerticesNeedsUpdate to false.\r\n   * @method computeWorldFaceNormals\r\n   * @param  {Quaternion} quat\r\n   */\n\n\n  computeWorldFaceNormals(quat) {\n    const N = this.faceNormals.length;\n\n    while (this.worldFaceNormals.length < N) {\n      this.worldFaceNormals.push(new Vec3());\n    }\n\n    const normals = this.faceNormals;\n    const worldNormals = this.worldFaceNormals;\n\n    for (let i = 0; i !== N; i++) {\n      quat.vmult(normals[i], worldNormals[i]);\n    }\n\n    this.worldFaceNormalsNeedsUpdate = false;\n  }\n  /**\r\n   * @method updateBoundingSphereRadius\r\n   */\n\n\n  updateBoundingSphereRadius() {\n    // Assume points are distributed with local (0,0,0) as center\n    let max2 = 0;\n    const verts = this.vertices;\n\n    for (let i = 0; i !== verts.length; i++) {\n      const norm2 = verts[i].lengthSquared();\n\n      if (norm2 > max2) {\n        max2 = norm2;\n      }\n    }\n\n    this.boundingSphereRadius = Math.sqrt(max2);\n  }\n  /**\r\n   * @method calculateWorldAABB\r\n   * @param {Vec3}        pos\r\n   * @param {Quaternion}  quat\r\n   * @param {Vec3}        min\r\n   * @param {Vec3}        max\r\n   */\n\n\n  calculateWorldAABB(pos, quat, min, max) {\n    const verts = this.vertices;\n    let minx;\n    let miny;\n    let minz;\n    let maxx;\n    let maxy;\n    let maxz;\n    let tempWorldVertex = new Vec3();\n\n    for (let i = 0; i < verts.length; i++) {\n      tempWorldVertex.copy(verts[i]);\n      quat.vmult(tempWorldVertex, tempWorldVertex);\n      pos.vadd(tempWorldVertex, tempWorldVertex);\n      const v = tempWorldVertex;\n\n      if (minx === undefined || v.x < minx) {\n        minx = v.x;\n      }\n\n      if (maxx === undefined || v.x > maxx) {\n        maxx = v.x;\n      }\n\n      if (miny === undefined || v.y < miny) {\n        miny = v.y;\n      }\n\n      if (maxy === undefined || v.y > maxy) {\n        maxy = v.y;\n      }\n\n      if (minz === undefined || v.z < minz) {\n        minz = v.z;\n      }\n\n      if (maxz === undefined || v.z > maxz) {\n        maxz = v.z;\n      }\n    }\n\n    min.set(minx, miny, minz);\n    max.set(maxx, maxy, maxz);\n  }\n  /**\r\n   * Get approximate convex volume\r\n   * @method volume\r\n   * @return {Number}\r\n   */\n\n\n  volume() {\n    return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;\n  }\n  /**\r\n   * Get an average of all the vertices positions\r\n   * @method getAveragePointLocal\r\n   * @param  {Vec3} target\r\n   * @return {Vec3}\r\n   */\n\n\n  getAveragePointLocal(target = new Vec3()) {\n    const verts = this.vertices;\n\n    for (let i = 0; i < verts.length; i++) {\n      target.vadd(verts[i], target);\n    }\n\n    target.scale(1 / verts.length, target);\n    return target;\n  }\n  /**\r\n   * Transform all local points. Will change the .vertices\r\n   * @method transformAllPoints\r\n   * @param  {Vec3} offset\r\n   * @param  {Quaternion} quat\r\n   */\n\n\n  transformAllPoints(offset, quat) {\n    const n = this.vertices.length;\n    const verts = this.vertices; // Apply rotation\n\n    if (quat) {\n      // Rotate vertices\n      for (let i = 0; i < n; i++) {\n        const v = verts[i];\n        quat.vmult(v, v);\n      } // Rotate face normals\n\n\n      for (let i = 0; i < this.faceNormals.length; i++) {\n        const v = this.faceNormals[i];\n        quat.vmult(v, v);\n      }\n      /*\r\n            // Rotate edges\r\n            for(let i=0; i<this.uniqueEdges.length; i++){\r\n                const v = this.uniqueEdges[i];\r\n                quat.vmult(v,v);\r\n            }*/\n\n    } // Apply offset\n\n\n    if (offset) {\n      for (let i = 0; i < n; i++) {\n        const v = verts[i];\n        v.vadd(offset, v);\n      }\n    }\n  }\n  /**\r\n   * Checks whether p is inside the polyhedra. Must be in local coords.\r\n   * The point lies outside of the convex hull of the other points if and only if the direction\r\n   * of all the vectors from it to those other points are on less than one half of a sphere around it.\r\n   * @method pointIsInside\r\n   * @param  {Vec3} p      A point given in local coordinates\r\n   * @return {Boolean}\r\n   */\n\n\n  pointIsInside(p) {\n    const verts = this.vertices;\n    const faces = this.faces;\n    const normals = this.faceNormals;\n    const pointInside = new Vec3();\n    this.getAveragePointLocal(pointInside);\n\n    for (let i = 0; i < this.faces.length; i++) {\n      let n = normals[i];\n      const v = verts[faces[i][0]]; // We only need one point in the face\n      // This dot product determines which side of the edge the point is\n\n      const vToP = new Vec3();\n      p.vsub(v, vToP);\n      const r1 = n.dot(vToP);\n      const vToPointInside = new Vec3();\n      pointInside.vsub(v, vToPointInside);\n      const r2 = n.dot(vToPointInside);\n\n      if (r1 < 0 && r2 > 0 || r1 > 0 && r2 < 0) {\n        return false; // Encountered some other sign. Exit.\n      }\n    } // If we got here, all dot products were of the same sign.\n\n\n    return  -1;\n  }\n\n}\n/**\r\n * Get face normal given 3 vertices\r\n * @static\r\n * @method computeNormal\r\n * @param {Vec3} va\r\n * @param {Vec3} vb\r\n * @param {Vec3} vc\r\n * @param {Vec3} target\r\n */\n\nConvexPolyhedron.computeNormal = (va, vb, vc, target) => {\n  const cb = new Vec3();\n  const ab = new Vec3();\n  vb.vsub(va, ab);\n  vc.vsub(vb, cb);\n  cb.cross(ab, target);\n\n  if (!target.isZero()) {\n    target.normalize();\n  }\n};\n\nconst maxminA = [];\nconst maxminB = [];\n/**\r\n * Get max and min dot product of a convex hull at position (pos,quat) projected onto an axis.\r\n * Results are saved in the array maxmin.\r\n * @static\r\n * @method project\r\n * @param {ConvexPolyhedron} hull\r\n * @param {Vec3} axis\r\n * @param {Vec3} pos\r\n * @param {Quaternion} quat\r\n * @param {array} result result[0] and result[1] will be set to maximum and minimum, respectively.\r\n */\n\nConvexPolyhedron.project = (shape, axis, pos, quat, result) => {\n  const n = shape.vertices.length;\n  const localAxis = new Vec3();\n  let max = 0;\n  let min = 0;\n  const localOrigin = new Vec3();\n  const vs = shape.vertices;\n  localOrigin.setZero(); // Transform the axis to local\n\n  Transform.vectorToLocalFrame(pos, quat, axis, localAxis);\n  Transform.pointToLocalFrame(pos, quat, localOrigin, localOrigin);\n  const add = localOrigin.dot(localAxis);\n  min = max = vs[0].dot(localAxis);\n\n  for (let i = 1; i < n; i++) {\n    const val = vs[i].dot(localAxis);\n\n    if (val > max) {\n      max = val;\n    }\n\n    if (val < min) {\n      min = val;\n    }\n  }\n\n  min -= add;\n  max -= add;\n\n  if (min > max) {\n    // Inconsistent - swap\n    const temp = min;\n    min = max;\n    max = temp;\n  } // Output\n\n\n  result[0] = max;\n  result[1] = min;\n};\n\n/**\n * A 3d box shape.\n * @class Box\n * @constructor\n * @param {Vec3} halfExtents\n * @author schteppe\n * @extends Shape\n */\nclass Box extends Shape {\n  // Used by the contact generator to make contacts with other convex polyhedra for example.\n  constructor(halfExtents) {\n    super({\n      type: Shape.types.BOX\n    });\n    this.halfExtents = halfExtents;\n    this.convexPolyhedronRepresentation = null;\n    this.updateConvexPolyhedronRepresentation();\n    this.updateBoundingSphereRadius();\n  }\n  /**\n   * Updates the local convex polyhedron representation used for some collisions.\n   * @method updateConvexPolyhedronRepresentation\n   */\n\n\n  updateConvexPolyhedronRepresentation() {\n    const sx = this.halfExtents.x;\n    const sy = this.halfExtents.y;\n    const sz = this.halfExtents.z;\n    const V = Vec3;\n    const vertices = [new V(-sx, -sy, -sz), new V(sx, -sy, -sz), new V(sx, sy, -sz), new V(-sx, sy, -sz), new V(-sx, -sy, sz), new V(sx, -sy, sz), new V(sx, sy, sz), new V(-sx, sy, sz)];\n    const faces = [[3, 2, 1, 0], // -z\n    [4, 5, 6, 7], // +z\n    [5, 4, 0, 1], // -y\n    [2, 3, 7, 6], // +y\n    [0, 4, 7, 3], // -x\n    [1, 2, 6, 5] // +x\n    ];\n    const axes = [new V(0, 0, 1), new V(0, 1, 0), new V(1, 0, 0)];\n    const h = new ConvexPolyhedron({\n      vertices,\n      faces,\n      axes\n    });\n    this.convexPolyhedronRepresentation = h;\n    h.material = this.material;\n  }\n  /**\n   * @method calculateLocalInertia\n   * @param  {Number} mass\n   * @param  {Vec3} target\n   * @return {Vec3}\n   */\n\n\n  calculateLocalInertia(mass, target = new Vec3()) {\n    Box.calculateInertia(this.halfExtents, mass, target);\n    return target;\n  }\n  /**\n   * Get the box 6 side normals\n   * @method getSideNormals\n   * @param {array}      sixTargetVectors An array of 6 vectors, to store the resulting side normals in.\n   * @param {Quaternion} quat             Orientation to apply to the normal vectors. If not provided, the vectors will be in respect to the local frame.\n   * @return {array}\n   */\n\n\n  getSideNormals(sixTargetVectors, quat) {\n    const sides = sixTargetVectors;\n    const ex = this.halfExtents;\n    sides[0].set(ex.x, 0, 0);\n    sides[1].set(0, ex.y, 0);\n    sides[2].set(0, 0, ex.z);\n    sides[3].set(-ex.x, 0, 0);\n    sides[4].set(0, -ex.y, 0);\n    sides[5].set(0, 0, -ex.z);\n\n    if (quat !== undefined) {\n      for (let i = 0; i !== sides.length; i++) {\n        quat.vmult(sides[i], sides[i]);\n      }\n    }\n\n    return sides;\n  }\n\n  volume() {\n    return 8.0 * this.halfExtents.x * this.halfExtents.y * this.halfExtents.z;\n  }\n\n  updateBoundingSphereRadius() {\n    this.boundingSphereRadius = this.halfExtents.length();\n  }\n\n  forEachWorldCorner(pos, quat, callback) {\n    const e = this.halfExtents;\n    const corners = [[e.x, e.y, e.z], [-e.x, e.y, e.z], [-e.x, -e.y, e.z], [-e.x, -e.y, -e.z], [e.x, -e.y, -e.z], [e.x, e.y, -e.z], [-e.x, e.y, -e.z], [e.x, -e.y, e.z]];\n\n    for (let i = 0; i < corners.length; i++) {\n      worldCornerTempPos.set(corners[i][0], corners[i][1], corners[i][2]);\n      quat.vmult(worldCornerTempPos, worldCornerTempPos);\n      pos.vadd(worldCornerTempPos, worldCornerTempPos);\n      callback(worldCornerTempPos.x, worldCornerTempPos.y, worldCornerTempPos.z);\n    }\n  }\n\n  calculateWorldAABB(pos, quat, min, max) {\n    const e = this.halfExtents;\n    worldCornersTemp[0].set(e.x, e.y, e.z);\n    worldCornersTemp[1].set(-e.x, e.y, e.z);\n    worldCornersTemp[2].set(-e.x, -e.y, e.z);\n    worldCornersTemp[3].set(-e.x, -e.y, -e.z);\n    worldCornersTemp[4].set(e.x, -e.y, -e.z);\n    worldCornersTemp[5].set(e.x, e.y, -e.z);\n    worldCornersTemp[6].set(-e.x, e.y, -e.z);\n    worldCornersTemp[7].set(e.x, -e.y, e.z);\n    const wc = worldCornersTemp[0];\n    quat.vmult(wc, wc);\n    pos.vadd(wc, wc);\n    max.copy(wc);\n    min.copy(wc);\n\n    for (let i = 1; i < 8; i++) {\n      const wc = worldCornersTemp[i];\n      quat.vmult(wc, wc);\n      pos.vadd(wc, wc);\n      const x = wc.x;\n      const y = wc.y;\n      const z = wc.z;\n\n      if (x > max.x) {\n        max.x = x;\n      }\n\n      if (y > max.y) {\n        max.y = y;\n      }\n\n      if (z > max.z) {\n        max.z = z;\n      }\n\n      if (x < min.x) {\n        min.x = x;\n      }\n\n      if (y < min.y) {\n        min.y = y;\n      }\n\n      if (z < min.z) {\n        min.z = z;\n      }\n    } // Get each axis max\n    // min.set(Infinity,Infinity,Infinity);\n    // max.set(-Infinity,-Infinity,-Infinity);\n    // this.forEachWorldCorner(pos,quat,function(x,y,z){\n    //     if(x > max.x){\n    //         max.x = x;\n    //     }\n    //     if(y > max.y){\n    //         max.y = y;\n    //     }\n    //     if(z > max.z){\n    //         max.z = z;\n    //     }\n    //     if(x < min.x){\n    //         min.x = x;\n    //     }\n    //     if(y < min.y){\n    //         min.y = y;\n    //     }\n    //     if(z < min.z){\n    //         min.z = z;\n    //     }\n    // });\n\n  }\n\n}\n\nBox.calculateInertia = (halfExtents, mass, target) => {\n  const e = halfExtents;\n  target.x = 1.0 / 12.0 * mass * (2 * e.y * 2 * e.y + 2 * e.z * 2 * e.z);\n  target.y = 1.0 / 12.0 * mass * (2 * e.x * 2 * e.x + 2 * e.z * 2 * e.z);\n  target.z = 1.0 / 12.0 * mass * (2 * e.y * 2 * e.y + 2 * e.x * 2 * e.x);\n};\n\nconst worldCornerTempPos = new Vec3();\nconst worldCornersTemp = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\n\nconst BODY_TYPES = {\n  DYNAMIC: 1,\n  STATIC: 2,\n  KINEMATIC: 4\n};\nconst BODY_SLEEP_STATES = {\n  AWAKE: 0,\n  SLEEPY: 1,\n  SLEEPING: 2\n};\n\n/**\r\n * Base class for all body types.\r\n * @class Body\r\n * @constructor\r\n * @extends EventTarget\r\n * @param {object} [options]\r\n * @param {Vec3} [options.position]\r\n * @param {Vec3} [options.velocity]\r\n * @param {Vec3} [options.angularVelocity]\r\n * @param {Quaternion} [options.quaternion]\r\n * @param {number} [options.mass]\r\n * @param {Material} [options.material]\r\n * @param {number} [options.type]\r\n * @param {number} [options.linearDamping=0.01]\r\n * @param {number} [options.angularDamping=0.01]\r\n * @param {boolean} [options.allowSleep=true]\r\n * @param {number} [options.sleepSpeedLimit=0.1]\r\n * @param {number} [options.sleepTimeLimit=1]\r\n * @param {number} [options.collisionFilterGroup=1]\r\n * @param {number} [options.collisionFilterMask=-1]\r\n * @param {boolean} [options.fixedRotation=false]\r\n * @param {Vec3} [options.linearFactor]\r\n * @param {Vec3} [options.angularFactor]\r\n * @param {Shape} [options.shape]\r\n * @example\r\n *     const body = new Body({\r\n *         mass: 1\r\n *     });\r\n *     const shape = new Sphere(1);\r\n *     body.addShape(shape);\r\n *     world.addBody(body);\r\n */\nclass Body extends EventTarget {\n  // Position of body in World.bodies. Updated by World and used in ArrayCollisionMatrix.\n  // Reference to the world the body is living in.\n  // Callback function that is used BEFORE stepping the system. Use it to apply forces, for example. Inside the function, \"this\" will refer to this Body object. Deprecated - use World events instead.\n  // Callback function that is used AFTER stepping the system. Inside the function, \"this\" will refer to this Body object. Deprecated - use World events instead.\n  // Whether to produce contact forces when in contact with other bodies. Note that contacts will be generated, but they will be disabled - i.e. \"collide\" events will be raised, but forces will not be altered.\n  // World space position of the body.\n  // Interpolated position of the body.\n  // Initial position of the body.\n  // World space velocity of the body.\n  // Linear force on the body in world space.\n  // One of: Body.DYNAMIC, Body.STATIC and Body.KINEMATIC.\n  // If true, the body will automatically fall to sleep.\n  // Current sleep state.\n  // If the speed (the norm of the velocity) is smaller than this value, the body is considered sleepy.\n  // If the body has been sleepy for this sleepTimeLimit seconds, it is considered sleeping.\n  // World space rotational force on the body, around center of mass.\n  // World space orientation of the body.\n  // Interpolated orientation of the body.\n  // Angular velocity of the body, in world space. Think of the angular velocity as a vector, which the body rotates around. The length of this vector determines how fast (in radians per second) the body rotates.\n  // Position of each Shape in the body, given in local Body space.\n  // Orientation of each Shape, given in local Body space.\n  // Set to true if you don't want the body to rotate. Make sure to run .updateMassProperties() after changing this.\n  // Use this property to limit the motion along any world axis. (1,1,1) will allow motion along all axes while (0,0,0) allows none.\n  // Use this property to limit the rotational motion along any world axis. (1,1,1) will allow rotation along all axes while (0,0,0) allows none.\n  // World space bounding box of the body and its shapes.\n  // Indicates if the AABB needs to be updated before use.\n  // Total bounding radius of the Body including its shapes, relative to body.position.\n  constructor(options = {}) {\n    super();\n    this.id = Body.idCounter++;\n    this.index = -1;\n    this.world = null;\n    this.preStep = null;\n    this.postStep = null;\n    this.vlambda = new Vec3();\n    this.collisionFilterGroup = typeof options.collisionFilterGroup === 'number' ? options.collisionFilterGroup : 1;\n    this.collisionFilterMask = typeof options.collisionFilterMask === 'number' ? options.collisionFilterMask : -1;\n    this.collisionResponse = typeof options.collisionResponse === 'boolean' ? options.collisionResponse : true;\n    this.position = new Vec3();\n    this.previousPosition = new Vec3();\n    this.interpolatedPosition = new Vec3();\n    this.initPosition = new Vec3();\n\n    if (options.position) {\n      this.position.copy(options.position);\n      this.previousPosition.copy(options.position);\n      this.interpolatedPosition.copy(options.position);\n      this.initPosition.copy(options.position);\n    }\n\n    this.velocity = new Vec3();\n\n    if (options.velocity) {\n      this.velocity.copy(options.velocity);\n    }\n\n    this.initVelocity = new Vec3();\n    this.force = new Vec3();\n    const mass = typeof options.mass === 'number' ? options.mass : 0;\n    this.mass = mass;\n    this.invMass = mass > 0 ? 1.0 / mass : 0;\n    this.material = options.material || null;\n    this.linearDamping = typeof options.linearDamping === 'number' ? options.linearDamping : 0.01;\n    this.type = mass <= 0.0 ? Body.STATIC : Body.DYNAMIC;\n\n    if (typeof options.type === typeof Body.STATIC) {\n      this.type = options.type;\n    }\n\n    this.allowSleep = typeof options.allowSleep !== 'undefined' ? options.allowSleep : true;\n    this.sleepState = 0;\n    this.sleepSpeedLimit = typeof options.sleepSpeedLimit !== 'undefined' ? options.sleepSpeedLimit : 0.1;\n    this.sleepTimeLimit = typeof options.sleepTimeLimit !== 'undefined' ? options.sleepTimeLimit : 1;\n    this.timeLastSleepy = 0;\n    this.wakeUpAfterNarrowphase = false;\n    this.torque = new Vec3();\n    this.quaternion = new Quaternion();\n    this.initQuaternion = new Quaternion();\n    this.previousQuaternion = new Quaternion();\n    this.interpolatedQuaternion = new Quaternion();\n\n    if (options.quaternion) {\n      this.quaternion.copy(options.quaternion);\n      this.initQuaternion.copy(options.quaternion);\n      this.previousQuaternion.copy(options.quaternion);\n      this.interpolatedQuaternion.copy(options.quaternion);\n    }\n\n    this.angularVelocity = new Vec3();\n\n    if (options.angularVelocity) {\n      this.angularVelocity.copy(options.angularVelocity);\n    }\n\n    this.initAngularVelocity = new Vec3();\n    this.shapes = [];\n    this.shapeOffsets = [];\n    this.shapeOrientations = [];\n    this.inertia = new Vec3();\n    this.invInertia = new Vec3();\n    this.invInertiaWorld = new Mat3();\n    this.invMassSolve = 0;\n    this.invInertiaSolve = new Vec3();\n    this.invInertiaWorldSolve = new Mat3();\n    this.fixedRotation = typeof options.fixedRotation !== 'undefined' ? options.fixedRotation : false;\n    this.angularDamping = typeof options.angularDamping !== 'undefined' ? options.angularDamping : 0.01;\n    this.linearFactor = new Vec3(1, 1, 1);\n\n    if (options.linearFactor) {\n      this.linearFactor.copy(options.linearFactor);\n    }\n\n    this.angularFactor = new Vec3(1, 1, 1);\n\n    if (options.angularFactor) {\n      this.angularFactor.copy(options.angularFactor);\n    }\n\n    this.aabb = new AABB();\n    this.aabbNeedsUpdate = true;\n    this.boundingRadius = 0;\n    this.wlambda = new Vec3();\n\n    if (options.shape) {\n      this.addShape(options.shape);\n    }\n\n    this.updateMassProperties();\n  }\n  /**\r\n   * Wake the body up.\r\n   * @method wakeUp\r\n   */\n\n\n  wakeUp() {\n    const prevState = this.sleepState;\n    this.sleepState = 0;\n    this.wakeUpAfterNarrowphase = false;\n\n    if (prevState === Body.SLEEPING) {\n      this.dispatchEvent(Body.wakeupEvent);\n    }\n  }\n  /**\r\n   * Force body sleep\r\n   * @method sleep\r\n   */\n\n\n  sleep() {\n    this.sleepState = Body.SLEEPING;\n    this.velocity.set(0, 0, 0);\n    this.angularVelocity.set(0, 0, 0);\n    this.wakeUpAfterNarrowphase = false;\n  }\n  /**\r\n   * Called every timestep to update internal sleep timer and change sleep state if needed.\r\n   * @method sleepTick\r\n   * @param {Number} time The world time in seconds\r\n   */\n\n\n  sleepTick(time) {\n    if (this.allowSleep) {\n      const sleepState = this.sleepState;\n      const speedSquared = this.velocity.lengthSquared() + this.angularVelocity.lengthSquared();\n      const speedLimitSquared = this.sleepSpeedLimit ** 2;\n\n      if (sleepState === Body.AWAKE && speedSquared < speedLimitSquared) {\n        this.sleepState = Body.SLEEPY; // Sleepy\n\n        this.timeLastSleepy = time;\n        this.dispatchEvent(Body.sleepyEvent);\n      } else if (sleepState === Body.SLEEPY && speedSquared > speedLimitSquared) {\n        this.wakeUp(); // Wake up\n      } else if (sleepState === Body.SLEEPY && time - this.timeLastSleepy > this.sleepTimeLimit) {\n        this.sleep(); // Sleeping\n\n        this.dispatchEvent(Body.sleepEvent);\n      }\n    }\n  }\n  /**\r\n   * If the body is sleeping, it should be immovable / have infinite mass during solve. We solve it by having a separate \"solve mass\".\r\n   * @method updateSolveMassProperties\r\n   */\n\n\n  updateSolveMassProperties() {\n    if (this.sleepState === Body.SLEEPING || this.type === Body.KINEMATIC) {\n      this.invMassSolve = 0;\n      this.invInertiaSolve.setZero();\n      this.invInertiaWorldSolve.setZero();\n    } else {\n      this.invMassSolve = this.invMass;\n      this.invInertiaSolve.copy(this.invInertia);\n      this.invInertiaWorldSolve.copy(this.invInertiaWorld);\n    }\n  }\n  /**\r\n   * Convert a world point to local body frame.\r\n   * @method pointToLocalFrame\r\n   * @param  {Vec3} worldPoint\r\n   * @param  {Vec3} result\r\n   * @return {Vec3}\r\n   */\n\n\n  pointToLocalFrame(worldPoint, result = new Vec3()) {\n    worldPoint.vsub(this.position, result);\n    this.quaternion.conjugate().vmult(result, result);\n    return result;\n  }\n  /**\r\n   * Convert a world vector to local body frame.\r\n   * @method vectorToLocalFrame\r\n   * @param  {Vec3} worldPoint\r\n   * @param  {Vec3} result\r\n   * @return {Vec3}\r\n   */\n\n\n  vectorToLocalFrame(worldVector, result = new Vec3()) {\n    this.quaternion.conjugate().vmult(worldVector, result);\n    return result;\n  }\n  /**\r\n   * Convert a local body point to world frame.\r\n   * @method pointToWorldFrame\r\n   * @param  {Vec3} localPoint\r\n   * @param  {Vec3} result\r\n   * @return {Vec3}\r\n   */\n\n\n  pointToWorldFrame(localPoint, result = new Vec3()) {\n    this.quaternion.vmult(localPoint, result);\n    result.vadd(this.position, result);\n    return result;\n  }\n  /**\r\n   * Convert a local body point to world frame.\r\n   * @method vectorToWorldFrame\r\n   * @param  {Vec3} localVector\r\n   * @param  {Vec3} result\r\n   * @return {Vec3}\r\n   */\n\n\n  vectorToWorldFrame(localVector, result = new Vec3()) {\n    this.quaternion.vmult(localVector, result);\n    return result;\n  }\n  /**\r\n   * Add a shape to the body with a local offset and orientation.\r\n   * @method addShape\r\n   * @param {Shape} shape\r\n   * @param {Vec3} [_offset]\r\n   * @param {Quaternion} [_orientation]\r\n   * @return {Body} The body object, for chainability.\r\n   */\n\n\n  addShape(shape, _offset, _orientation) {\n    const offset = new Vec3();\n    const orientation = new Quaternion();\n\n    if (_offset) {\n      offset.copy(_offset);\n    }\n\n    if (_orientation) {\n      orientation.copy(_orientation);\n    }\n\n    this.shapes.push(shape);\n    this.shapeOffsets.push(offset);\n    this.shapeOrientations.push(orientation);\n    this.updateMassProperties();\n    this.updateBoundingRadius();\n    this.aabbNeedsUpdate = true;\n    shape.body = this;\n    return this;\n  }\n  /**\r\n   * Update the bounding radius of the body. Should be done if any of the shapes are changed.\r\n   * @method updateBoundingRadius\r\n   */\n\n\n  updateBoundingRadius() {\n    const shapes = this.shapes;\n    const shapeOffsets = this.shapeOffsets;\n    const N = shapes.length;\n    let radius = 0;\n\n    for (let i = 0; i !== N; i++) {\n      const shape = shapes[i];\n      shape.updateBoundingSphereRadius();\n      const offset = shapeOffsets[i].length();\n      const r = shape.boundingSphereRadius;\n\n      if (offset + r > radius) {\n        radius = offset + r;\n      }\n    }\n\n    this.boundingRadius = radius;\n  }\n  /**\r\n   * Updates the .aabb\r\n   * @method computeAABB\r\n   * @todo rename to updateAABB()\r\n   */\n\n\n  computeAABB() {\n    const shapes = this.shapes;\n    const shapeOffsets = this.shapeOffsets;\n    const shapeOrientations = this.shapeOrientations;\n    const N = shapes.length;\n    const offset = tmpVec;\n    const orientation = tmpQuat$1;\n    const bodyQuat = this.quaternion;\n    const aabb = this.aabb;\n    const shapeAABB = computeAABB_shapeAABB;\n\n    for (let i = 0; i !== N; i++) {\n      const shape = shapes[i]; // Get shape world position\n\n      bodyQuat.vmult(shapeOffsets[i], offset);\n      offset.vadd(this.position, offset); // Get shape world quaternion\n\n      bodyQuat.mult(shapeOrientations[i], orientation); // Get shape AABB\n\n      shape.calculateWorldAABB(offset, orientation, shapeAABB.lowerBound, shapeAABB.upperBound);\n\n      if (i === 0) {\n        aabb.copy(shapeAABB);\n      } else {\n        aabb.extend(shapeAABB);\n      }\n    }\n\n    this.aabbNeedsUpdate = false;\n  }\n  /**\r\n   * Update .inertiaWorld and .invInertiaWorld\r\n   * @method updateInertiaWorld\r\n   */\n\n\n  updateInertiaWorld(force) {\n    const I = this.invInertia;\n\n    if (I.x === I.y && I.y === I.z && !force) ; else {\n      const m1 = uiw_m1;\n      const m2 = uiw_m2;\n      m1.setRotationFromQuaternion(this.quaternion);\n      m1.transpose(m2);\n      m1.scale(I, m1);\n      m1.mmult(m2, this.invInertiaWorld);\n    }\n  }\n\n  applyForce(force, relativePoint) {\n    if (this.type !== Body.DYNAMIC) {\n      // Needed?\n      return;\n    } // Compute produced rotational force\n\n\n    const rotForce = Body_applyForce_rotForce;\n    relativePoint.cross(force, rotForce); // Add linear force\n\n    this.force.vadd(force, this.force); // Add rotational force\n\n    this.torque.vadd(rotForce, this.torque);\n  }\n\n  applyLocalForce(localForce, localPoint) {\n    if (this.type !== Body.DYNAMIC) {\n      return;\n    }\n\n    const worldForce = Body_applyLocalForce_worldForce;\n    const relativePointWorld = Body_applyLocalForce_relativePointWorld; // Transform the force vector to world space\n\n    this.vectorToWorldFrame(localForce, worldForce);\n    this.vectorToWorldFrame(localPoint, relativePointWorld);\n    this.applyForce(worldForce, relativePointWorld);\n  }\n\n  applyImpulse(impulse, relativePoint) {\n    if (this.type !== Body.DYNAMIC) {\n      return;\n    } // Compute point position relative to the body center\n\n\n    const r = relativePoint; // Compute produced central impulse velocity\n\n    const velo = Body_applyImpulse_velo;\n    velo.copy(impulse);\n    velo.scale(this.invMass, velo); // Add linear impulse\n\n    this.velocity.vadd(velo, this.velocity); // Compute produced rotational impulse velocity\n\n    const rotVelo = Body_applyImpulse_rotVelo;\n    r.cross(impulse, rotVelo);\n    /*\r\n     rotVelo.x *= this.invInertia.x;\r\n     rotVelo.y *= this.invInertia.y;\r\n     rotVelo.z *= this.invInertia.z;\r\n     */\n\n    this.invInertiaWorld.vmult(rotVelo, rotVelo); // Add rotational Impulse\n\n    this.angularVelocity.vadd(rotVelo, this.angularVelocity);\n  }\n\n  applyLocalImpulse(localImpulse, localPoint) {\n    if (this.type !== Body.DYNAMIC) {\n      return;\n    }\n\n    const worldImpulse = Body_applyLocalImpulse_worldImpulse;\n    const relativePointWorld = Body_applyLocalImpulse_relativePoint; // Transform the force vector to world space\n\n    this.vectorToWorldFrame(localImpulse, worldImpulse);\n    this.vectorToWorldFrame(localPoint, relativePointWorld);\n    this.applyImpulse(worldImpulse, relativePointWorld);\n  }\n  /**\r\n   * Should be called whenever you change the body shape or mass.\r\n   * @method updateMassProperties\r\n   */\n\n\n  updateMassProperties() {\n    const halfExtents = Body_updateMassProperties_halfExtents;\n    this.invMass = this.mass > 0 ? 1.0 / this.mass : 0;\n    const I = this.inertia;\n    const fixed = this.fixedRotation; // Approximate with AABB box\n\n    this.computeAABB();\n    halfExtents.set((this.aabb.upperBound.x - this.aabb.lowerBound.x) / 2, (this.aabb.upperBound.y - this.aabb.lowerBound.y) / 2, (this.aabb.upperBound.z - this.aabb.lowerBound.z) / 2);\n    Box.calculateInertia(halfExtents, this.mass, I);\n    this.invInertia.set(I.x > 0 && !fixed ? 1.0 / I.x : 0, I.y > 0 && !fixed ? 1.0 / I.y : 0, I.z > 0 && !fixed ? 1.0 / I.z : 0);\n    this.updateInertiaWorld(true);\n  }\n  /**\r\n   * Get world velocity of a point in the body.\r\n   * @method getVelocityAtWorldPoint\r\n   * @param  {Vec3} worldPoint\r\n   * @param  {Vec3} result\r\n   * @return {Vec3} The result vector.\r\n   */\n\n\n  getVelocityAtWorldPoint(worldPoint, result) {\n    const r = new Vec3();\n    worldPoint.vsub(this.position, r);\n    this.angularVelocity.cross(r, result);\n    this.velocity.vadd(result, result);\n    return result;\n  }\n  /**\r\n   * Move the body forward in time.\r\n   * @param {number} dt Time step\r\n   * @param {boolean} quatNormalize Set to true to normalize the body quaternion\r\n   * @param {boolean} quatNormalizeFast If the quaternion should be normalized using \"fast\" quaternion normalization\r\n   */\n\n\n  integrate(dt, quatNormalize, quatNormalizeFast) {\n    // Save previous position\n    this.previousPosition.copy(this.position);\n    this.previousQuaternion.copy(this.quaternion);\n\n    if (!(this.type === Body.DYNAMIC || this.type === Body.KINEMATIC) || this.sleepState === Body.SLEEPING) {\n      // Only for dynamic\n      return;\n    }\n\n    const velo = this.velocity;\n    const angularVelo = this.angularVelocity;\n    const pos = this.position;\n    const force = this.force;\n    const torque = this.torque;\n    const quat = this.quaternion;\n    const invMass = this.invMass;\n    const invInertia = this.invInertiaWorld;\n    const linearFactor = this.linearFactor;\n    const iMdt = invMass * dt;\n    velo.x += force.x * iMdt * linearFactor.x;\n    velo.y += force.y * iMdt * linearFactor.y;\n    velo.z += force.z * iMdt * linearFactor.z;\n    const e = invInertia.elements;\n    const angularFactor = this.angularFactor;\n    const tx = torque.x * angularFactor.x;\n    const ty = torque.y * angularFactor.y;\n    const tz = torque.z * angularFactor.z;\n    angularVelo.x += dt * (e[0] * tx + e[1] * ty + e[2] * tz);\n    angularVelo.y += dt * (e[3] * tx + e[4] * ty + e[5] * tz);\n    angularVelo.z += dt * (e[6] * tx + e[7] * ty + e[8] * tz); // Use new velocity  - leap frog\n\n    pos.x += velo.x * dt;\n    pos.y += velo.y * dt;\n    pos.z += velo.z * dt;\n    quat.integrate(this.angularVelocity, dt, this.angularFactor, quat);\n\n    if (quatNormalize) {\n      if (quatNormalizeFast) {\n        quat.normalizeFast();\n      } else {\n        quat.normalize();\n      }\n    }\n\n    this.aabbNeedsUpdate = true; // Update world inertia\n\n    this.updateInertiaWorld();\n  }\n\n}\n/**\r\n * Dispatched after two bodies collide. This event is dispatched on each\r\n * of the two bodies involved in the collision.\r\n * @event collide\r\n * @param {Body} body The body that was involved in the collision.\r\n * @param {ContactEquation} contact The details of the collision.\r\n */\n\nBody.COLLIDE_EVENT_NAME = 'collide';\n/**\r\n * A dynamic body is fully simulated. Can be moved manually by the user, but normally they move according to forces. A dynamic body can collide with all body types. A dynamic body always has finite, non-zero mass.\r\n * @static\r\n * @property DYNAMIC\r\n * @type {Number}\r\n */\n\nBody.DYNAMIC = 1;\n/**\r\n * A static body does not move during simulation and behaves as if it has infinite mass. Static bodies can be moved manually by setting the position of the body. The velocity of a static body is always zero. Static bodies do not collide with other static or kinematic bodies.\r\n * @static\r\n * @property STATIC\r\n * @type {Number}\r\n */\n\nBody.STATIC = 2;\n/**\r\n * A kinematic body moves under simulation according to its velocity. They do not respond to forces. They can be moved manually, but normally a kinematic body is moved by setting its velocity. A kinematic body behaves as if it has infinite mass. Kinematic bodies do not collide with other static or kinematic bodies.\r\n * @static\r\n * @property KINEMATIC\r\n * @type {Number}\r\n */\n\nBody.KINEMATIC = 4;\n/**\r\n * @static\r\n * @property AWAKE\r\n * @type {number}\r\n */\n\nBody.AWAKE = BODY_SLEEP_STATES.AWAKE;\nBody.SLEEPY = BODY_SLEEP_STATES.SLEEPY;\nBody.SLEEPING = BODY_SLEEP_STATES.SLEEPING;\nBody.idCounter = 0;\n/**\r\n * Dispatched after a sleeping body has woken up.\r\n * @event wakeup\r\n */\n\nBody.wakeupEvent = {\n  type: 'wakeup'\n};\n/**\r\n * Dispatched after a body has gone in to the sleepy state.\r\n * @event sleepy\r\n */\n\nBody.sleepyEvent = {\n  type: 'sleepy'\n};\n/**\r\n * Dispatched after a body has fallen asleep.\r\n * @event sleep\r\n */\n\nBody.sleepEvent = {\n  type: 'sleep'\n};\nconst tmpVec = new Vec3();\nconst tmpQuat$1 = new Quaternion();\nconst computeAABB_shapeAABB = new AABB();\nconst uiw_m1 = new Mat3();\nconst uiw_m2 = new Mat3();\n/**\r\n * Apply force to a world point. This could for example be a point on the Body surface. Applying force this way will add to Body.force and Body.torque.\r\n * @method applyForce\r\n * @param  {Vec3} force The amount of force to add.\r\n * @param  {Vec3} relativePoint A point relative to the center of mass to apply the force on.\r\n */\n\nconst Body_applyForce_rotForce = new Vec3();\n/**\r\n * Apply force to a local point in the body.\r\n * @method applyLocalForce\r\n * @param  {Vec3} force The force vector to apply, defined locally in the body frame.\r\n * @param  {Vec3} localPoint A local point in the body to apply the force on.\r\n */\n\nconst Body_applyLocalForce_worldForce = new Vec3();\nconst Body_applyLocalForce_relativePointWorld = new Vec3();\n/**\r\n * Apply impulse to a world point. This could for example be a point on the Body surface. An impulse is a force added to a body during a short period of time (impulse = force * time). Impulses will be added to Body.velocity and Body.angularVelocity.\r\n * @method applyImpulse\r\n * @param  {Vec3} impulse The amount of impulse to add.\r\n * @param  {Vec3} relativePoint A point relative to the center of mass to apply the force on.\r\n */\n\nconst Body_applyImpulse_velo = new Vec3();\nconst Body_applyImpulse_rotVelo = new Vec3();\n/**\r\n * Apply locally-defined impulse to a local point in the body.\r\n * @method applyLocalImpulse\r\n * @param  {Vec3} force The force vector to apply, defined locally in the body frame.\r\n * @param  {Vec3} localPoint A local point in the body to apply the force on.\r\n */\n\nconst Body_applyLocalImpulse_worldImpulse = new Vec3();\nconst Body_applyLocalImpulse_relativePoint = new Vec3();\nconst Body_updateMassProperties_halfExtents = new Vec3();\n\n/**\n * Base class for broadphase implementations\n * @class Broadphase\n * @constructor\n * @author schteppe\n */\nclass Broadphase {\n  // The world to search for collisions in.\n  // If set to true, the broadphase uses bounding boxes for intersection test, else it uses bounding spheres.\n  // Set to true if the objects in the world moved.\n  constructor() {\n    this.world = null;\n    this.useBoundingBoxes = false;\n    this.dirty = true;\n  }\n  /**\n   * Get the collision pairs from the world\n   * @method collisionPairs\n   * @param {World} world The world to search in\n   * @param {Array} p1 Empty array to be filled with body objects\n   * @param {Array} p2 Empty array to be filled with body objects\n   */\n\n\n  collisionPairs(world, p1, p2) {\n    throw new Error('collisionPairs not implemented for this BroadPhase class!');\n  }\n  /**\n   * Check if a body pair needs to be intersection tested at all.\n   * @method needBroadphaseCollision\n   * @param {Body} bodyA\n   * @param {Body} bodyB\n   * @return {bool}\n   */\n\n\n  needBroadphaseCollision(bodyA, bodyB) {\n    // Check collision filter masks\n    if ((bodyA.collisionFilterGroup & bodyB.collisionFilterMask) === 0 || (bodyB.collisionFilterGroup & bodyA.collisionFilterMask) === 0) {\n      return false;\n    } // Check types\n\n\n    if (((bodyA.type & Body.STATIC) !== 0 || bodyA.sleepState === Body.SLEEPING) && ((bodyB.type & Body.STATIC) !== 0 || bodyB.sleepState === Body.SLEEPING)) {\n      // Both bodies are static or sleeping. Skip.\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * Check if the bounding volumes of two bodies intersect.\n   * @method intersectionTest\n   * @param {Body} bodyA\n   * @param {Body} bodyB\n   * @param {array} pairs1\n   * @param {array} pairs2\n   */\n\n\n  intersectionTest(bodyA, bodyB, pairs1, pairs2) {\n    if (this.useBoundingBoxes) {\n      this.doBoundingBoxBroadphase(bodyA, bodyB, pairs1, pairs2);\n    } else {\n      this.doBoundingSphereBroadphase(bodyA, bodyB, pairs1, pairs2);\n    }\n  }\n\n  doBoundingSphereBroadphase(bodyA, bodyB, pairs1, pairs2) {\n    const r = Broadphase_collisionPairs_r;\n    bodyB.position.vsub(bodyA.position, r);\n    const boundingRadiusSum2 = (bodyA.boundingRadius + bodyB.boundingRadius) ** 2;\n    const norm2 = r.lengthSquared();\n\n    if (norm2 < boundingRadiusSum2) {\n      pairs1.push(bodyA);\n      pairs2.push(bodyB);\n    }\n  }\n  /**\n   * Check if the bounding boxes of two bodies are intersecting.\n   * @method doBoundingBoxBroadphase\n   * @param {Body} bodyA\n   * @param {Body} bodyB\n   * @param {Array} pairs1\n   * @param {Array} pairs2\n   */\n\n\n  doBoundingBoxBroadphase(bodyA, bodyB, pairs1, pairs2) {\n    if (bodyA.aabbNeedsUpdate) {\n      bodyA.computeAABB();\n    }\n\n    if (bodyB.aabbNeedsUpdate) {\n      bodyB.computeAABB();\n    } // Check AABB / AABB\n\n\n    if (bodyA.aabb.overlaps(bodyB.aabb)) {\n      pairs1.push(bodyA);\n      pairs2.push(bodyB);\n    }\n  }\n\n  makePairsUnique(pairs1, pairs2) {\n    const t = Broadphase_makePairsUnique_temp;\n    const p1 = Broadphase_makePairsUnique_p1;\n    const p2 = Broadphase_makePairsUnique_p2;\n    const N = pairs1.length;\n\n    for (let i = 0; i !== N; i++) {\n      p1[i] = pairs1[i];\n      p2[i] = pairs2[i];\n    }\n\n    pairs1.length = 0;\n    pairs2.length = 0;\n\n    for (let i = 0; i !== N; i++) {\n      const id1 = p1[i].id;\n      const id2 = p2[i].id;\n      const key = id1 < id2 ? id1 + \",\" + id2 : id2 + \",\" + id1;\n      t[key] = i;\n      t.keys.push(key);\n    }\n\n    for (let i = 0; i !== t.keys.length; i++) {\n      const key = t.keys.pop();\n      const pairIndex = t[key];\n      pairs1.push(p1[pairIndex]);\n      pairs2.push(p2[pairIndex]);\n      delete t[key];\n    }\n  }\n  /**\n   * To be implemented by subcasses\n   * @method setWorld\n   * @param {World} world\n   */\n\n\n  setWorld(world) {}\n  /**\n   * Returns all the bodies within the AABB.\n   * @method aabbQuery\n   * @param  {World} world\n   * @param  {AABB} aabb\n   * @param  {array} result An array to store resulting bodies in.\n   * @return {array}\n   */\n\n\n  aabbQuery(world, aabb, result) {\n    console.warn('.aabbQuery is not implemented in this Broadphase subclass.');\n    return [];\n  }\n\n}\n/**\n * Check if the bounding spheres of two bodies are intersecting.\n * @method doBoundingSphereBroadphase\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Array} pairs1 bodyA is appended to this array if intersection\n * @param {Array} pairs2 bodyB is appended to this array if intersection\n */\n\nconst // Temp objects\nBroadphase_collisionPairs_r = new Vec3();\n/**\n * Removes duplicate pairs from the pair arrays.\n * @method makePairsUnique\n * @param {Array} pairs1\n * @param {Array} pairs2\n */\n\nconst Broadphase_makePairsUnique_temp = {\n  keys: []\n};\nconst Broadphase_makePairsUnique_p1 = [];\nconst Broadphase_makePairsUnique_p2 = [];\n\nBroadphase.boundingSphereCheck = (bodyA, bodyB) => {\n  const dist = new Vec3(); // bsc_dist;\n\n  bodyA.position.vsub(bodyB.position, dist);\n  const sa = bodyA.shapes[0];\n  const sb = bodyB.shapes[0];\n  return Math.pow(sa.boundingSphereRadius + sb.boundingSphereRadius, 2) > dist.lengthSquared();\n};\n\n/**\r\n * Axis aligned uniform grid broadphase.\r\n * @class GridBroadphase\r\n * @constructor\r\n * @extends Broadphase\r\n * @todo Needs support for more than just planes and spheres.\r\n * @param {Vec3} aabbMin\r\n * @param {Vec3} aabbMax\r\n * @param {Number} nx Number of boxes along x\r\n * @param {Number} ny Number of boxes along y\r\n * @param {Number} nz Number of boxes along z\r\n */\nclass GridBroadphase extends Broadphase {\n  constructor(aabbMin = new Vec3(100, 100, 100), aabbMax = new Vec3(-100, -100, -100), nx = 10, ny = 10, nz = 10) {\n    super();\n    this.nx = nx;\n    this.ny = ny;\n    this.nz = nz;\n    this.aabbMin = aabbMin;\n    this.aabbMax = aabbMax;\n    const nbins = this.nx * this.ny * this.nz;\n\n    if (nbins <= 0) {\n      throw \"GridBroadphase: Each dimension's n must be >0\";\n    }\n\n    this.bins = [];\n    this.binLengths = []; //Rather than continually resizing arrays (thrashing the memory), just record length and allow them to grow\n\n    this.bins.length = nbins;\n    this.binLengths.length = nbins;\n\n    for (let i = 0; i < nbins; i++) {\n      this.bins[i] = [];\n      this.binLengths[i] = 0;\n    }\n  }\n\n  collisionPairs(world, pairs1, pairs2) {\n    const N = world.numObjects();\n    const bodies = world.bodies;\n    const max = this.aabbMax;\n    const min = this.aabbMin;\n    const nx = this.nx;\n    const ny = this.ny;\n    const nz = this.nz;\n    const xstep = ny * nz;\n    const ystep = nz;\n    const zstep = 1;\n    const xmax = max.x;\n    const ymax = max.y;\n    const zmax = max.z;\n    const xmin = min.x;\n    const ymin = min.y;\n    const zmin = min.z;\n    const xmult = nx / (xmax - xmin);\n    const ymult = ny / (ymax - ymin);\n    const zmult = nz / (zmax - zmin);\n    const binsizeX = (xmax - xmin) / nx;\n    const binsizeY = (ymax - ymin) / ny;\n    const binsizeZ = (zmax - zmin) / nz;\n    const binRadius = Math.sqrt(binsizeX * binsizeX + binsizeY * binsizeY + binsizeZ * binsizeZ) * 0.5;\n    const types = Shape.types;\n    const SPHERE = types.SPHERE;\n    const PLANE = types.PLANE;\n    const BOX = types.BOX;\n    const COMPOUND = types.COMPOUND;\n    const CONVEXPOLYHEDRON = types.CONVEXPOLYHEDRON;\n    const bins = this.bins;\n    const binLengths = this.binLengths;\n    const Nbins = this.bins.length; // Reset bins\n\n    for (let i = 0; i !== Nbins; i++) {\n      binLengths[i] = 0;\n    }\n\n    const ceil = Math.ceil;\n\n    function addBoxToBins(x0, y0, z0, x1, y1, z1, bi) {\n      let xoff0 = (x0 - xmin) * xmult | 0;\n      let yoff0 = (y0 - ymin) * ymult | 0;\n      let zoff0 = (z0 - zmin) * zmult | 0;\n      let xoff1 = ceil((x1 - xmin) * xmult);\n      let yoff1 = ceil((y1 - ymin) * ymult);\n      let zoff1 = ceil((z1 - zmin) * zmult);\n\n      if (xoff0 < 0) {\n        xoff0 = 0;\n      } else if (xoff0 >= nx) {\n        xoff0 = nx - 1;\n      }\n\n      if (yoff0 < 0) {\n        yoff0 = 0;\n      } else if (yoff0 >= ny) {\n        yoff0 = ny - 1;\n      }\n\n      if (zoff0 < 0) {\n        zoff0 = 0;\n      } else if (zoff0 >= nz) {\n        zoff0 = nz - 1;\n      }\n\n      if (xoff1 < 0) {\n        xoff1 = 0;\n      } else if (xoff1 >= nx) {\n        xoff1 = nx - 1;\n      }\n\n      if (yoff1 < 0) {\n        yoff1 = 0;\n      } else if (yoff1 >= ny) {\n        yoff1 = ny - 1;\n      }\n\n      if (zoff1 < 0) {\n        zoff1 = 0;\n      } else if (zoff1 >= nz) {\n        zoff1 = nz - 1;\n      }\n\n      xoff0 *= xstep;\n      yoff0 *= ystep;\n      zoff0 *= zstep;\n      xoff1 *= xstep;\n      yoff1 *= ystep;\n      zoff1 *= zstep;\n\n      for (let xoff = xoff0; xoff <= xoff1; xoff += xstep) {\n        for (let yoff = yoff0; yoff <= yoff1; yoff += ystep) {\n          for (let zoff = zoff0; zoff <= zoff1; zoff += zstep) {\n            const idx = xoff + yoff + zoff;\n            bins[idx][binLengths[idx]++] = bi;\n          }\n        }\n      }\n    } // Put all bodies into the bins\n\n\n    for (let i = 0; i !== N; i++) {\n      const bi = bodies[i];\n      const si = bi.shapes[0];\n\n      switch (si.type) {\n        case SPHERE:\n          {\n            const shape = si; // Put in bin\n            // check if overlap with other bins\n\n            const x = bi.position.x;\n            const y = bi.position.y;\n            const z = bi.position.z;\n            const r = shape.radius;\n            addBoxToBins(x - r, y - r, z - r, x + r, y + r, z + r, bi);\n            break;\n          }\n\n        case PLANE:\n          {\n            const shape = si;\n\n            if (shape.worldNormalNeedsUpdate) {\n              shape.computeWorldNormal(bi.quaternion);\n            }\n\n            const planeNormal = shape.worldNormal; //Relative position from origin of plane object to the first bin\n            //Incremented as we iterate through the bins\n\n            const xreset = xmin + binsizeX * 0.5 - bi.position.x;\n            const yreset = ymin + binsizeY * 0.5 - bi.position.y;\n            const zreset = zmin + binsizeZ * 0.5 - bi.position.z;\n            const d = GridBroadphase_collisionPairs_d;\n            d.set(xreset, yreset, zreset);\n\n            for (let xi = 0, xoff = 0; xi !== nx; xi++, xoff += xstep, d.y = yreset, d.x += binsizeX) {\n              for (let yi = 0, yoff = 0; yi !== ny; yi++, yoff += ystep, d.z = zreset, d.y += binsizeY) {\n                for (let zi = 0, zoff = 0; zi !== nz; zi++, zoff += zstep, d.z += binsizeZ) {\n                  if (d.dot(planeNormal) < binRadius) {\n                    const idx = xoff + yoff + zoff;\n                    bins[idx][binLengths[idx]++] = bi;\n                  }\n                }\n              }\n            }\n\n            break;\n          }\n\n        default:\n          {\n            if (bi.aabbNeedsUpdate) {\n              bi.computeAABB();\n            }\n\n            addBoxToBins(bi.aabb.lowerBound.x, bi.aabb.lowerBound.y, bi.aabb.lowerBound.z, bi.aabb.upperBound.x, bi.aabb.upperBound.y, bi.aabb.upperBound.z, bi);\n            break;\n          }\n      }\n    } // Check each bin\n\n\n    for (let i = 0; i !== Nbins; i++) {\n      const binLength = binLengths[i]; //Skip bins with no potential collisions\n\n      if (binLength > 1) {\n        const bin = bins[i]; // Do N^2 broadphase inside\n\n        for (let xi = 0; xi !== binLength; xi++) {\n          const bi = bin[xi];\n\n          for (let yi = 0; yi !== xi; yi++) {\n            const bj = bin[yi];\n\n            if (this.needBroadphaseCollision(bi, bj)) {\n              this.intersectionTest(bi, bj, pairs1, pairs2);\n            }\n          }\n        }\n      }\n    } //\tfor (let zi = 0, zoff=0; zi < nz; zi++, zoff+= zstep) {\n    //\t\tconsole.log(\"layer \"+zi);\n    //\t\tfor (let yi = 0, yoff=0; yi < ny; yi++, yoff += ystep) {\n    //\t\t\tconst row = '';\n    //\t\t\tfor (let xi = 0, xoff=0; xi < nx; xi++, xoff += xstep) {\n    //\t\t\t\tconst idx = xoff + yoff + zoff;\n    //\t\t\t\trow += ' ' + binLengths[idx];\n    //\t\t\t}\n    //\t\t\tconsole.log(row);\n    //\t\t}\n    //\t}\n\n\n    this.makePairsUnique(pairs1, pairs2);\n  }\n\n}\n/**\r\n * Get all the collision pairs in the physics world\r\n * @method collisionPairs\r\n * @param {World} world\r\n * @param {Array} pairs1\r\n * @param {Array} pairs2\r\n */\n\nconst GridBroadphase_collisionPairs_d = new Vec3();\n\n/**\r\n * Naive broadphase implementation, used in lack of better ones.\r\n * @class NaiveBroadphase\r\n * @constructor\r\n * @description The naive broadphase looks at all possible pairs without restriction, therefore it has complexity N^2 (which is bad)\r\n * @extends Broadphase\r\n */\nclass NaiveBroadphase extends Broadphase {\n  constructor() {\n    super();\n  }\n  /**\r\n   * Get all the collision pairs in the physics world\r\n   * @method collisionPairs\r\n   * @param {World} world\r\n   * @param {Array} pairs1\r\n   * @param {Array} pairs2\r\n   */\n\n\n  collisionPairs(world, pairs1, pairs2) {\n    const bodies = world.bodies;\n    const n = bodies.length;\n    let bi;\n    let bj; // Naive N^2 ftw!\n\n    for (let i = 0; i !== n; i++) {\n      for (let j = 0; j !== i; j++) {\n        bi = bodies[i];\n        bj = bodies[j];\n\n        if (!this.needBroadphaseCollision(bi, bj)) {\n          continue;\n        }\n\n        this.intersectionTest(bi, bj, pairs1, pairs2);\n      }\n    }\n  }\n  /**\r\n   * Returns all the bodies within an AABB.\r\n   * @method aabbQuery\r\n   * @param  {World} world\r\n   * @param  {AABB} aabb\r\n   * @param {array} result An array to store resulting bodies in.\r\n   * @return {array}\r\n   */\n\n\n  aabbQuery(world, aabb, result = []) {\n    for (let i = 0; i < world.bodies.length; i++) {\n      const b = world.bodies[i];\n\n      if (b.aabbNeedsUpdate) {\n        b.computeAABB();\n      } // Ugly hack until Body gets aabb\n\n\n      if (b.aabb.overlaps(aabb)) {\n        result.push(b);\n      }\n    }\n\n    return result;\n  }\n\n}\n\n/**\r\n * Storage for Ray casting data.\r\n * @class RaycastResult\r\n * @constructor\r\n */\nclass RaycastResult {\n  // The index of the hit triangle, if the hit shape was a trimesh.\n  // Distance to the hit. Will be set to -1 if there was no hit.\n  // If the ray should stop traversing the bodies.\n  constructor() {\n    this.rayFromWorld = new Vec3();\n    this.rayToWorld = new Vec3();\n    this.hitNormalWorld = new Vec3();\n    this.hitPointWorld = new Vec3();\n    this.hasHit = false;\n    this.shape = null;\n    this.body = null;\n    this.hitFaceIndex = -1;\n    this.distance = -1;\n    this.shouldStop = false;\n  }\n  /**\r\n   * Reset all result data.\r\n   * @method reset\r\n   */\n\n\n  reset() {\n    this.rayFromWorld.setZero();\n    this.rayToWorld.setZero();\n    this.hitNormalWorld.setZero();\n    this.hitPointWorld.setZero();\n    this.hasHit = false;\n    this.shape = null;\n    this.body = null;\n    this.hitFaceIndex = -1;\n    this.distance = -1;\n    this.shouldStop = false;\n  }\n  /**\r\n   * @method abort\r\n   */\n\n\n  abort() {\n    this.shouldStop = true;\n  }\n  /**\r\n   * @method set\r\n   * @param {Vec3} rayFromWorld\r\n   * @param {Vec3} rayToWorld\r\n   * @param {Vec3} hitNormalWorld\r\n   * @param {Vec3} hitPointWorld\r\n   * @param {Shape} shape\r\n   * @param {Body} body\r\n   * @param {number} distance\r\n   */\n\n\n  set(rayFromWorld, rayToWorld, hitNormalWorld, hitPointWorld, shape, body, distance) {\n    this.rayFromWorld.copy(rayFromWorld);\n    this.rayToWorld.copy(rayToWorld);\n    this.hitNormalWorld.copy(hitNormalWorld);\n    this.hitPointWorld.copy(hitPointWorld);\n    this.shape = shape;\n    this.body = body;\n    this.distance = distance;\n  }\n\n}\n\nconst RAY_MODES = {\n  CLOSEST: 1,\n  ANY: 2,\n  ALL: 4\n};\n\n/**\r\n * A line in 3D space that intersects bodies and return points.\r\n * @class Ray\r\n * @constructor\r\n * @param {Vec3} from\r\n * @param {Vec3} to\r\n */\nclass Ray {\n  // The precision of the ray. Used when checking parallelity etc.\n  // Set to true if you want the Ray to take .collisionResponse flags into account on bodies and shapes.\n  // If set to true, the ray skips any hits with normal.dot(rayDirection) < 0.\n  // The intersection mode. Should be Ray.ANY, Ray.ALL or Ray.CLOSEST.\n  // Current result object.\n  // Will be set to true during intersectWorld() if the ray hit anything.\n  // User-provided result callback. Will be used if mode is Ray.ALL.\n  constructor(from = new Vec3(), to = new Vec3()) {\n    this.from = from.clone();\n    this.to = to.clone();\n    this.direction = new Vec3();\n    this.precision = 0.0001;\n    this.checkCollisionResponse = true;\n    this.skipBackfaces = false;\n    this.collisionFilterMask = -1;\n    this.collisionFilterGroup = -1;\n    this.mode = Ray.ANY;\n    this.result = new RaycastResult();\n    this.hasHit = false;\n\n    this.callback = result => {};\n  }\n  /**\r\n   * Do itersection against all bodies in the given World.\r\n   * @method intersectWorld\r\n   * @param  {World} world\r\n   * @param  {object} options\r\n   * @return {Boolean} True if the ray hit anything, otherwise false.\r\n   */\n\n\n  intersectWorld(world, options) {\n    this.mode = options.mode || Ray.ANY;\n    this.result = options.result || new RaycastResult();\n    this.skipBackfaces = !!options.skipBackfaces;\n    this.collisionFilterMask = typeof options.collisionFilterMask !== 'undefined' ? options.collisionFilterMask : -1;\n    this.collisionFilterGroup = typeof options.collisionFilterGroup !== 'undefined' ? options.collisionFilterGroup : -1;\n    this.checkCollisionResponse = typeof options.checkCollisionResponse !== 'undefined' ? options.checkCollisionResponse : true;\n\n    if (options.from) {\n      this.from.copy(options.from);\n    }\n\n    if (options.to) {\n      this.to.copy(options.to);\n    }\n\n    this.callback = options.callback || (() => {});\n\n    this.hasHit = false;\n    this.result.reset();\n    this.updateDirection();\n    this.getAABB(tmpAABB);\n    tmpArray.length = 0;\n    world.broadphase.aabbQuery(world, tmpAABB, tmpArray);\n    this.intersectBodies(tmpArray);\n    return this.hasHit;\n  }\n  /**\r\n   * Shoot a ray at a body, get back information about the hit.\r\n   * @param {Body} body\r\n   * @param {RaycastResult} [result] Deprecated - set the result property of the Ray instead.\r\n   */\n\n\n  intersectBody(body, result) {\n    if (result) {\n      this.result = result;\n      this.updateDirection();\n    }\n\n    const checkCollisionResponse = this.checkCollisionResponse;\n\n    if (checkCollisionResponse && !body.collisionResponse) {\n      return;\n    }\n\n    if ((this.collisionFilterGroup & body.collisionFilterMask) === 0 || (body.collisionFilterGroup & this.collisionFilterMask) === 0) {\n      return;\n    }\n\n    const xi = intersectBody_xi;\n    const qi = intersectBody_qi;\n\n    for (let i = 0, N = body.shapes.length; i < N; i++) {\n      const shape = body.shapes[i];\n\n      if (checkCollisionResponse && !shape.collisionResponse) {\n        continue; // Skip\n      }\n\n      body.quaternion.mult(body.shapeOrientations[i], qi);\n      body.quaternion.vmult(body.shapeOffsets[i], xi);\n      xi.vadd(body.position, xi);\n      this.intersectShape(shape, qi, xi, body);\n\n      if (this.result.shouldStop) {\n        break;\n      }\n    }\n  }\n  /**\r\n   * @method intersectBodies\r\n   * @param {Array} bodies An array of Body objects.\r\n   * @param {RaycastResult} [result] Deprecated\r\n   */\n\n\n  intersectBodies(bodies, result) {\n    if (result) {\n      this.result = result;\n      this.updateDirection();\n    }\n\n    for (let i = 0, l = bodies.length; !this.result.shouldStop && i < l; i++) {\n      this.intersectBody(bodies[i]);\n    }\n  }\n  /**\r\n   * Updates the direction vector.\r\n   */\n\n\n  updateDirection() {\n    this.to.vsub(this.from, this.direction);\n    this.direction.normalize();\n  }\n\n  intersectShape(shape, quat, position, body) {\n    const from = this.from; // Checking boundingSphere\n\n    const distance = distanceFromIntersection(from, this.direction, position);\n\n    if (distance > shape.boundingSphereRadius) {\n      return;\n    }\n\n    const intersectMethod = this[shape.type];\n\n    if (intersectMethod) {\n      intersectMethod.call(this, shape, quat, position, body, shape);\n    }\n  }\n\n  _intersectBox(box, quat, position, body, reportedShape) {\n    return this._intersectConvex(box.convexPolyhedronRepresentation, quat, position, body, reportedShape);\n  }\n\n  _intersectPlane(shape, quat, position, body, reportedShape) {\n    const from = this.from;\n    const to = this.to;\n    const direction = this.direction; // Get plane normal\n\n    const worldNormal = new Vec3(0, 0, 1);\n    quat.vmult(worldNormal, worldNormal);\n    const len = new Vec3();\n    from.vsub(position, len);\n    const planeToFrom = len.dot(worldNormal);\n    to.vsub(position, len);\n    const planeToTo = len.dot(worldNormal);\n\n    if (planeToFrom * planeToTo > 0) {\n      // \"from\" and \"to\" are on the same side of the plane... bail out\n      return;\n    }\n\n    if (from.distanceTo(to) < planeToFrom) {\n      return;\n    }\n\n    const n_dot_dir = worldNormal.dot(direction);\n\n    if (Math.abs(n_dot_dir) < this.precision) {\n      // No intersection\n      return;\n    }\n\n    const planePointToFrom = new Vec3();\n    const dir_scaled_with_t = new Vec3();\n    const hitPointWorld = new Vec3();\n    from.vsub(position, planePointToFrom);\n    const t = -worldNormal.dot(planePointToFrom) / n_dot_dir;\n    direction.scale(t, dir_scaled_with_t);\n    from.vadd(dir_scaled_with_t, hitPointWorld);\n    this.reportIntersection(worldNormal, hitPointWorld, reportedShape, body, -1);\n  }\n  /**\r\n   * Get the world AABB of the ray.\r\n   */\n\n\n  getAABB(aabb) {\n    const {\n      lowerBound,\n      upperBound\n    } = aabb;\n    const to = this.to;\n    const from = this.from;\n    lowerBound.x = Math.min(to.x, from.x);\n    lowerBound.y = Math.min(to.y, from.y);\n    lowerBound.z = Math.min(to.z, from.z);\n    upperBound.x = Math.max(to.x, from.x);\n    upperBound.y = Math.max(to.y, from.y);\n    upperBound.z = Math.max(to.z, from.z);\n  }\n\n  _intersectHeightfield(shape, quat, position, body, reportedShape) {\n    const data = shape.data;\n    const w = shape.elementSize; // Convert the ray to local heightfield coordinates\n\n    const localRay = intersectHeightfield_localRay; //new Ray(this.from, this.to);\n\n    localRay.from.copy(this.from);\n    localRay.to.copy(this.to);\n    Transform.pointToLocalFrame(position, quat, localRay.from, localRay.from);\n    Transform.pointToLocalFrame(position, quat, localRay.to, localRay.to);\n    localRay.updateDirection(); // Get the index of the data points to test against\n\n    const index = intersectHeightfield_index;\n    let iMinX;\n    let iMinY;\n    let iMaxX;\n    let iMaxY; // Set to max\n\n    iMinX = iMinY = 0;\n    iMaxX = iMaxY = shape.data.length - 1;\n    const aabb = new AABB();\n    localRay.getAABB(aabb);\n    shape.getIndexOfPosition(aabb.lowerBound.x, aabb.lowerBound.y, index, true);\n    iMinX = Math.max(iMinX, index[0]);\n    iMinY = Math.max(iMinY, index[1]);\n    shape.getIndexOfPosition(aabb.upperBound.x, aabb.upperBound.y, index, true);\n    iMaxX = Math.min(iMaxX, index[0] + 1);\n    iMaxY = Math.min(iMaxY, index[1] + 1);\n\n    for (let i = iMinX; i < iMaxX; i++) {\n      for (let j = iMinY; j < iMaxY; j++) {\n        if (this.result.shouldStop) {\n          return;\n        }\n\n        shape.getAabbAtIndex(i, j, aabb);\n\n        if (!aabb.overlapsRay(localRay)) {\n          continue;\n        } // Lower triangle\n\n\n        shape.getConvexTrianglePillar(i, j, false);\n        Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);\n\n        this._intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, reportedShape, intersectConvexOptions);\n\n        if (this.result.shouldStop) {\n          return;\n        } // Upper triangle\n\n\n        shape.getConvexTrianglePillar(i, j, true);\n        Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);\n\n        this._intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, reportedShape, intersectConvexOptions);\n      }\n    }\n  }\n\n  _intersectSphere(sphere, quat, position, body, reportedShape) {\n    const from = this.from;\n    const to = this.to;\n    const r = sphere.radius;\n    const a = (to.x - from.x) ** 2 + (to.y - from.y) ** 2 + (to.z - from.z) ** 2;\n    const b = 2 * ((to.x - from.x) * (from.x - position.x) + (to.y - from.y) * (from.y - position.y) + (to.z - from.z) * (from.z - position.z));\n    const c = (from.x - position.x) ** 2 + (from.y - position.y) ** 2 + (from.z - position.z) ** 2 - r ** 2;\n    const delta = b ** 2 - 4 * a * c;\n    const intersectionPoint = Ray_intersectSphere_intersectionPoint;\n    const normal = Ray_intersectSphere_normal;\n\n    if (delta < 0) {\n      // No intersection\n      return;\n    } else if (delta === 0) {\n      // single intersection point\n      from.lerp(to, delta, intersectionPoint);\n      intersectionPoint.vsub(position, normal);\n      normal.normalize();\n      this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n    } else {\n      const d1 = (-b - Math.sqrt(delta)) / (2 * a);\n      const d2 = (-b + Math.sqrt(delta)) / (2 * a);\n\n      if (d1 >= 0 && d1 <= 1) {\n        from.lerp(to, d1, intersectionPoint);\n        intersectionPoint.vsub(position, normal);\n        normal.normalize();\n        this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n      }\n\n      if (this.result.shouldStop) {\n        return;\n      }\n\n      if (d2 >= 0 && d2 <= 1) {\n        from.lerp(to, d2, intersectionPoint);\n        intersectionPoint.vsub(position, normal);\n        normal.normalize();\n        this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n      }\n    }\n  }\n\n  _intersectConvex(shape, quat, position, body, reportedShape, options) {\n    const normal = intersectConvex_normal;\n    const vector = intersectConvex_vector;\n    const faceList = options && options.faceList || null; // Checking faces\n\n    const faces = shape.faces;\n    const vertices = shape.vertices;\n    const normals = shape.faceNormals;\n    const direction = this.direction;\n    const from = this.from;\n    const to = this.to;\n    const fromToDistance = from.distanceTo(to);\n    const Nfaces = faceList ? faceList.length : faces.length;\n    const result = this.result;\n\n    for (let j = 0; !result.shouldStop && j < Nfaces; j++) {\n      const fi = faceList ? faceList[j] : j;\n      const face = faces[fi];\n      const faceNormal = normals[fi];\n      const q = quat;\n      const x = position; // determine if ray intersects the plane of the face\n      // note: this works regardless of the direction of the face normal\n      // Get plane point in world coordinates...\n\n      vector.copy(vertices[face[0]]);\n      q.vmult(vector, vector);\n      vector.vadd(x, vector); // ...but make it relative to the ray from. We'll fix this later.\n\n      vector.vsub(from, vector); // Get plane normal\n\n      q.vmult(faceNormal, normal); // If this dot product is negative, we have something interesting\n\n      const dot = direction.dot(normal); // Bail out if ray and plane are parallel\n\n      if (Math.abs(dot) < this.precision) {\n        continue;\n      } // calc distance to plane\n\n\n      const scalar = normal.dot(vector) / dot; // if negative distance, then plane is behind ray\n\n      if (scalar < 0) {\n        continue;\n      } // if (dot < 0) {\n      // Intersection point is from + direction * scalar\n\n\n      direction.scale(scalar, intersectPoint);\n      intersectPoint.vadd(from, intersectPoint); // a is the point we compare points b and c with.\n\n      a.copy(vertices[face[0]]);\n      q.vmult(a, a);\n      x.vadd(a, a);\n\n      for (let i = 1; !result.shouldStop && i < face.length - 1; i++) {\n        // Transform 3 vertices to world coords\n        b.copy(vertices[face[i]]);\n        c.copy(vertices[face[i + 1]]);\n        q.vmult(b, b);\n        q.vmult(c, c);\n        x.vadd(b, b);\n        x.vadd(c, c);\n        const distance = intersectPoint.distanceTo(from);\n\n        if (!(pointInTriangle(intersectPoint, a, b, c) || pointInTriangle(intersectPoint, b, a, c)) || distance > fromToDistance) {\n          continue;\n        }\n\n        this.reportIntersection(normal, intersectPoint, reportedShape, body, fi);\n      } // }\n\n    }\n  }\n  /**\r\n   * @todo Optimize by transforming the world to local space first.\r\n   * @todo Use Octree lookup\r\n   */\n\n\n  _intersectTrimesh(mesh, quat, position, body, reportedShape, options) {\n    const normal = intersectTrimesh_normal;\n    const triangles = intersectTrimesh_triangles;\n    const treeTransform = intersectTrimesh_treeTransform;\n    const vector = intersectConvex_vector;\n    const localDirection = intersectTrimesh_localDirection;\n    const localFrom = intersectTrimesh_localFrom;\n    const localTo = intersectTrimesh_localTo;\n    const worldIntersectPoint = intersectTrimesh_worldIntersectPoint;\n    const worldNormal = intersectTrimesh_worldNormal;\n    const faceList = options && options.faceList || null; // Checking faces\n\n    const indices = mesh.indices;\n    const vertices = mesh.vertices; // const normals = mesh.faceNormals\n\n    const from = this.from;\n    const to = this.to;\n    const direction = this.direction;\n    treeTransform.position.copy(position);\n    treeTransform.quaternion.copy(quat); // Transform ray to local space!\n\n    Transform.vectorToLocalFrame(position, quat, direction, localDirection);\n    Transform.pointToLocalFrame(position, quat, from, localFrom);\n    Transform.pointToLocalFrame(position, quat, to, localTo);\n    localTo.x *= mesh.scale.x;\n    localTo.y *= mesh.scale.y;\n    localTo.z *= mesh.scale.z;\n    localFrom.x *= mesh.scale.x;\n    localFrom.y *= mesh.scale.y;\n    localFrom.z *= mesh.scale.z;\n    localTo.vsub(localFrom, localDirection);\n    localDirection.normalize();\n    const fromToDistanceSquared = localFrom.distanceSquared(localTo);\n    mesh.tree.rayQuery(this, treeTransform, triangles);\n\n    for (let i = 0, N = triangles.length; !this.result.shouldStop && i !== N; i++) {\n      const trianglesIndex = triangles[i];\n      mesh.getNormal(trianglesIndex, normal); // determine if ray intersects the plane of the face\n      // note: this works regardless of the direction of the face normal\n      // Get plane point in world coordinates...\n\n      mesh.getVertex(indices[trianglesIndex * 3], a); // ...but make it relative to the ray from. We'll fix this later.\n\n      a.vsub(localFrom, vector); // If this dot product is negative, we have something interesting\n\n      const dot = localDirection.dot(normal); // Bail out if ray and plane are parallel\n      // if (Math.abs( dot ) < this.precision){\n      //     continue;\n      // }\n      // calc distance to plane\n\n      const scalar = normal.dot(vector) / dot; // if negative distance, then plane is behind ray\n\n      if (scalar < 0) {\n        continue;\n      } // Intersection point is from + direction * scalar\n\n\n      localDirection.scale(scalar, intersectPoint);\n      intersectPoint.vadd(localFrom, intersectPoint); // Get triangle vertices\n\n      mesh.getVertex(indices[trianglesIndex * 3 + 1], b);\n      mesh.getVertex(indices[trianglesIndex * 3 + 2], c);\n      const squaredDistance = intersectPoint.distanceSquared(localFrom);\n\n      if (!(pointInTriangle(intersectPoint, b, a, c) || pointInTriangle(intersectPoint, a, b, c)) || squaredDistance > fromToDistanceSquared) {\n        continue;\n      } // transform intersectpoint and normal to world\n\n\n      Transform.vectorToWorldFrame(quat, normal, worldNormal);\n      Transform.pointToWorldFrame(position, quat, intersectPoint, worldIntersectPoint);\n      this.reportIntersection(worldNormal, worldIntersectPoint, reportedShape, body, trianglesIndex);\n    }\n\n    triangles.length = 0;\n  }\n  /**\r\n   * @return {boolean} True if the intersections should continue\r\n   */\n\n\n  reportIntersection(normal, hitPointWorld, shape, body, hitFaceIndex) {\n    const from = this.from;\n    const to = this.to;\n    const distance = from.distanceTo(hitPointWorld);\n    const result = this.result; // Skip back faces?\n\n    if (this.skipBackfaces && normal.dot(this.direction) > 0) {\n      return;\n    }\n\n    result.hitFaceIndex = typeof hitFaceIndex !== 'undefined' ? hitFaceIndex : -1;\n\n    switch (this.mode) {\n      case Ray.ALL:\n        this.hasHit = true;\n        result.set(from, to, normal, hitPointWorld, shape, body, distance);\n        result.hasHit = true;\n        this.callback(result);\n        break;\n\n      case Ray.CLOSEST:\n        // Store if closer than current closest\n        if (distance < result.distance || !result.hasHit) {\n          this.hasHit = true;\n          result.hasHit = true;\n          result.set(from, to, normal, hitPointWorld, shape, body, distance);\n        }\n\n        break;\n\n      case Ray.ANY:\n        // Report and stop.\n        this.hasHit = true;\n        result.hasHit = true;\n        result.set(from, to, normal, hitPointWorld, shape, body, distance);\n        result.shouldStop = true;\n        break;\n    }\n  }\n\n}\nRay.CLOSEST = 1;\nRay.ANY = 2;\nRay.ALL = 4;\nconst tmpAABB = new AABB();\nconst tmpArray = [];\nconst v1 = new Vec3();\nconst v2 = new Vec3();\n/*\r\n * As per \"Barycentric Technique\" as named here http://www.blackpawn.com/texts/pointinpoly/default.html But without the division\r\n */\n\nRay.pointInTriangle = pointInTriangle;\n\nfunction pointInTriangle(p, a, b, c) {\n  c.vsub(a, v0);\n  b.vsub(a, v1);\n  p.vsub(a, v2);\n  const dot00 = v0.dot(v0);\n  const dot01 = v0.dot(v1);\n  const dot02 = v0.dot(v2);\n  const dot11 = v1.dot(v1);\n  const dot12 = v1.dot(v2);\n  let u;\n  let v;\n  return (u = dot11 * dot02 - dot01 * dot12) >= 0 && (v = dot00 * dot12 - dot01 * dot02) >= 0 && u + v < dot00 * dot11 - dot01 * dot01;\n}\n\nconst intersectBody_xi = new Vec3();\nconst intersectBody_qi = new Quaternion();\nconst intersectPoint = new Vec3();\nconst a = new Vec3();\nconst b = new Vec3();\nconst c = new Vec3();\nRay.prototype[Shape.types.BOX] = Ray.prototype._intersectBox;\nRay.prototype[Shape.types.PLANE] = Ray.prototype._intersectPlane;\nconst intersectConvexOptions = {\n  faceList: [0]\n};\nconst worldPillarOffset = new Vec3();\nconst intersectHeightfield_localRay = new Ray();\nconst intersectHeightfield_index = [];\nRay.prototype[Shape.types.HEIGHTFIELD] = Ray.prototype._intersectHeightfield;\nconst Ray_intersectSphere_intersectionPoint = new Vec3();\nconst Ray_intersectSphere_normal = new Vec3();\nRay.prototype[Shape.types.SPHERE] = Ray.prototype._intersectSphere;\nconst intersectConvex_normal = new Vec3();\nconst intersectConvex_vector = new Vec3();\nRay.prototype[Shape.types.CONVEXPOLYHEDRON] = Ray.prototype._intersectConvex;\nconst intersectTrimesh_normal = new Vec3();\nconst intersectTrimesh_localDirection = new Vec3();\nconst intersectTrimesh_localFrom = new Vec3();\nconst intersectTrimesh_localTo = new Vec3();\nconst intersectTrimesh_worldNormal = new Vec3();\nconst intersectTrimesh_worldIntersectPoint = new Vec3();\nconst intersectTrimesh_localAABB = new AABB();\nconst intersectTrimesh_triangles = [];\nconst intersectTrimesh_treeTransform = new Transform();\nRay.prototype[Shape.types.TRIMESH] = Ray.prototype._intersectTrimesh;\nconst v0 = new Vec3();\nconst intersect = new Vec3();\n\nfunction distanceFromIntersection(from, direction, position) {\n  // v0 is vector from from to position\n  position.vsub(from, v0);\n  const dot = v0.dot(direction); // intersect = direction*dot + from\n\n  direction.scale(dot, intersect);\n  intersect.vadd(from, intersect);\n  const distance = position.distanceTo(intersect);\n  return distance;\n}\n\n/**\r\n * Sweep and prune broadphase along one axis.\r\n *\r\n * @class SAPBroadphase\r\n * @constructor\r\n * @param {World} [world]\r\n * @extends Broadphase\r\n */\nclass SAPBroadphase extends Broadphase {\n  // List of bodies currently in the broadphase.\n  // The world to search in.\n  // Axis to sort the bodies along. Set to 0 for x axis, and 1 for y axis. For best performance, choose an axis that the bodies are spread out more on.\n  constructor(world) {\n    super();\n    this.axisList = [];\n    this.world = null;\n    this.axisIndex = 0;\n    const axisList = this.axisList;\n\n    this._addBodyHandler = event => {\n      axisList.push(event.body);\n    };\n\n    this._removeBodyHandler = event => {\n      const idx = axisList.indexOf(event.body);\n\n      if (idx !== -1) {\n        axisList.splice(idx, 1);\n      }\n    };\n\n    if (world) {\n      this.setWorld(world);\n    }\n  }\n  /**\r\n   * Change the world\r\n   * @method setWorld\r\n   * @param  {World} world\r\n   */\n\n\n  setWorld(world) {\n    // Clear the old axis array\n    this.axisList.length = 0; // Add all bodies from the new world\n\n    for (let i = 0; i < world.bodies.length; i++) {\n      this.axisList.push(world.bodies[i]);\n    } // Remove old handlers, if any\n\n\n    world.removeEventListener('addBody', this._addBodyHandler);\n    world.removeEventListener('removeBody', this._removeBodyHandler); // Add handlers to update the list of bodies.\n\n    world.addEventListener('addBody', this._addBodyHandler);\n    world.addEventListener('removeBody', this._removeBodyHandler);\n    this.world = world;\n    this.dirty = true;\n  }\n  /**\r\n   * Collect all collision pairs\r\n   * @method collisionPairs\r\n   * @param  {World} world\r\n   * @param  {Array} p1\r\n   * @param  {Array} p2\r\n   */\n\n\n  collisionPairs(world, p1, p2) {\n    const bodies = this.axisList;\n    const N = bodies.length;\n    const axisIndex = this.axisIndex;\n    let i;\n    let j;\n\n    if (this.dirty) {\n      this.sortList();\n      this.dirty = false;\n    } // Look through the list\n\n\n    for (i = 0; i !== N; i++) {\n      const bi = bodies[i];\n\n      for (j = i + 1; j < N; j++) {\n        const bj = bodies[j];\n\n        if (!this.needBroadphaseCollision(bi, bj)) {\n          continue;\n        }\n\n        if (!SAPBroadphase.checkBounds(bi, bj, axisIndex)) {\n          break;\n        }\n\n        this.intersectionTest(bi, bj, p1, p2);\n      }\n    }\n  }\n\n  sortList() {\n    const axisList = this.axisList;\n    const axisIndex = this.axisIndex;\n    const N = axisList.length; // Update AABBs\n\n    for (let i = 0; i !== N; i++) {\n      const bi = axisList[i];\n\n      if (bi.aabbNeedsUpdate) {\n        bi.computeAABB();\n      }\n    } // Sort the list\n\n\n    if (axisIndex === 0) {\n      SAPBroadphase.insertionSortX(axisList);\n    } else if (axisIndex === 1) {\n      SAPBroadphase.insertionSortY(axisList);\n    } else if (axisIndex === 2) {\n      SAPBroadphase.insertionSortZ(axisList);\n    }\n  }\n  /**\r\n   * Computes the variance of the body positions and estimates the best\r\n   * axis to use. Will automatically set property .axisIndex.\r\n   * @method autoDetectAxis\r\n   */\n\n\n  autoDetectAxis() {\n    let sumX = 0;\n    let sumX2 = 0;\n    let sumY = 0;\n    let sumY2 = 0;\n    let sumZ = 0;\n    let sumZ2 = 0;\n    const bodies = this.axisList;\n    const N = bodies.length;\n    const invN = 1 / N;\n\n    for (let i = 0; i !== N; i++) {\n      const b = bodies[i];\n      const centerX = b.position.x;\n      sumX += centerX;\n      sumX2 += centerX * centerX;\n      const centerY = b.position.y;\n      sumY += centerY;\n      sumY2 += centerY * centerY;\n      const centerZ = b.position.z;\n      sumZ += centerZ;\n      sumZ2 += centerZ * centerZ;\n    }\n\n    const varianceX = sumX2 - sumX * sumX * invN;\n    const varianceY = sumY2 - sumY * sumY * invN;\n    const varianceZ = sumZ2 - sumZ * sumZ * invN;\n\n    if (varianceX > varianceY) {\n      if (varianceX > varianceZ) {\n        this.axisIndex = 0;\n      } else {\n        this.axisIndex = 2;\n      }\n    } else if (varianceY > varianceZ) {\n      this.axisIndex = 1;\n    } else {\n      this.axisIndex = 2;\n    }\n  }\n  /**\r\n   * Returns all the bodies within an AABB.\r\n   * @method aabbQuery\r\n   * @param  {World} world\r\n   * @param  {AABB} aabb\r\n   * @param {array} result An array to store resulting bodies in.\r\n   * @return {array}\r\n   */\n\n\n  aabbQuery(world, aabb, result = []) {\n    if (this.dirty) {\n      this.sortList();\n      this.dirty = false;\n    }\n\n    const axisIndex = this.axisIndex;\n    let axis = 'x';\n\n    if (axisIndex === 1) {\n      axis = 'y';\n    }\n\n    if (axisIndex === 2) {\n      axis = 'z';\n    }\n\n    const axisList = this.axisList;\n    const lower = aabb.lowerBound[axis];\n    const upper = aabb.upperBound[axis];\n\n    for (let i = 0; i < axisList.length; i++) {\n      const b = axisList[i];\n\n      if (b.aabbNeedsUpdate) {\n        b.computeAABB();\n      }\n\n      if (b.aabb.overlaps(aabb)) {\n        result.push(b);\n      }\n    }\n\n    return result;\n  }\n\n}\n/**\r\n * @static\r\n * @method insertionSortX\r\n * @param  {Array} a\r\n * @return {Array}\r\n */\n\nSAPBroadphase.insertionSortX = a => {\n  for (let i = 1, l = a.length; i < l; i++) {\n    const v = a[i];\n    let j;\n\n    for (j = i - 1; j >= 0; j--) {\n      if (a[j].aabb.lowerBound.x <= v.aabb.lowerBound.x) {\n        break;\n      }\n\n      a[j + 1] = a[j];\n    }\n\n    a[j + 1] = v;\n  }\n\n  return a;\n};\n/**\r\n * @static\r\n * @method insertionSortY\r\n * @param  {Array} a\r\n * @return {Array}\r\n */\n\n\nSAPBroadphase.insertionSortY = a => {\n  for (let i = 1, l = a.length; i < l; i++) {\n    const v = a[i];\n    let j;\n\n    for (j = i - 1; j >= 0; j--) {\n      if (a[j].aabb.lowerBound.y <= v.aabb.lowerBound.y) {\n        break;\n      }\n\n      a[j + 1] = a[j];\n    }\n\n    a[j + 1] = v;\n  }\n\n  return a;\n};\n/**\r\n * @static\r\n * @method insertionSortZ\r\n * @param  {Array} a\r\n * @return {Array}\r\n */\n\n\nSAPBroadphase.insertionSortZ = a => {\n  for (let i = 1, l = a.length; i < l; i++) {\n    const v = a[i];\n    let j;\n\n    for (j = i - 1; j >= 0; j--) {\n      if (a[j].aabb.lowerBound.z <= v.aabb.lowerBound.z) {\n        break;\n      }\n\n      a[j + 1] = a[j];\n    }\n\n    a[j + 1] = v;\n  }\n\n  return a;\n};\n/**\r\n * Check if the bounds of two bodies overlap, along the given SAP axis.\r\n * @static\r\n * @method checkBounds\r\n * @param  {Body} bi\r\n * @param  {Body} bj\r\n * @param  {Number} axisIndex\r\n * @return {Boolean}\r\n */\n\n\nSAPBroadphase.checkBounds = (bi, bj, axisIndex) => {\n  let biPos;\n  let bjPos;\n\n  if (axisIndex === 0) {\n    biPos = bi.position.x;\n    bjPos = bj.position.x;\n  } else if (axisIndex === 1) {\n    biPos = bi.position.y;\n    bjPos = bj.position.y;\n  } else if (axisIndex === 2) {\n    biPos = bi.position.z;\n    bjPos = bj.position.z;\n  }\n\n  const ri = bi.boundingRadius,\n        rj = bj.boundingRadius,\n        // boundA1 = biPos - ri,\n  boundA2 = biPos + ri,\n        boundB1 = bjPos - rj; // boundB2 = bjPos + rj;\n\n  return boundB1 < boundA2;\n};\n\nfunction Utils() {}\n/**\r\n * Extend an options object with default values.\r\n * @static\r\n * @method defaults\r\n * @param  {object} options The options object. May be falsy: in this case, a new object is created and returned.\r\n * @param  {object} defaults An object containing default values.\r\n * @return {object} The modified options object.\r\n */\n\nUtils.defaults = (options = {}, defaults) => {\n  for (let key in defaults) {\n    if (!(key in options)) {\n      options[key] = defaults[key];\n    }\n  }\n\n  return options;\n};\n\n/**\r\n * Constraint base class\r\n * @class Constraint\r\n * @author schteppe\r\n * @constructor\r\n * @param {Body} bodyA\r\n * @param {Body} bodyB\r\n * @param {object} [options]\r\n * @param {boolean} [options.collideConnected=true]\r\n * @param {boolean} [options.wakeUpBodies=true]\r\n */\nclass Constraint {\n  // Equations to be solved in this constraint.\n  // Set to true if you want the bodies to collide when they are connected.\n  constructor(bodyA, bodyB, options = {}) {\n    options = Utils.defaults(options, {\n      collideConnected: true,\n      wakeUpBodies: true\n    });\n    this.equations = [];\n    this.bodyA = bodyA;\n    this.bodyB = bodyB;\n    this.id = Constraint.idCounter++;\n    this.collideConnected = options.collideConnected;\n\n    if (options.wakeUpBodies) {\n      if (bodyA) {\n        bodyA.wakeUp();\n      }\n\n      if (bodyB) {\n        bodyB.wakeUp();\n      }\n    }\n  }\n  /**\r\n   * Update all the equations with data.\r\n   * @method update\r\n   */\n\n\n  update() {\n    throw new Error('method update() not implmemented in this Constraint subclass!');\n  }\n  /**\r\n   * Enables all equations in the constraint.\r\n   * @method enable\r\n   */\n\n\n  enable() {\n    const eqs = this.equations;\n\n    for (let i = 0; i < eqs.length; i++) {\n      eqs[i].enabled = true;\n    }\n  }\n  /**\r\n   * Disables all equations in the constraint.\r\n   * @method disable\r\n   */\n\n\n  disable() {\n    const eqs = this.equations;\n\n    for (let i = 0; i < eqs.length; i++) {\n      eqs[i].enabled = false;\n    }\n  }\n\n}\nConstraint.idCounter = 0;\n\n/**\r\n * An element containing 6 entries, 3 spatial and 3 rotational degrees of freedom.\r\n */\n\nclass JacobianElement {\n  constructor() {\n    this.spatial = new Vec3();\n    this.rotational = new Vec3();\n  }\n  /**\r\n   * Multiply with other JacobianElement\r\n   */\n\n\n  multiplyElement(element) {\n    return element.spatial.dot(this.spatial) + element.rotational.dot(this.rotational);\n  }\n  /**\r\n   * Multiply with two vectors\r\n   */\n\n\n  multiplyVectors(spatial, rotational) {\n    return spatial.dot(this.spatial) + rotational.dot(this.rotational);\n  }\n\n}\n\n/**\r\n * Equation base class\r\n * @class Equation\r\n * @constructor\r\n * @author schteppe\r\n * @param {Body} bi\r\n * @param {Body} bj\r\n * @param {Number} minForce Minimum (read: negative max) force to be applied by the constraint.\r\n * @param {Number} maxForce Maximum (read: positive max) force to be applied by the constraint.\r\n */\nclass Equation {\n  // SPOOK parameter\n  // SPOOK parameter\n  // SPOOK parameter\n  // A number, proportional to the force added to the bodies.\n  constructor(bi, bj, minForce = -1e6, maxForce = 1e6) {\n    this.id = Equation.id++;\n    this.minForce = minForce;\n    this.maxForce = maxForce;\n    this.bi = bi;\n    this.bj = bj;\n    this.a = 0.0; // SPOOK parameter\n\n    this.b = 0.0; // SPOOK parameter\n\n    this.eps = 0.0; // SPOOK parameter\n\n    this.jacobianElementA = new JacobianElement();\n    this.jacobianElementB = new JacobianElement();\n    this.enabled = true;\n    this.multiplier = 0;\n    this.setSpookParams(1e7, 4, 1 / 60); // Set typical spook params\n  }\n  /**\r\n   * Recalculates a,b,eps.\r\n   * @method setSpookParams\r\n   */\n\n\n  setSpookParams(stiffness, relaxation, timeStep) {\n    const d = relaxation;\n    const k = stiffness;\n    const h = timeStep;\n    this.a = 4.0 / (h * (1 + 4 * d));\n    this.b = 4.0 * d / (1 + 4 * d);\n    this.eps = 4.0 / (h * h * k * (1 + 4 * d));\n  }\n  /**\r\n   * Computes the right hand side of the SPOOK equation\r\n   * @method computeB\r\n   * @return {Number}\r\n   */\n\n\n  computeB(a, b, h) {\n    const GW = this.computeGW();\n    const Gq = this.computeGq();\n    const GiMf = this.computeGiMf();\n    return -Gq * a - GW * b - GiMf * h;\n  }\n  /**\r\n   * Computes G*q, where q are the generalized body coordinates\r\n   * @method computeGq\r\n   * @return {Number}\r\n   */\n\n\n  computeGq() {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const xi = bi.position;\n    const xj = bj.position;\n    return GA.spatial.dot(xi) + GB.spatial.dot(xj);\n  }\n  /**\r\n   * Computes G*W, where W are the body velocities\r\n   * @method computeGW\r\n   * @return {Number}\r\n   */\n\n\n  computeGW() {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const vi = bi.velocity;\n    const vj = bj.velocity;\n    const wi = bi.angularVelocity;\n    const wj = bj.angularVelocity;\n    return GA.multiplyVectors(vi, wi) + GB.multiplyVectors(vj, wj);\n  }\n  /**\r\n   * Computes G*Wlambda, where W are the body velocities\r\n   * @method computeGWlambda\r\n   * @return {Number}\r\n   */\n\n\n  computeGWlambda() {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const vi = bi.vlambda;\n    const vj = bj.vlambda;\n    const wi = bi.wlambda;\n    const wj = bj.wlambda;\n    return GA.multiplyVectors(vi, wi) + GB.multiplyVectors(vj, wj);\n  }\n\n  computeGiMf() {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const fi = bi.force;\n    const ti = bi.torque;\n    const fj = bj.force;\n    const tj = bj.torque;\n    const invMassi = bi.invMassSolve;\n    const invMassj = bj.invMassSolve;\n    fi.scale(invMassi, iMfi);\n    fj.scale(invMassj, iMfj);\n    bi.invInertiaWorldSolve.vmult(ti, invIi_vmult_taui);\n    bj.invInertiaWorldSolve.vmult(tj, invIj_vmult_tauj);\n    return GA.multiplyVectors(iMfi, invIi_vmult_taui) + GB.multiplyVectors(iMfj, invIj_vmult_tauj);\n  }\n\n  computeGiMGt() {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const invMassi = bi.invMassSolve;\n    const invMassj = bj.invMassSolve;\n    const invIi = bi.invInertiaWorldSolve;\n    const invIj = bj.invInertiaWorldSolve;\n    let result = invMassi + invMassj;\n    invIi.vmult(GA.rotational, tmp$1);\n    result += tmp$1.dot(GA.rotational);\n    invIj.vmult(GB.rotational, tmp$1);\n    result += tmp$1.dot(GB.rotational);\n    return result;\n  }\n  /**\r\n   * Add constraint velocity to the bodies.\r\n   * @method addToWlambda\r\n   * @param {Number} deltalambda\r\n   */\n\n\n  addToWlambda(deltalambda) {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const temp = addToWlambda_temp; // Add to linear velocity\n    // v_lambda += inv(M) * delta_lamba * G\n\n    bi.vlambda.addScaledVector(bi.invMassSolve * deltalambda, GA.spatial, bi.vlambda);\n    bj.vlambda.addScaledVector(bj.invMassSolve * deltalambda, GB.spatial, bj.vlambda); // Add to angular velocity\n\n    bi.invInertiaWorldSolve.vmult(GA.rotational, temp);\n    bi.wlambda.addScaledVector(deltalambda, temp, bi.wlambda);\n    bj.invInertiaWorldSolve.vmult(GB.rotational, temp);\n    bj.wlambda.addScaledVector(deltalambda, temp, bj.wlambda);\n  }\n  /**\r\n   * Compute the denominator part of the SPOOK equation: C = G*inv(M)*G' + eps\r\n   * @method computeInvC\r\n   * @param  {Number} eps\r\n   * @return {Number}\r\n   */\n\n\n  computeC() {\n    return this.computeGiMGt() + this.eps;\n  }\n\n}\nEquation.id = 0;\n/**\r\n * Computes G*inv(M)*f, where M is the mass matrix with diagonal blocks for each body, and f are the forces on the bodies.\r\n * @method computeGiMf\r\n * @return {Number}\r\n */\n\nconst iMfi = new Vec3();\nconst iMfj = new Vec3();\nconst invIi_vmult_taui = new Vec3();\nconst invIj_vmult_tauj = new Vec3();\n/**\r\n * Computes G*inv(M)*G'\r\n * @method computeGiMGt\r\n * @return {Number}\r\n */\n\nconst tmp$1 = new Vec3();\nconst addToWlambda_temp = new Vec3();\n\n/**\r\n * Contact/non-penetration constraint equation\r\n * @class ContactEquation\r\n * @constructor\r\n * @author schteppe\r\n * @param {Body} bodyA\r\n * @param {Body} bodyB\r\n * @extends Equation\r\n */\nclass ContactEquation extends Equation {\n  // \"bounciness\": u1 = -e*u0\n  // World-oriented vector that goes from the center of bi to the contact point.\n  // World-oriented vector that starts in body j position and goes to the contact point.\n  // Contact normal, pointing out of body i.\n  constructor(bodyA, bodyB, maxForce = 1e6) {\n    super(bodyA, bodyB, 0, maxForce);\n    this.restitution = 0.0;\n    this.ri = new Vec3();\n    this.rj = new Vec3();\n    this.ni = new Vec3();\n  }\n\n  computeB(h) {\n    const a = this.a;\n    const b = this.b;\n    const bi = this.bi;\n    const bj = this.bj;\n    const ri = this.ri;\n    const rj = this.rj;\n    const rixn = ContactEquation_computeB_temp1;\n    const rjxn = ContactEquation_computeB_temp2;\n    const vi = bi.velocity;\n    const wi = bi.angularVelocity;\n    const fi = bi.force;\n    const taui = bi.torque;\n    const vj = bj.velocity;\n    const wj = bj.angularVelocity;\n    const fj = bj.force;\n    const tauj = bj.torque;\n    const penetrationVec = ContactEquation_computeB_temp3;\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const n = this.ni; // Caluclate cross products\n\n    ri.cross(n, rixn);\n    rj.cross(n, rjxn); // g = xj+rj -(xi+ri)\n    // G = [ -ni  -rixn  ni  rjxn ]\n\n    n.negate(GA.spatial);\n    rixn.negate(GA.rotational);\n    GB.spatial.copy(n);\n    GB.rotational.copy(rjxn); // Calculate the penetration vector\n\n    penetrationVec.copy(bj.position);\n    penetrationVec.vadd(rj, penetrationVec);\n    penetrationVec.vsub(bi.position, penetrationVec);\n    penetrationVec.vsub(ri, penetrationVec);\n    const g = n.dot(penetrationVec); // Compute iteration\n\n    const ePlusOne = this.restitution + 1;\n    const GW = ePlusOne * vj.dot(n) - ePlusOne * vi.dot(n) + wj.dot(rjxn) - wi.dot(rixn);\n    const GiMf = this.computeGiMf();\n    const B = -g * a - GW * b - h * GiMf;\n    return B;\n  }\n  /**\r\n   * Get the current relative velocity in the contact point.\r\n   * @method getImpactVelocityAlongNormal\r\n   * @return {number}\r\n   */\n\n\n  getImpactVelocityAlongNormal() {\n    const vi = ContactEquation_getImpactVelocityAlongNormal_vi;\n    const vj = ContactEquation_getImpactVelocityAlongNormal_vj;\n    const xi = ContactEquation_getImpactVelocityAlongNormal_xi;\n    const xj = ContactEquation_getImpactVelocityAlongNormal_xj;\n    const relVel = ContactEquation_getImpactVelocityAlongNormal_relVel;\n    this.bi.position.vadd(this.ri, xi);\n    this.bj.position.vadd(this.rj, xj);\n    this.bi.getVelocityAtWorldPoint(xi, vi);\n    this.bj.getVelocityAtWorldPoint(xj, vj);\n    vi.vsub(vj, relVel);\n    return this.ni.dot(relVel);\n  }\n\n}\nconst ContactEquation_computeB_temp1 = new Vec3(); // Temp vectors\n\nconst ContactEquation_computeB_temp2 = new Vec3();\nconst ContactEquation_computeB_temp3 = new Vec3();\nconst ContactEquation_getImpactVelocityAlongNormal_vi = new Vec3();\nconst ContactEquation_getImpactVelocityAlongNormal_vj = new Vec3();\nconst ContactEquation_getImpactVelocityAlongNormal_xi = new Vec3();\nconst ContactEquation_getImpactVelocityAlongNormal_xj = new Vec3();\nconst ContactEquation_getImpactVelocityAlongNormal_relVel = new Vec3();\n\n/**\r\n * Connects two bodies at given offset points.\r\n * @class PointToPointConstraint\r\n * @extends Constraint\r\n * @constructor\r\n * @param {Body} bodyA\r\n * @param {Vec3} pivotA The point relative to the center of mass of bodyA which bodyA is constrained to.\r\n * @param {Body} bodyB Body that will be constrained in a similar way to the same point as bodyA. We will therefore get a link between bodyA and bodyB. If not specified, bodyA will be constrained to a static point.\r\n * @param {Vec3} pivotB See pivotA.\r\n * @param {Number} maxForce The maximum force that should be applied to constrain the bodies.\r\n *\r\n * @example\r\n *     const bodyA = new Body({ mass: 1 });\r\n *     const bodyB = new Body({ mass: 1 });\r\n *     bodyA.position.set(-1, 0, 0);\r\n *     bodyB.position.set(1, 0, 0);\r\n *     bodyA.addShape(shapeA);\r\n *     bodyB.addShape(shapeB);\r\n *     world.addBody(bodyA);\r\n *     world.addBody(bodyB);\r\n *     const localPivotA = new Vec3(1, 0, 0);\r\n *     const localPivotB = new Vec3(-1, 0, 0);\r\n *     const constraint = new PointToPointConstraint(bodyA, localPivotA, bodyB, localPivotB);\r\n *     world.addConstraint(constraint);\r\n */\nclass PointToPointConstraint extends Constraint {\n  // Pivot, defined locally in bodyA.\n  // Pivot, defined locally in bodyB.\n  constructor(bodyA, pivotA = new Vec3(), bodyB, pivotB = new Vec3(), maxForce = 1e6) {\n    super(bodyA, bodyB);\n    this.pivotA = pivotA.clone();\n    this.pivotB = pivotB.clone();\n    const x = this.equationX = new ContactEquation(bodyA, bodyB);\n    const y = this.equationY = new ContactEquation(bodyA, bodyB);\n    const z = this.equationZ = new ContactEquation(bodyA, bodyB); // Equations to be fed to the solver\n\n    this.equations.push(x, y, z); // Make the equations bidirectional\n\n    x.minForce = y.minForce = z.minForce = -maxForce;\n    x.maxForce = y.maxForce = z.maxForce = maxForce;\n    x.ni.set(1, 0, 0);\n    y.ni.set(0, 1, 0);\n    z.ni.set(0, 0, 1);\n  }\n\n  update() {\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const x = this.equationX;\n    const y = this.equationY;\n    const z = this.equationZ; // Rotate the pivots to world space\n\n    bodyA.quaternion.vmult(this.pivotA, x.ri);\n    bodyB.quaternion.vmult(this.pivotB, x.rj);\n    y.ri.copy(x.ri);\n    y.rj.copy(x.rj);\n    z.ri.copy(x.ri);\n    z.rj.copy(x.rj);\n  }\n\n}\n\n/**\r\n * Cone equation. Works to keep the given body world vectors aligned, or tilted within a given angle from each other.\r\n * @class ConeEquation\r\n * @constructor\r\n * @author schteppe\r\n * @param {Body} bodyA\r\n * @param {Body} bodyB\r\n * @param {Vec3} [options.axisA] Local axis in A\r\n * @param {Vec3} [options.axisB] Local axis in B\r\n * @param {Vec3} [options.angle] The \"cone angle\" to keep\r\n * @param {number} [options.maxForce=1e6]\r\n * @extends Equation\r\n */\nclass ConeEquation extends Equation {\n  // The cone angle to keep.\n  constructor(bodyA, bodyB, options = {}) {\n    const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6;\n    super(bodyA, bodyB, -maxForce, maxForce);\n    this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);\n    this.axisB = options.axisB ? options.axisB.clone() : new Vec3(0, 1, 0);\n    this.angle = typeof options.angle !== 'undefined' ? options.angle : 0;\n  }\n\n  computeB(h) {\n    const a = this.a;\n    const b = this.b;\n    const ni = this.axisA;\n    const nj = this.axisB;\n    const nixnj = tmpVec1;\n    const njxni = tmpVec2;\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB; // Caluclate cross products\n\n    ni.cross(nj, nixnj);\n    nj.cross(ni, njxni); // The angle between two vector is:\n    // cos(theta) = a * b / (length(a) * length(b) = { len(a) = len(b) = 1 } = a * b\n    // g = a * b\n    // gdot = (b x a) * wi + (a x b) * wj\n    // G = [0 bxa 0 axb]\n    // W = [vi wi vj wj]\n\n    GA.rotational.copy(njxni);\n    GB.rotational.copy(nixnj);\n    const g = Math.cos(this.angle) - ni.dot(nj);\n    const GW = this.computeGW();\n    const GiMf = this.computeGiMf();\n    const B = -g * a - GW * b - h * GiMf;\n    return B;\n  }\n\n}\nconst tmpVec1 = new Vec3();\nconst tmpVec2 = new Vec3();\n\n/**\r\n * Rotational constraint. Works to keep the local vectors orthogonal to each other in world space.\r\n * @class RotationalEquation\r\n * @constructor\r\n * @author schteppe\r\n * @param {Body} bodyA\r\n * @param {Body} bodyB\r\n * @param {Vec3} [options.axisA]\r\n * @param {Vec3} [options.axisB]\r\n * @param {number} [options.maxForce]\r\n * @extends Equation\r\n */\nclass RotationalEquation extends Equation {\n  constructor(bodyA, bodyB, options = {}) {\n    const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6;\n    super(bodyA, bodyB, -maxForce, maxForce);\n    this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);\n    this.axisB = options.axisB ? options.axisB.clone() : new Vec3(0, 1, 0);\n    this.maxAngle = Math.PI / 2;\n  }\n\n  computeB(h) {\n    const a = this.a;\n    const b = this.b;\n    const ni = this.axisA;\n    const nj = this.axisB;\n    const nixnj = tmpVec1$1;\n    const njxni = tmpVec2$1;\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB; // Caluclate cross products\n\n    ni.cross(nj, nixnj);\n    nj.cross(ni, njxni); // g = ni * nj\n    // gdot = (nj x ni) * wi + (ni x nj) * wj\n    // G = [0 njxni 0 nixnj]\n    // W = [vi wi vj wj]\n\n    GA.rotational.copy(njxni);\n    GB.rotational.copy(nixnj);\n    const g = Math.cos(this.maxAngle) - ni.dot(nj);\n    const GW = this.computeGW();\n    const GiMf = this.computeGiMf();\n    const B = -g * a - GW * b - h * GiMf;\n    return B;\n  }\n\n}\nconst tmpVec1$1 = new Vec3();\nconst tmpVec2$1 = new Vec3();\n\n/**\r\n * @class ConeTwistConstraint\r\n * @constructor\r\n * @author schteppe\r\n * @param {Body} bodyA\r\n * @param {Body} bodyB\r\n * @param {object} [options]\r\n * @param {Vec3} [options.pivotA]\r\n * @param {Vec3} [options.pivotB]\r\n * @param {Vec3} [options.axisA]\r\n * @param {Vec3} [options.axisB]\r\n * @param {Number} [options.maxForce=1e6]\r\n * @extends PointToPointConstraint\r\n */\nclass ConeTwistConstraint extends PointToPointConstraint {\n  constructor(bodyA, bodyB, options = {}) {\n    const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6; // Set pivot point in between\n\n    const pivotA = options.pivotA ? options.pivotA.clone() : new Vec3();\n    const pivotB = options.pivotB ? options.pivotB.clone() : new Vec3();\n    super(bodyA, pivotA, bodyB, pivotB, maxForce);\n    this.axisA = options.axisA ? options.axisA.clone() : new Vec3();\n    this.axisB = options.axisB ? options.axisB.clone() : new Vec3();\n    this.collideConnected = !!options.collideConnected;\n    this.angle = typeof options.angle !== 'undefined' ? options.angle : 0;\n    const c = this.coneEquation = new ConeEquation(bodyA, bodyB, options);\n    const t = this.twistEquation = new RotationalEquation(bodyA, bodyB, options);\n    this.twistAngle = typeof options.twistAngle !== 'undefined' ? options.twistAngle : 0; // Make the cone equation push the bodies toward the cone axis, not outward\n\n    c.maxForce = 0;\n    c.minForce = -maxForce; // Make the twist equation add torque toward the initial position\n\n    t.maxForce = 0;\n    t.minForce = -maxForce;\n    this.equations.push(c, t);\n  }\n\n  update() {\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const cone = this.coneEquation;\n    const twist = this.twistEquation;\n    super.update(); // Update the axes to the cone constraint\n\n    bodyA.vectorToWorldFrame(this.axisA, cone.axisA);\n    bodyB.vectorToWorldFrame(this.axisB, cone.axisB); // Update the world axes in the twist constraint\n\n    this.axisA.tangents(twist.axisA, twist.axisA);\n    bodyA.vectorToWorldFrame(twist.axisA, twist.axisA);\n    this.axisB.tangents(twist.axisB, twist.axisB);\n    bodyB.vectorToWorldFrame(twist.axisB, twist.axisB);\n    cone.angle = this.angle;\n    twist.maxAngle = this.twistAngle;\n  }\n\n}\n\n/**\r\n * Constrains two bodies to be at a constant distance from each others center of mass.\r\n * @class DistanceConstraint\r\n * @constructor\r\n * @author schteppe\r\n * @param {Body} bodyA\r\n * @param {Body} bodyB\r\n * @param {Number} [distance] The distance to keep. If undefined, it will be set to the current distance between bodyA and bodyB\r\n * @param {Number} [maxForce=1e6]\r\n * @extends Constraint\r\n */\nclass DistanceConstraint extends Constraint {\n  constructor(bodyA, bodyB, distance, maxForce = 1e6) {\n    super(bodyA, bodyB);\n\n    if (typeof distance === 'undefined') {\n      distance = bodyA.position.distanceTo(bodyB.position);\n    }\n\n    this.distance = distance;\n    const eq = this.distanceEquation = new ContactEquation(bodyA, bodyB);\n    this.equations.push(eq); // Make it bidirectional\n\n    eq.minForce = -maxForce;\n    eq.maxForce = maxForce;\n  }\n\n  update() {\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const eq = this.distanceEquation;\n    const halfDist = this.distance * 0.5;\n    const normal = eq.ni;\n    bodyB.position.vsub(bodyA.position, normal);\n    normal.normalize();\n    normal.scale(halfDist, eq.ri);\n    normal.scale(-halfDist, eq.rj);\n  }\n\n}\n\n/**\r\n * Lock constraint. Will remove all degrees of freedom between the bodies.\r\n * @class LockConstraint\r\n * @constructor\r\n * @author schteppe\r\n * @param {Body} bodyA\r\n * @param {Body} bodyB\r\n * @param {object} [options]\r\n * @param {Number} [options.maxForce=1e6]\r\n * @extends PointToPointConstraint\r\n */\nclass LockConstraint extends PointToPointConstraint {\n  constructor(bodyA, bodyB, options = {}) {\n    const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6; // Set pivot point in between\n\n    const pivotA = new Vec3();\n    const pivotB = new Vec3();\n    const halfWay = new Vec3();\n    bodyA.position.vadd(bodyB.position, halfWay);\n    halfWay.scale(0.5, halfWay);\n    bodyB.pointToLocalFrame(halfWay, pivotB);\n    bodyA.pointToLocalFrame(halfWay, pivotA); // The point-to-point constraint will keep a point shared between the bodies\n\n    super(bodyA, pivotA, bodyB, pivotB, maxForce); // Store initial rotation of the bodies as unit vectors in the local body spaces\n\n    this.xA = bodyA.vectorToLocalFrame(Vec3.UNIT_X);\n    this.xB = bodyB.vectorToLocalFrame(Vec3.UNIT_X);\n    this.yA = bodyA.vectorToLocalFrame(Vec3.UNIT_Y);\n    this.yB = bodyB.vectorToLocalFrame(Vec3.UNIT_Y);\n    this.zA = bodyA.vectorToLocalFrame(Vec3.UNIT_Z);\n    this.zB = bodyB.vectorToLocalFrame(Vec3.UNIT_Z); // ...and the following rotational equations will keep all rotational DOF's in place\n\n    const r1 = this.rotationalEquation1 = new RotationalEquation(bodyA, bodyB, options);\n    const r2 = this.rotationalEquation2 = new RotationalEquation(bodyA, bodyB, options);\n    const r3 = this.rotationalEquation3 = new RotationalEquation(bodyA, bodyB, options);\n    this.equations.push(r1, r2, r3);\n  }\n\n  update() {\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const motor = this.motorEquation;\n    const r1 = this.rotationalEquation1;\n    const r2 = this.rotationalEquation2;\n    const r3 = this.rotationalEquation3;\n    super.update(); // These vector pairs must be orthogonal\n\n    bodyA.vectorToWorldFrame(this.xA, r1.axisA);\n    bodyB.vectorToWorldFrame(this.yB, r1.axisB);\n    bodyA.vectorToWorldFrame(this.yA, r2.axisA);\n    bodyB.vectorToWorldFrame(this.zB, r2.axisB);\n    bodyA.vectorToWorldFrame(this.zA, r3.axisA);\n    bodyB.vectorToWorldFrame(this.xB, r3.axisB);\n  }\n\n}\n\n/**\r\n * Rotational motor constraint. Tries to keep the relative angular velocity of the bodies to a given value.\r\n * @class RotationalMotorEquation\r\n * @constructor\r\n * @author schteppe\r\n * @param {Body} bodyA\r\n * @param {Body} bodyB\r\n * @param {Number} maxForce\r\n * @extends Equation\r\n */\nclass RotationalMotorEquation extends Equation {\n  // World oriented rotational axis.\n  // World oriented rotational axis.\n  // Motor velocity.\n  constructor(bodyA, bodyB, maxForce = 1e6) {\n    super(bodyA, bodyB, -maxForce, maxForce);\n    this.axisA = new Vec3();\n    this.axisB = new Vec3();\n    this.targetVelocity = 0;\n  }\n\n  computeB(h) {\n    const a = this.a;\n    const b = this.b;\n    const bi = this.bi;\n    const bj = this.bj;\n    const axisA = this.axisA;\n    const axisB = this.axisB;\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB; // g = 0\n    // gdot = axisA * wi - axisB * wj\n    // gdot = G * W = G * [vi wi vj wj]\n    // =>\n    // G = [0 axisA 0 -axisB]\n\n    GA.rotational.copy(axisA);\n    axisB.negate(GB.rotational);\n    const GW = this.computeGW() - this.targetVelocity;\n    const GiMf = this.computeGiMf();\n    const B = -GW * b - h * GiMf;\n    return B;\n  }\n\n}\n\n/**\r\n * Hinge constraint. Think of it as a door hinge. It tries to keep the door in the correct place and with the correct orientation.\r\n * @class HingeConstraint\r\n * @constructor\r\n * @author schteppe\r\n * @param {Body} bodyA\r\n * @param {Body} bodyB\r\n * @param {object} [options]\r\n * @param {Vec3} [options.pivotA] A point defined locally in bodyA. This defines the offset of axisA.\r\n * @param {Vec3} [options.axisA] An axis that bodyA can rotate around, defined locally in bodyA.\r\n * @param {Vec3} [options.pivotB]\r\n * @param {Vec3} [options.axisB]\r\n * @param {Number} [options.maxForce=1e6]\r\n * @extends PointToPointConstraint\r\n */\nclass HingeConstraint extends PointToPointConstraint {\n  // Rotation axis, defined locally in bodyA.\n  // Rotation axis, defined locally in bodyB.\n  constructor(bodyA, bodyB, options = {}) {\n    const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6;\n    const pivotA = options.pivotA ? options.pivotA.clone() : new Vec3();\n    const pivotB = options.pivotB ? options.pivotB.clone() : new Vec3();\n    super(bodyA, pivotA, bodyB, pivotB, maxForce);\n    const axisA = this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);\n    axisA.normalize();\n    const axisB = this.axisB = options.axisB ? options.axisB.clone() : new Vec3(1, 0, 0);\n    axisB.normalize();\n    this.collideConnected = !!options.collideConnected;\n    const rotational1 = this.rotationalEquation1 = new RotationalEquation(bodyA, bodyB, options);\n    const rotational2 = this.rotationalEquation2 = new RotationalEquation(bodyA, bodyB, options);\n    const motor = this.motorEquation = new RotationalMotorEquation(bodyA, bodyB, maxForce);\n    motor.enabled = false; // Not enabled by default\n    // Equations to be fed to the solver\n\n    this.equations.push(rotational1, rotational2, motor);\n  }\n  /**\r\n   * @method enableMotor\r\n   */\n\n\n  enableMotor() {\n    this.motorEquation.enabled = true;\n  }\n  /**\r\n   * @method disableMotor\r\n   */\n\n\n  disableMotor() {\n    this.motorEquation.enabled = false;\n  }\n  /**\r\n   * @method setMotorSpeed\r\n   * @param {number} speed\r\n   */\n\n\n  setMotorSpeed(speed) {\n    this.motorEquation.targetVelocity = speed;\n  }\n  /**\r\n   * @method setMotorMaxForce\r\n   * @param {number} maxForce\r\n   */\n\n\n  setMotorMaxForce(maxForce) {\n    this.motorEquation.maxForce = maxForce;\n    this.motorEquation.minForce = -maxForce;\n  }\n\n  update() {\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const motor = this.motorEquation;\n    const r1 = this.rotationalEquation1;\n    const r2 = this.rotationalEquation2;\n    const worldAxisA = HingeConstraint_update_tmpVec1;\n    const worldAxisB = HingeConstraint_update_tmpVec2;\n    const axisA = this.axisA;\n    const axisB = this.axisB;\n    super.update(); // Get world axes\n\n    bodyA.quaternion.vmult(axisA, worldAxisA);\n    bodyB.quaternion.vmult(axisB, worldAxisB);\n    worldAxisA.tangents(r1.axisA, r2.axisA);\n    r1.axisB.copy(worldAxisB);\n    r2.axisB.copy(worldAxisB);\n\n    if (this.motorEquation.enabled) {\n      bodyA.quaternion.vmult(this.axisA, motor.axisA);\n      bodyB.quaternion.vmult(this.axisB, motor.axisB);\n    }\n  }\n\n}\nconst HingeConstraint_update_tmpVec1 = new Vec3();\nconst HingeConstraint_update_tmpVec2 = new Vec3();\n\n/**\r\n * Constrains the slipping in a contact along a tangent\r\n * @class FrictionEquation\r\n * @constructor\r\n * @author schteppe\r\n * @param {Body} bodyA\r\n * @param {Body} bodyB\r\n * @param {Number} slipForce should be +-F_friction = +-mu * F_normal = +-mu * m * g\r\n * @extends Equation\r\n */\nclass FrictionEquation extends Equation {\n  // Tangent.\n  constructor(bodyA, bodyB, slipForce) {\n    super(bodyA, bodyB, -slipForce, slipForce);\n    this.ri = new Vec3();\n    this.rj = new Vec3();\n    this.t = new Vec3();\n  }\n\n  computeB(h) {\n    const a = this.a;\n    const b = this.b;\n    const bi = this.bi;\n    const bj = this.bj;\n    const ri = this.ri;\n    const rj = this.rj;\n    const rixt = FrictionEquation_computeB_temp1;\n    const rjxt = FrictionEquation_computeB_temp2;\n    const t = this.t; // Caluclate cross products\n\n    ri.cross(t, rixt);\n    rj.cross(t, rjxt); // G = [-t -rixt t rjxt]\n    // And remember, this is a pure velocity constraint, g is always zero!\n\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    t.negate(GA.spatial);\n    rixt.negate(GA.rotational);\n    GB.spatial.copy(t);\n    GB.rotational.copy(rjxt);\n    const GW = this.computeGW();\n    const GiMf = this.computeGiMf();\n    const B = -GW * b - h * GiMf;\n    return B;\n  }\n\n}\nconst FrictionEquation_computeB_temp1 = new Vec3();\nconst FrictionEquation_computeB_temp2 = new Vec3();\n\n/**\n * Defines what happens when two materials meet.\n * @class ContactMaterial\n * @constructor\n * @param {Material} m1\n * @param {Material} m2\n * @param {object} [options]\n * @param {Number} [options.friction=0.3]\n * @param {Number} [options.restitution=0.3]\n * @param {number} [options.contactEquationStiffness=1e7]\n * @param {number} [options.contactEquationRelaxation=3]\n * @param {number} [options.frictionEquationStiffness=1e7]\n * @param {Number} [options.frictionEquationRelaxation=3]\n * @todo Refactor materials to materialA and materialB\n */\nclass ContactMaterial {\n  // Identifier of this material.\n  // Participating materials.\n  // Friction coefficient.\n  // Restitution coefficient.\n  // Stiffness of the produced contact equations.\n  // Relaxation time of the produced contact equations.\n  // Stiffness of the produced friction equations.\n  // Relaxation time of the produced friction equations\n  constructor(m1, m2, options) {\n    options = Utils.defaults(options, {\n      friction: 0.3,\n      restitution: 0.3,\n      contactEquationStiffness: 1e7,\n      contactEquationRelaxation: 3,\n      frictionEquationStiffness: 1e7,\n      frictionEquationRelaxation: 3\n    });\n    this.id = ContactMaterial.idCounter++;\n    this.materials = [m1, m2];\n    this.friction = options.friction;\n    this.restitution = options.restitution;\n    this.contactEquationStiffness = options.contactEquationStiffness;\n    this.contactEquationRelaxation = options.contactEquationRelaxation;\n    this.frictionEquationStiffness = options.frictionEquationStiffness;\n    this.frictionEquationRelaxation = options.frictionEquationRelaxation;\n  }\n\n}\nContactMaterial.idCounter = 0;\n\n/**\r\n * Defines a physics material.\r\n * @class Material\r\n * @constructor\r\n * @param {object} [options]\r\n * @author schteppe\r\n */\nclass Material {\n  // Material name.\n  // Material id.\n  // Friction for this material. If non-negative, it will be used instead of the friction given by ContactMaterials. If there's no matching ContactMaterial, the value from .defaultContactMaterial in the World will be used.\n  // Restitution for this material. If non-negative, it will be used instead of the restitution given by ContactMaterials. If there's no matching ContactMaterial, the value from .defaultContactMaterial in the World will be used.\n  constructor(options = {}) {\n    let name = ''; // Backwards compatibility fix\n\n    if (typeof options === 'string') {\n      name = options;\n      options = {};\n    }\n\n    this.name = name;\n    this.id = Material.idCounter++;\n    this.friction = typeof options.friction !== 'undefined' ? options.friction : -1;\n    this.restitution = typeof options.restitution !== 'undefined' ? options.restitution : -1;\n  }\n\n}\nMaterial.idCounter = 0;\n\n/**\r\n * A spring, connecting two bodies.\r\n *\r\n * @class Spring\r\n * @constructor\r\n * @param {Body} bodyA\r\n * @param {Body} bodyB\r\n * @param {Object} [options]\r\n * @param {number} [options.restLength]   A number > 0. Default: 1\r\n * @param {number} [options.stiffness]    A number >= 0. Default: 100\r\n * @param {number} [options.damping]      A number >= 0. Default: 1\r\n * @param {Vec3}  [options.worldAnchorA] Where to hook the spring to body A, in world coordinates.\r\n * @param {Vec3}  [options.worldAnchorB]\r\n * @param {Vec3}  [options.localAnchorA] Where to hook the spring to body A, in local body coordinates.\r\n * @param {Vec3}  [options.localAnchorB]\r\n */\nclass Spring {\n  // Rest length of the spring.\n  // Stiffness of the spring.\n  // Damping of the spring.\n  // First connected body.\n  // Second connected body.\n  // Anchor for bodyA in local bodyA coordinates.\n  // Anchor for bodyB in local bodyB coordinates.\n  constructor(bodyA, bodyB, options = {}) {\n    this.restLength = typeof options.restLength === 'number' ? options.restLength : 1;\n    this.stiffness = options.stiffness || 100;\n    this.damping = options.damping || 1;\n    this.bodyA = bodyA;\n    this.bodyB = bodyB;\n    this.localAnchorA = new Vec3();\n    this.localAnchorB = new Vec3();\n\n    if (options.localAnchorA) {\n      this.localAnchorA.copy(options.localAnchorA);\n    }\n\n    if (options.localAnchorB) {\n      this.localAnchorB.copy(options.localAnchorB);\n    }\n\n    if (options.worldAnchorA) {\n      this.setWorldAnchorA(options.worldAnchorA);\n    }\n\n    if (options.worldAnchorB) {\n      this.setWorldAnchorB(options.worldAnchorB);\n    }\n  }\n  /**\r\n   * Set the anchor point on body A, using world coordinates.\r\n   * @method setWorldAnchorA\r\n   * @param {Vec3} worldAnchorA\r\n   */\n\n\n  setWorldAnchorA(worldAnchorA) {\n    this.bodyA.pointToLocalFrame(worldAnchorA, this.localAnchorA);\n  }\n  /**\r\n   * Set the anchor point on body B, using world coordinates.\r\n   * @method setWorldAnchorB\r\n   * @param {Vec3} worldAnchorB\r\n   */\n\n\n  setWorldAnchorB(worldAnchorB) {\n    this.bodyB.pointToLocalFrame(worldAnchorB, this.localAnchorB);\n  }\n  /**\r\n   * Get the anchor point on body A, in world coordinates.\r\n   * @method getWorldAnchorA\r\n   * @param {Vec3} result The vector to store the result in.\r\n   */\n\n\n  getWorldAnchorA(result) {\n    this.bodyA.pointToWorldFrame(this.localAnchorA, result);\n  }\n  /**\r\n   * Get the anchor point on body B, in world coordinates.\r\n   * @method getWorldAnchorB\r\n   * @param {Vec3} result The vector to store the result in.\r\n   */\n\n\n  getWorldAnchorB(result) {\n    this.bodyB.pointToWorldFrame(this.localAnchorB, result);\n  }\n  /**\r\n   * Apply the spring force to the connected bodies.\r\n   * @method applyForce\r\n   */\n\n\n  applyForce() {\n    const k = this.stiffness;\n    const d = this.damping;\n    const l = this.restLength;\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const r = applyForce_r;\n    const r_unit = applyForce_r_unit;\n    const u = applyForce_u;\n    const f = applyForce_f;\n    const tmp = applyForce_tmp;\n    const worldAnchorA = applyForce_worldAnchorA;\n    const worldAnchorB = applyForce_worldAnchorB;\n    const ri = applyForce_ri;\n    const rj = applyForce_rj;\n    const ri_x_f = applyForce_ri_x_f;\n    const rj_x_f = applyForce_rj_x_f; // Get world anchors\n\n    this.getWorldAnchorA(worldAnchorA);\n    this.getWorldAnchorB(worldAnchorB); // Get offset points\n\n    worldAnchorA.vsub(bodyA.position, ri);\n    worldAnchorB.vsub(bodyB.position, rj); // Compute distance vector between world anchor points\n\n    worldAnchorB.vsub(worldAnchorA, r);\n    const rlen = r.length();\n    r_unit.copy(r);\n    r_unit.normalize(); // Compute relative velocity of the anchor points, u\n\n    bodyB.velocity.vsub(bodyA.velocity, u); // Add rotational velocity\n\n    bodyB.angularVelocity.cross(rj, tmp);\n    u.vadd(tmp, u);\n    bodyA.angularVelocity.cross(ri, tmp);\n    u.vsub(tmp, u); // F = - k * ( x - L ) - D * ( u )\n\n    r_unit.scale(-k * (rlen - l) - d * u.dot(r_unit), f); // Add forces to bodies\n\n    bodyA.force.vsub(f, bodyA.force);\n    bodyB.force.vadd(f, bodyB.force); // Angular force\n\n    ri.cross(f, ri_x_f);\n    rj.cross(f, rj_x_f);\n    bodyA.torque.vsub(ri_x_f, bodyA.torque);\n    bodyB.torque.vadd(rj_x_f, bodyB.torque);\n  }\n\n}\nconst applyForce_r = new Vec3();\nconst applyForce_r_unit = new Vec3();\nconst applyForce_u = new Vec3();\nconst applyForce_f = new Vec3();\nconst applyForce_worldAnchorA = new Vec3();\nconst applyForce_worldAnchorB = new Vec3();\nconst applyForce_ri = new Vec3();\nconst applyForce_rj = new Vec3();\nconst applyForce_ri_x_f = new Vec3();\nconst applyForce_rj_x_f = new Vec3();\nconst applyForce_tmp = new Vec3();\n\n/**\r\n * @class WheelInfo\r\n * @constructor\r\n * @param {Object} [options]\r\n *\r\n * @param {Vec3} [options.chassisConnectionPointLocal]\r\n * @param {Vec3} [options.chassisConnectionPointWorld]\r\n * @param {Vec3} [options.directionLocal]\r\n * @param {Vec3} [options.directionWorld]\r\n * @param {Vec3} [options.axleLocal]\r\n * @param {Vec3} [options.axleWorld]\r\n * @param {number} [options.suspensionRestLength=1]\r\n * @param {number} [options.suspensionMaxLength=2]\r\n * @param {number} [options.radius=1]\r\n * @param {number} [options.suspensionStiffness=100]\r\n * @param {number} [options.dampingCompression=10]\r\n * @param {number} [options.dampingRelaxation=10]\r\n * @param {number} [options.frictionSlip=10000]\r\n * @param {number} [options.steering=0]\r\n * @param {number} [options.rotation=0]\r\n * @param {number} [options.deltaRotation=0]\r\n * @param {number} [options.rollInfluence=0.01]\r\n * @param {number} [options.maxSuspensionForce]\r\n * @param {boolean} [options.isFrontWheel=true]\r\n * @param {number} [options.clippedInvContactDotSuspension=1]\r\n * @param {number} [options.suspensionRelativeVelocity=0]\r\n * @param {number} [options.suspensionForce=0]\r\n * @param {number} [options.skidInfo=0]\r\n * @param {number} [options.suspensionLength=0]\r\n * @param {number} [options.maxSuspensionTravel=1]\r\n * @param {boolean} [options.useCustomSlidingRotationalSpeed=false]\r\n * @param {number} [options.customSlidingRotationalSpeed=-0.1]\r\n */\nclass WheelInfo {\n  // Max travel distance of the suspension, in meters.\n  // Speed to apply to the wheel rotation when the wheel is sliding.\n  // If the customSlidingRotationalSpeed should be used.\n  // Connection point, defined locally in the chassis body frame.\n  // Rotation value, in radians.\n  // The result from raycasting.\n  // Wheel world transform.\n  constructor(options = {}) {\n    options = Utils.defaults(options, {\n      chassisConnectionPointLocal: new Vec3(),\n      chassisConnectionPointWorld: new Vec3(),\n      directionLocal: new Vec3(),\n      directionWorld: new Vec3(),\n      axleLocal: new Vec3(),\n      axleWorld: new Vec3(),\n      suspensionRestLength: 1,\n      suspensionMaxLength: 2,\n      radius: 1,\n      suspensionStiffness: 100,\n      dampingCompression: 10,\n      dampingRelaxation: 10,\n      frictionSlip: 10000,\n      steering: 0,\n      rotation: 0,\n      deltaRotation: 0,\n      rollInfluence: 0.01,\n      maxSuspensionForce: Number.MAX_VALUE,\n      isFrontWheel: true,\n      clippedInvContactDotSuspension: 1,\n      suspensionRelativeVelocity: 0,\n      suspensionForce: 0,\n      slipInfo: 0,\n      skidInfo: 0,\n      suspensionLength: 0,\n      maxSuspensionTravel: 1,\n      useCustomSlidingRotationalSpeed: false,\n      customSlidingRotationalSpeed: -0.1\n    });\n    this.maxSuspensionTravel = options.maxSuspensionTravel;\n    this.customSlidingRotationalSpeed = options.customSlidingRotationalSpeed;\n    this.useCustomSlidingRotationalSpeed = options.useCustomSlidingRotationalSpeed;\n    this.sliding = false;\n    this.chassisConnectionPointLocal = options.chassisConnectionPointLocal.clone();\n    this.chassisConnectionPointWorld = options.chassisConnectionPointWorld.clone();\n    this.directionLocal = options.directionLocal.clone();\n    this.directionWorld = options.directionWorld.clone();\n    this.axleLocal = options.axleLocal.clone();\n    this.axleWorld = options.axleWorld.clone();\n    this.suspensionRestLength = options.suspensionRestLength;\n    this.suspensionMaxLength = options.suspensionMaxLength;\n    this.radius = options.radius;\n    this.suspensionStiffness = options.suspensionStiffness;\n    this.dampingCompression = options.dampingCompression;\n    this.dampingRelaxation = options.dampingRelaxation;\n    this.frictionSlip = options.frictionSlip;\n    this.steering = 0;\n    this.rotation = 0;\n    this.deltaRotation = 0;\n    this.rollInfluence = options.rollInfluence;\n    this.maxSuspensionForce = options.maxSuspensionForce;\n    this.engineForce = 0;\n    this.brake = 0;\n    this.isFrontWheel = options.isFrontWheel;\n    this.clippedInvContactDotSuspension = 1;\n    this.suspensionRelativeVelocity = 0;\n    this.suspensionForce = 0;\n    this.slipInfo = 0;\n    this.skidInfo = 0;\n    this.suspensionLength = 0;\n    this.sideImpulse = 0;\n    this.forwardImpulse = 0;\n    this.raycastResult = new RaycastResult();\n    this.worldTransform = new Transform();\n    this.isInContact = false;\n  }\n\n  updateWheel(chassis) {\n    const raycastResult = this.raycastResult;\n\n    if (this.isInContact) {\n      const project = raycastResult.hitNormalWorld.dot(raycastResult.directionWorld);\n      raycastResult.hitPointWorld.vsub(chassis.position, relpos);\n      chassis.getVelocityAtWorldPoint(relpos, chassis_velocity_at_contactPoint);\n      const projVel = raycastResult.hitNormalWorld.dot(chassis_velocity_at_contactPoint);\n\n      if (project >= -0.1) {\n        this.suspensionRelativeVelocity = 0.0;\n        this.clippedInvContactDotSuspension = 1.0 / 0.1;\n      } else {\n        const inv = -1 / project;\n        this.suspensionRelativeVelocity = projVel * inv;\n        this.clippedInvContactDotSuspension = inv;\n      }\n    } else {\n      // Not in contact : position wheel in a nice (rest length) position\n      raycastResult.suspensionLength = this.suspensionRestLength;\n      this.suspensionRelativeVelocity = 0.0;\n      raycastResult.directionWorld.scale(-1, raycastResult.hitNormalWorld);\n      this.clippedInvContactDotSuspension = 1.0;\n    }\n  }\n\n}\nconst chassis_velocity_at_contactPoint = new Vec3();\nconst relpos = new Vec3();\n\n/**\r\n * Vehicle helper class that casts rays from the wheel positions towards the ground and applies forces.\r\n * @class RaycastVehicle\r\n * @constructor\r\n * @param {object} [options]\r\n * @param {Body} [options.chassisBody] The car chassis body.\r\n * @param {integer} [options.indexRightAxis] Axis to use for right. x=0, y=1, z=2\r\n * @param {integer} [options.indexLeftAxis]\r\n * @param {integer} [options.indexUpAxis]\r\n */\nclass RaycastVehicle {\n  // Will be set to true if the car is sliding.\n  // Index of the right axis, 0=x, 1=y, 2=z\n  // Index of the forward axis, 0=x, 1=y, 2=z\n  // Index of the up axis, 0=x, 1=y, 2=z\n  constructor(options) {\n    this.chassisBody = options.chassisBody;\n    this.wheelInfos = [];\n    this.sliding = false;\n    this.world = null;\n    this.indexRightAxis = typeof options.indexRightAxis !== 'undefined' ? options.indexRightAxis : 1;\n    this.indexForwardAxis = typeof options.indexForwardAxis !== 'undefined' ? options.indexForwardAxis : 0;\n    this.indexUpAxis = typeof options.indexUpAxis !== 'undefined' ? options.indexUpAxis : 2;\n    this.constraints = [];\n\n    this.preStepCallback = () => {};\n\n    this.currentVehicleSpeedKmHour = 0;\n  }\n  /**\r\n   * Add a wheel. For information about the options, see WheelInfo.\r\n   * @method addWheel\r\n   * @param {object} [options]\r\n   */\n\n\n  addWheel(options = {}) {\n    const info = new WheelInfo(options);\n    const index = this.wheelInfos.length;\n    this.wheelInfos.push(info);\n    return index;\n  }\n  /**\r\n   * Set the steering value of a wheel.\r\n   * @method setSteeringValue\r\n   * @param {number} value\r\n   * @param {integer} wheelIndex\r\n   */\n\n\n  setSteeringValue(value, wheelIndex) {\n    const wheel = this.wheelInfos[wheelIndex];\n    wheel.steering = value;\n  }\n  /**\r\n   * Set the wheel force to apply on one of the wheels each time step\r\n   * @method applyEngineForce\r\n   * @param  {number} value\r\n   * @param  {integer} wheelIndex\r\n   */\n\n\n  applyEngineForce(value, wheelIndex) {\n    this.wheelInfos[wheelIndex].engineForce = value;\n  }\n  /**\r\n   * Set the braking force of a wheel\r\n   * @method setBrake\r\n   * @param {number} brake\r\n   * @param {integer} wheelIndex\r\n   */\n\n\n  setBrake(brake, wheelIndex) {\n    this.wheelInfos[wheelIndex].brake = brake;\n  }\n  /**\r\n   * Add the vehicle including its constraints to the world.\r\n   * @method addToWorld\r\n   * @param {World} world\r\n   */\n\n\n  addToWorld(world) {\n    const constraints = this.constraints;\n    world.addBody(this.chassisBody);\n    const that = this;\n\n    this.preStepCallback = () => {\n      that.updateVehicle(world.dt);\n    };\n\n    world.addEventListener('preStep', this.preStepCallback);\n    this.world = world;\n  }\n  /**\r\n   * Get one of the wheel axles, world-oriented.\r\n   * @private\r\n   * @method getVehicleAxisWorld\r\n   * @param  {integer} axisIndex\r\n   * @param  {Vec3} result\r\n   */\n\n\n  getVehicleAxisWorld(axisIndex, result) {\n    result.set(axisIndex === 0 ? 1 : 0, axisIndex === 1 ? 1 : 0, axisIndex === 2 ? 1 : 0);\n    this.chassisBody.vectorToWorldFrame(result, result);\n  }\n\n  updateVehicle(timeStep) {\n    const wheelInfos = this.wheelInfos;\n    const numWheels = wheelInfos.length;\n    const chassisBody = this.chassisBody;\n\n    for (let i = 0; i < numWheels; i++) {\n      this.updateWheelTransform(i);\n    }\n\n    this.currentVehicleSpeedKmHour = 3.6 * chassisBody.velocity.length();\n    const forwardWorld = new Vec3();\n    this.getVehicleAxisWorld(this.indexForwardAxis, forwardWorld);\n\n    if (forwardWorld.dot(chassisBody.velocity) < 0) {\n      this.currentVehicleSpeedKmHour *= -1;\n    } // simulate suspension\n\n\n    for (let i = 0; i < numWheels; i++) {\n      this.castRay(wheelInfos[i]);\n    }\n\n    this.updateSuspension(timeStep);\n    const impulse = new Vec3();\n    const relpos = new Vec3();\n\n    for (let i = 0; i < numWheels; i++) {\n      //apply suspension force\n      const wheel = wheelInfos[i];\n      let suspensionForce = wheel.suspensionForce;\n\n      if (suspensionForce > wheel.maxSuspensionForce) {\n        suspensionForce = wheel.maxSuspensionForce;\n      }\n\n      wheel.raycastResult.hitNormalWorld.scale(suspensionForce * timeStep, impulse);\n      wheel.raycastResult.hitPointWorld.vsub(chassisBody.position, relpos);\n      chassisBody.applyImpulse(impulse, relpos);\n    }\n\n    this.updateFriction(timeStep);\n    const hitNormalWorldScaledWithProj = new Vec3();\n    const fwd = new Vec3();\n    const vel = new Vec3();\n\n    for (let i = 0; i < numWheels; i++) {\n      const wheel = wheelInfos[i]; //const relpos = new Vec3();\n      //wheel.chassisConnectionPointWorld.vsub(chassisBody.position, relpos);\n\n      chassisBody.getVelocityAtWorldPoint(wheel.chassisConnectionPointWorld, vel); // Hack to get the rotation in the correct direction\n\n      let m = 1;\n\n      switch (this.indexUpAxis) {\n        case 1:\n          m = -1;\n          break;\n      }\n\n      if (wheel.isInContact) {\n        this.getVehicleAxisWorld(this.indexForwardAxis, fwd);\n        const proj = fwd.dot(wheel.raycastResult.hitNormalWorld);\n        wheel.raycastResult.hitNormalWorld.scale(proj, hitNormalWorldScaledWithProj);\n        fwd.vsub(hitNormalWorldScaledWithProj, fwd);\n        const proj2 = fwd.dot(vel);\n        wheel.deltaRotation = m * proj2 * timeStep / wheel.radius;\n      }\n\n      if ((wheel.sliding || !wheel.isInContact) && wheel.engineForce !== 0 && wheel.useCustomSlidingRotationalSpeed) {\n        // Apply custom rotation when accelerating and sliding\n        wheel.deltaRotation = (wheel.engineForce > 0 ? 1 : -1) * wheel.customSlidingRotationalSpeed * timeStep;\n      } // Lock wheels\n\n\n      if (Math.abs(wheel.brake) > Math.abs(wheel.engineForce)) {\n        wheel.deltaRotation = 0;\n      }\n\n      wheel.rotation += wheel.deltaRotation; // Use the old value\n\n      wheel.deltaRotation *= 0.99; // damping of rotation when not in contact\n    }\n  }\n\n  updateSuspension(deltaTime) {\n    const chassisBody = this.chassisBody;\n    const chassisMass = chassisBody.mass;\n    const wheelInfos = this.wheelInfos;\n    const numWheels = wheelInfos.length;\n\n    for (let w_it = 0; w_it < numWheels; w_it++) {\n      const wheel = wheelInfos[w_it];\n\n      if (wheel.isInContact) {\n        let force; // Spring\n\n        const susp_length = wheel.suspensionRestLength;\n        const current_length = wheel.suspensionLength;\n        const length_diff = susp_length - current_length;\n        force = wheel.suspensionStiffness * length_diff * wheel.clippedInvContactDotSuspension; // Damper\n\n        const projected_rel_vel = wheel.suspensionRelativeVelocity;\n        let susp_damping;\n\n        if (projected_rel_vel < 0) {\n          susp_damping = wheel.dampingCompression;\n        } else {\n          susp_damping = wheel.dampingRelaxation;\n        }\n\n        force -= susp_damping * projected_rel_vel;\n        wheel.suspensionForce = force * chassisMass;\n\n        if (wheel.suspensionForce < 0) {\n          wheel.suspensionForce = 0;\n        }\n      } else {\n        wheel.suspensionForce = 0;\n      }\n    }\n  }\n  /**\r\n   * Remove the vehicle including its constraints from the world.\r\n   * @method removeFromWorld\r\n   * @param {World} world\r\n   */\n\n\n  removeFromWorld(world) {\n    const constraints = this.constraints;\n    world.removeBody(this.chassisBody);\n    world.removeEventListener('preStep', this.preStepCallback);\n    this.world = null;\n  }\n\n  castRay(wheel) {\n    const rayvector = castRay_rayvector;\n    const target = castRay_target;\n    this.updateWheelTransformWorld(wheel);\n    const chassisBody = this.chassisBody;\n    let depth = -1;\n    const raylen = wheel.suspensionRestLength + wheel.radius;\n    wheel.directionWorld.scale(raylen, rayvector);\n    const source = wheel.chassisConnectionPointWorld;\n    source.vadd(rayvector, target);\n    const raycastResult = wheel.raycastResult;\n    raycastResult.reset(); // Turn off ray collision with the chassis temporarily\n\n    const oldState = chassisBody.collisionResponse;\n    chassisBody.collisionResponse = false; // Cast ray against world\n\n    this.world.rayTest(source, target, raycastResult);\n    chassisBody.collisionResponse = oldState;\n    const object = raycastResult.body;\n    wheel.raycastResult.groundObject = 0;\n\n    if (object) {\n      depth = raycastResult.distance;\n      wheel.raycastResult.hitNormalWorld = raycastResult.hitNormalWorld;\n      wheel.isInContact = true;\n      const hitDistance = raycastResult.distance;\n      wheel.suspensionLength = hitDistance - wheel.radius; // clamp on max suspension travel\n\n      const minSuspensionLength = wheel.suspensionRestLength - wheel.maxSuspensionTravel;\n      const maxSuspensionLength = wheel.suspensionRestLength + wheel.maxSuspensionTravel;\n\n      if (wheel.suspensionLength < minSuspensionLength) {\n        wheel.suspensionLength = minSuspensionLength;\n      }\n\n      if (wheel.suspensionLength > maxSuspensionLength) {\n        wheel.suspensionLength = maxSuspensionLength;\n        wheel.raycastResult.reset();\n      }\n\n      const denominator = wheel.raycastResult.hitNormalWorld.dot(wheel.directionWorld);\n      const chassis_velocity_at_contactPoint = new Vec3();\n      chassisBody.getVelocityAtWorldPoint(wheel.raycastResult.hitPointWorld, chassis_velocity_at_contactPoint);\n      const projVel = wheel.raycastResult.hitNormalWorld.dot(chassis_velocity_at_contactPoint);\n\n      if (denominator >= -0.1) {\n        wheel.suspensionRelativeVelocity = 0;\n        wheel.clippedInvContactDotSuspension = 1 / 0.1;\n      } else {\n        const inv = -1 / denominator;\n        wheel.suspensionRelativeVelocity = projVel * inv;\n        wheel.clippedInvContactDotSuspension = inv;\n      }\n    } else {\n      //put wheel info as in rest position\n      wheel.suspensionLength = wheel.suspensionRestLength + 0 * wheel.maxSuspensionTravel;\n      wheel.suspensionRelativeVelocity = 0.0;\n      wheel.directionWorld.scale(-1, wheel.raycastResult.hitNormalWorld);\n      wheel.clippedInvContactDotSuspension = 1.0;\n    }\n\n    return depth;\n  }\n\n  updateWheelTransformWorld(wheel) {\n    wheel.isInContact = false;\n    const chassisBody = this.chassisBody;\n    chassisBody.pointToWorldFrame(wheel.chassisConnectionPointLocal, wheel.chassisConnectionPointWorld);\n    chassisBody.vectorToWorldFrame(wheel.directionLocal, wheel.directionWorld);\n    chassisBody.vectorToWorldFrame(wheel.axleLocal, wheel.axleWorld);\n  }\n  /**\r\n   * Update one of the wheel transform.\r\n   * Note when rendering wheels: during each step, wheel transforms are updated BEFORE the chassis; ie. their position becomes invalid after the step. Thus when you render wheels, you must update wheel transforms before rendering them. See raycastVehicle demo for an example.\r\n   * @method updateWheelTransform\r\n   * @param {integer} wheelIndex The wheel index to update.\r\n   */\n\n\n  updateWheelTransform(wheelIndex) {\n    const up = tmpVec4;\n    const right = tmpVec5;\n    const fwd = tmpVec6;\n    const wheel = this.wheelInfos[wheelIndex];\n    this.updateWheelTransformWorld(wheel);\n    wheel.directionLocal.scale(-1, up);\n    right.copy(wheel.axleLocal);\n    up.cross(right, fwd);\n    fwd.normalize();\n    right.normalize(); // Rotate around steering over the wheelAxle\n\n    const steering = wheel.steering;\n    const steeringOrn = new Quaternion();\n    steeringOrn.setFromAxisAngle(up, steering);\n    const rotatingOrn = new Quaternion();\n    rotatingOrn.setFromAxisAngle(right, wheel.rotation); // World rotation of the wheel\n\n    const q = wheel.worldTransform.quaternion;\n    this.chassisBody.quaternion.mult(steeringOrn, q);\n    q.mult(rotatingOrn, q);\n    q.normalize(); // world position of the wheel\n\n    const p = wheel.worldTransform.position;\n    p.copy(wheel.directionWorld);\n    p.scale(wheel.suspensionLength, p);\n    p.vadd(wheel.chassisConnectionPointWorld, p);\n  }\n  /**\r\n   * Get the world transform of one of the wheels\r\n   * @method getWheelTransformWorld\r\n   * @param  {integer} wheelIndex\r\n   * @return {Transform}\r\n   */\n\n\n  getWheelTransformWorld(wheelIndex) {\n    return this.wheelInfos[wheelIndex].worldTransform;\n  }\n\n  updateFriction(timeStep) {\n    const surfNormalWS_scaled_proj = updateFriction_surfNormalWS_scaled_proj; //calculate the impulse, so that the wheels don't move sidewards\n\n    const wheelInfos = this.wheelInfos;\n    const numWheels = wheelInfos.length;\n    const chassisBody = this.chassisBody;\n    const forwardWS = updateFriction_forwardWS;\n    const axle = updateFriction_axle;\n\n    for (let i = 0; i < numWheels; i++) {\n      const wheel = wheelInfos[i];\n      const groundObject = wheel.raycastResult.body;\n\n      wheel.sideImpulse = 0;\n      wheel.forwardImpulse = 0;\n\n      if (!forwardWS[i]) {\n        forwardWS[i] = new Vec3();\n      }\n\n      if (!axle[i]) {\n        axle[i] = new Vec3();\n      }\n    }\n\n    for (let i = 0; i < numWheels; i++) {\n      const wheel = wheelInfos[i];\n      const groundObject = wheel.raycastResult.body;\n\n      if (groundObject) {\n        const axlei = axle[i];\n        const wheelTrans = this.getWheelTransformWorld(i); // Get world axle\n\n        wheelTrans.vectorToWorldFrame(directions[this.indexRightAxis], axlei);\n        const surfNormalWS = wheel.raycastResult.hitNormalWorld;\n        const proj = axlei.dot(surfNormalWS);\n        surfNormalWS.scale(proj, surfNormalWS_scaled_proj);\n        axlei.vsub(surfNormalWS_scaled_proj, axlei);\n        axlei.normalize();\n        surfNormalWS.cross(axlei, forwardWS[i]);\n        forwardWS[i].normalize();\n        wheel.sideImpulse = resolveSingleBilateral(chassisBody, wheel.raycastResult.hitPointWorld, groundObject, wheel.raycastResult.hitPointWorld, axlei);\n        wheel.sideImpulse *= sideFrictionStiffness2;\n      }\n    }\n\n    const sideFactor = 1;\n    const fwdFactor = 0.5;\n    this.sliding = false;\n\n    for (let i = 0; i < numWheels; i++) {\n      const wheel = wheelInfos[i];\n      const groundObject = wheel.raycastResult.body;\n      let rollingFriction = 0;\n      wheel.slipInfo = 1;\n\n      if (groundObject) {\n        const defaultRollingFrictionImpulse = 0;\n        const maxImpulse = wheel.brake ? wheel.brake : defaultRollingFrictionImpulse; // btWheelContactPoint contactPt(chassisBody,groundObject,wheelInfraycastInfo.hitPointWorld,forwardWS[wheel],maxImpulse);\n        // rollingFriction = calcRollingFriction(contactPt);\n\n        rollingFriction = calcRollingFriction(chassisBody, groundObject, wheel.raycastResult.hitPointWorld, forwardWS[i], maxImpulse);\n        rollingFriction += wheel.engineForce * timeStep; // rollingFriction = 0;\n\n        const factor = maxImpulse / rollingFriction;\n        wheel.slipInfo *= factor;\n      } //switch between active rolling (throttle), braking and non-active rolling friction (nthrottle/break)\n\n\n      wheel.forwardImpulse = 0;\n      wheel.skidInfo = 1;\n\n      if (groundObject) {\n        wheel.skidInfo = 1;\n        const maximp = wheel.suspensionForce * timeStep * wheel.frictionSlip;\n        const maximpSide = maximp;\n        const maximpSquared = maximp * maximpSide;\n        wheel.forwardImpulse = rollingFriction; //wheelInfo.engineForce* timeStep;\n\n        const x = wheel.forwardImpulse * fwdFactor;\n        const y = wheel.sideImpulse * sideFactor;\n        const impulseSquared = x * x + y * y;\n        wheel.sliding = false;\n\n        if (impulseSquared > maximpSquared) {\n          this.sliding = true;\n          wheel.sliding = true;\n          const factor = maximp / Math.sqrt(impulseSquared);\n          wheel.skidInfo *= factor;\n        }\n      }\n    }\n\n    if (this.sliding) {\n      for (let i = 0; i < numWheels; i++) {\n        const wheel = wheelInfos[i];\n\n        if (wheel.sideImpulse !== 0) {\n          if (wheel.skidInfo < 1) {\n            wheel.forwardImpulse *= wheel.skidInfo;\n            wheel.sideImpulse *= wheel.skidInfo;\n          }\n        }\n      }\n    } // apply the impulses\n\n\n    for (let i = 0; i < numWheels; i++) {\n      const wheel = wheelInfos[i];\n      const rel_pos = new Vec3();\n      wheel.raycastResult.hitPointWorld.vsub(chassisBody.position, rel_pos); // cannons applyimpulse is using world coord for the position\n      //rel_pos.copy(wheel.raycastResult.hitPointWorld);\n\n      if (wheel.forwardImpulse !== 0) {\n        const impulse = new Vec3();\n        forwardWS[i].scale(wheel.forwardImpulse, impulse);\n        chassisBody.applyImpulse(impulse, rel_pos);\n      }\n\n      if (wheel.sideImpulse !== 0) {\n        const groundObject = wheel.raycastResult.body;\n        const rel_pos2 = new Vec3();\n        wheel.raycastResult.hitPointWorld.vsub(groundObject.position, rel_pos2); //rel_pos2.copy(wheel.raycastResult.hitPointWorld);\n\n        const sideImp = new Vec3();\n        axle[i].scale(wheel.sideImpulse, sideImp); // Scale the relative position in the up direction with rollInfluence.\n        // If rollInfluence is 1, the impulse will be applied on the hitPoint (easy to roll over), if it is zero it will be applied in the same plane as the center of mass (not easy to roll over).\n\n        chassisBody.vectorToLocalFrame(rel_pos, rel_pos);\n        rel_pos['xyz'[this.indexUpAxis]] *= wheel.rollInfluence;\n        chassisBody.vectorToWorldFrame(rel_pos, rel_pos);\n        chassisBody.applyImpulse(sideImp, rel_pos); //apply friction impulse on the ground\n\n        sideImp.scale(-1, sideImp);\n        groundObject.applyImpulse(sideImp, rel_pos2);\n      }\n    }\n  }\n\n}\nconst tmpVec4 = new Vec3();\nconst tmpVec5 = new Vec3();\nconst tmpVec6 = new Vec3();\nconst tmpRay = new Ray();\nconst castRay_rayvector = new Vec3();\nconst castRay_target = new Vec3();\nconst directions = [new Vec3(1, 0, 0), new Vec3(0, 1, 0), new Vec3(0, 0, 1)];\nconst updateFriction_surfNormalWS_scaled_proj = new Vec3();\nconst updateFriction_axle = [];\nconst updateFriction_forwardWS = [];\nconst sideFrictionStiffness2 = 1;\nconst calcRollingFriction_vel1 = new Vec3();\nconst calcRollingFriction_vel2 = new Vec3();\nconst calcRollingFriction_vel = new Vec3();\n\nfunction calcRollingFriction(body0, body1, frictionPosWorld, frictionDirectionWorld, maxImpulse) {\n  let j1 = 0;\n  const contactPosWorld = frictionPosWorld; // const rel_pos1 = new Vec3();\n  // const rel_pos2 = new Vec3();\n\n  const vel1 = calcRollingFriction_vel1;\n  const vel2 = calcRollingFriction_vel2;\n  const vel = calcRollingFriction_vel; // contactPosWorld.vsub(body0.position, rel_pos1);\n  // contactPosWorld.vsub(body1.position, rel_pos2);\n\n  body0.getVelocityAtWorldPoint(contactPosWorld, vel1);\n  body1.getVelocityAtWorldPoint(contactPosWorld, vel2);\n  vel1.vsub(vel2, vel);\n  const vrel = frictionDirectionWorld.dot(vel);\n  const denom0 = computeImpulseDenominator(body0, frictionPosWorld, frictionDirectionWorld);\n  const denom1 = computeImpulseDenominator(body1, frictionPosWorld, frictionDirectionWorld);\n  const relaxation = 1;\n  const jacDiagABInv = relaxation / (denom0 + denom1); // calculate j that moves us to zero relative velocity\n\n  j1 = -vrel * jacDiagABInv;\n\n  if (maxImpulse < j1) {\n    j1 = maxImpulse;\n  }\n\n  if (j1 < -maxImpulse) {\n    j1 = -maxImpulse;\n  }\n\n  return j1;\n}\n\nconst computeImpulseDenominator_r0 = new Vec3();\nconst computeImpulseDenominator_c0 = new Vec3();\nconst computeImpulseDenominator_vec = new Vec3();\nconst computeImpulseDenominator_m = new Vec3();\n\nfunction computeImpulseDenominator(body, pos, normal) {\n  const r0 = computeImpulseDenominator_r0;\n  const c0 = computeImpulseDenominator_c0;\n  const vec = computeImpulseDenominator_vec;\n  const m = computeImpulseDenominator_m;\n  pos.vsub(body.position, r0);\n  r0.cross(normal, c0);\n  body.invInertiaWorld.vmult(c0, m);\n  m.cross(r0, vec);\n  return body.invMass + normal.dot(vec);\n}\n\nconst resolveSingleBilateral_vel1 = new Vec3();\nconst resolveSingleBilateral_vel2 = new Vec3();\nconst resolveSingleBilateral_vel = new Vec3(); //bilateral constraint between two dynamic objects\n\nfunction resolveSingleBilateral(body1, pos1, body2, pos2, normal) {\n  const normalLenSqr = normal.lengthSquared();\n\n  if (normalLenSqr > 1.1) {\n    return 0; // no impulse\n  } // const rel_pos1 = new Vec3();\n  // const rel_pos2 = new Vec3();\n  // pos1.vsub(body1.position, rel_pos1);\n  // pos2.vsub(body2.position, rel_pos2);\n\n\n  const vel1 = resolveSingleBilateral_vel1;\n  const vel2 = resolveSingleBilateral_vel2;\n  const vel = resolveSingleBilateral_vel;\n  body1.getVelocityAtWorldPoint(pos1, vel1);\n  body2.getVelocityAtWorldPoint(pos2, vel2);\n  vel1.vsub(vel2, vel);\n  const rel_vel = normal.dot(vel);\n  const contactDamping = 0.2;\n  const massTerm = 1 / (body1.invMass + body2.invMass);\n  const impulse = -contactDamping * rel_vel * massTerm;\n  return impulse;\n}\n\n/**\r\n * Spherical shape\r\n * @class Sphere\r\n * @constructor\r\n * @extends Shape\r\n * @param {Number} radius The radius of the sphere, a non-negative number.\r\n * @author schteppe / http://github.com/schteppe\r\n */\nclass Sphere extends Shape {\n  constructor(radius) {\n    super({\n      type: Shape.types.SPHERE\n    });\n    this.radius = radius !== undefined ? radius : 1.0;\n\n    if (this.radius < 0) {\n      throw new Error('The sphere radius cannot be negative.');\n    }\n\n    this.updateBoundingSphereRadius();\n  }\n\n  calculateLocalInertia(mass, target = new Vec3()) {\n    const I = 2.0 * mass * this.radius * this.radius / 5.0;\n    target.x = I;\n    target.y = I;\n    target.z = I;\n    return target;\n  }\n\n  volume() {\n    return 4.0 * Math.PI * Math.pow(this.radius, 3) / 3.0;\n  }\n\n  updateBoundingSphereRadius() {\n    this.boundingSphereRadius = this.radius;\n  }\n\n  calculateWorldAABB(pos, quat, min, max) {\n    const r = this.radius;\n    const axes = ['x', 'y', 'z'];\n\n    for (let i = 0; i < axes.length; i++) {\n      const ax = axes[i];\n      min[ax] = pos[ax] - r;\n      max[ax] = pos[ax] + r;\n    }\n  }\n\n}\n\n/**\r\n * Simple vehicle helper class with spherical rigid body wheels.\r\n * @class RigidVehicle\r\n * @constructor\r\n * @param {Body} [options.chassisBody]\r\n */\nclass RigidVehicle {\n  constructor(options = {}) {\n    this.wheelBodies = [];\n    this.coordinateSystem = typeof options.coordinateSystem !== 'undefined' ? options.coordinateSystem.clone() : new Vec3(1, 2, 3);\n\n    if (options.chassisBody) {\n      this.chassisBody = options.chassisBody;\n    } else {\n      // No chassis body given. Create it!\n      this.chassisBody = new Body({\n        mass: 1,\n        shape: new Box(new Vec3(5, 2, 0.5))\n      });\n    }\n\n    this.constraints = [];\n    this.wheelAxes = [];\n    this.wheelForces = [];\n  }\n  /**\r\n   * Add a wheel\r\n   * @method addWheel\r\n   * @param {object} options\r\n   * @param {boolean} [options.isFrontWheel]\r\n   * @param {Vec3} [options.position] Position of the wheel, locally in the chassis body.\r\n   * @param {Vec3} [options.direction] Slide direction of the wheel along the suspension.\r\n   * @param {Vec3} [options.axis] Axis of rotation of the wheel, locally defined in the chassis.\r\n   * @param {Body} [options.body] The wheel body.\r\n   */\n\n\n  addWheel(options = {}) {\n    let wheelBody;\n\n    if (options.body) {\n      wheelBody = options.body;\n    } else {\n      // No wheel body given. Create it!\n      wheelBody = new Body({\n        mass: 1,\n        shape: new Sphere(1.2)\n      });\n    }\n\n    this.wheelBodies.push(wheelBody);\n    this.wheelForces.push(0); // Position constrain wheels\n    const position = typeof options.position !== 'undefined' ? options.position.clone() : new Vec3(); // Set position locally to the chassis\n\n    const worldPosition = new Vec3();\n    this.chassisBody.pointToWorldFrame(position, worldPosition);\n    wheelBody.position.set(worldPosition.x, worldPosition.y, worldPosition.z); // Constrain wheel\n\n    const axis = typeof options.axis !== 'undefined' ? options.axis.clone() : new Vec3(0, 1, 0);\n    this.wheelAxes.push(axis);\n    const hingeConstraint = new HingeConstraint(this.chassisBody, wheelBody, {\n      pivotA: position,\n      axisA: axis,\n      pivotB: Vec3.ZERO,\n      axisB: axis,\n      collideConnected: false\n    });\n    this.constraints.push(hingeConstraint);\n    return this.wheelBodies.length - 1;\n  }\n  /**\r\n   * Set the steering value of a wheel.\r\n   * @method setSteeringValue\r\n   * @param {number} value\r\n   * @param {integer} wheelIndex\r\n   * @todo check coordinateSystem\r\n   */\n\n\n  setSteeringValue(value, wheelIndex) {\n    // Set angle of the hinge axis\n    const axis = this.wheelAxes[wheelIndex];\n    const c = Math.cos(value);\n    const s = Math.sin(value);\n    const x = axis.x;\n    const y = axis.y;\n    this.constraints[wheelIndex].axisA.set(c * x - s * y, s * x + c * y, 0);\n  }\n  /**\r\n   * Set the target rotational speed of the hinge constraint.\r\n   * @method setMotorSpeed\r\n   * @param {number} value\r\n   * @param {integer} wheelIndex\r\n   */\n\n\n  setMotorSpeed(value, wheelIndex) {\n    const hingeConstraint = this.constraints[wheelIndex];\n    hingeConstraint.enableMotor();\n    hingeConstraint.motorTargetVelocity = value;\n  }\n  /**\r\n   * Set the target rotational speed of the hinge constraint.\r\n   * @method disableMotor\r\n   * @param {number} value\r\n   * @param {integer} wheelIndex\r\n   */\n\n\n  disableMotor(wheelIndex) {\n    const hingeConstraint = this.constraints[wheelIndex];\n    hingeConstraint.disableMotor();\n  }\n  /**\r\n   * Set the wheel force to apply on one of the wheels each time step\r\n   * @method setWheelForce\r\n   * @param  {number} value\r\n   * @param  {integer} wheelIndex\r\n   */\n\n\n  setWheelForce(value, wheelIndex) {\n    this.wheelForces[wheelIndex] = value;\n  }\n  /**\r\n   * Apply a torque on one of the wheels.\r\n   * @method applyWheelForce\r\n   * @param  {number} value\r\n   * @param  {integer} wheelIndex\r\n   */\n\n\n  applyWheelForce(value, wheelIndex) {\n    const axis = this.wheelAxes[wheelIndex];\n    const wheelBody = this.wheelBodies[wheelIndex];\n    const bodyTorque = wheelBody.torque;\n    axis.scale(value, torque);\n    wheelBody.vectorToWorldFrame(torque, torque);\n    bodyTorque.vadd(torque, bodyTorque);\n  }\n  /**\r\n   * Add the vehicle including its constraints to the world.\r\n   * @method addToWorld\r\n   * @param {World} world\r\n   */\n\n\n  addToWorld(world) {\n    const constraints = this.constraints;\n    const bodies = this.wheelBodies.concat([this.chassisBody]);\n\n    for (let i = 0; i < bodies.length; i++) {\n      world.addBody(bodies[i]);\n    }\n\n    for (let i = 0; i < constraints.length; i++) {\n      world.addConstraint(constraints[i]);\n    }\n\n    world.addEventListener('preStep', this._update.bind(this));\n  }\n\n  _update() {\n    const wheelForces = this.wheelForces;\n\n    for (let i = 0; i < wheelForces.length; i++) {\n      this.applyWheelForce(wheelForces[i], i);\n    }\n  }\n  /**\r\n   * Remove the vehicle including its constraints from the world.\r\n   * @method removeFromWorld\r\n   * @param {World} world\r\n   */\n\n\n  removeFromWorld(world) {\n    const constraints = this.constraints;\n    const bodies = this.wheelBodies.concat([this.chassisBody]);\n\n    for (let i = 0; i < bodies.length; i++) {\n      world.removeBody(bodies[i]);\n    }\n\n    for (let i = 0; i < constraints.length; i++) {\n      world.removeConstraint(constraints[i]);\n    }\n  }\n  /**\r\n   * Get current rotational velocity of a wheel\r\n   * @method getWheelSpeed\r\n   * @param {integer} wheelIndex\r\n   */\n\n\n  getWheelSpeed(wheelIndex) {\n    const axis = this.wheelAxes[wheelIndex];\n    const wheelBody = this.wheelBodies[wheelIndex];\n    const w = wheelBody.angularVelocity;\n    this.chassisBody.vectorToWorldFrame(axis, worldAxis);\n    return w.dot(worldAxis);\n  }\n\n}\nconst torque = new Vec3();\nconst worldAxis = new Vec3();\n\n/**\r\n * Smoothed-particle hydrodynamics system\r\n * @class SPHSystem\r\n * @constructor\r\n */\nclass SPHSystem {\n  // Density of the system (kg/m3).\n  // Distance below which two particles are considered to be neighbors. It should be adjusted so there are about 15-20 neighbor particles within this radius.\n  // Viscosity of the system.\n  constructor() {\n    this.particles = [];\n    this.density = 1;\n    this.smoothingRadius = 1;\n    this.speedOfSound = 1;\n    this.viscosity = 0.01;\n    this.eps = 0.000001; // Stuff Computed per particle\n\n    this.pressures = [];\n    this.densities = [];\n    this.neighbors = [];\n  }\n  /**\r\n   * Add a particle to the system.\r\n   * @method add\r\n   * @param {Body} particle\r\n   */\n\n\n  add(particle) {\n    this.particles.push(particle);\n\n    if (this.neighbors.length < this.particles.length) {\n      this.neighbors.push([]);\n    }\n  }\n  /**\r\n   * Remove a particle from the system.\r\n   * @method remove\r\n   * @param {Body} particle\r\n   */\n\n\n  remove(particle) {\n    const idx = this.particles.indexOf(particle);\n\n    if (idx !== -1) {\n      this.particles.splice(idx, 1);\n\n      if (this.neighbors.length > this.particles.length) {\n        this.neighbors.pop();\n      }\n    }\n  }\n\n  getNeighbors(particle, neighbors) {\n    const N = this.particles.length;\n    const id = particle.id;\n    const R2 = this.smoothingRadius * this.smoothingRadius;\n    const dist = SPHSystem_getNeighbors_dist;\n\n    for (let i = 0; i !== N; i++) {\n      const p = this.particles[i];\n      p.position.vsub(particle.position, dist);\n\n      if (id !== p.id && dist.lengthSquared() < R2) {\n        neighbors.push(p);\n      }\n    }\n  }\n\n  update() {\n    const N = this.particles.length;\n    const dist = SPHSystem_update_dist;\n    const cs = this.speedOfSound;\n    const eps = this.eps;\n\n    for (let i = 0; i !== N; i++) {\n      const p = this.particles[i]; // Current particle\n\n      const neighbors = this.neighbors[i]; // Get neighbors\n\n      neighbors.length = 0;\n      this.getNeighbors(p, neighbors);\n      neighbors.push(this.particles[i]); // Add current too\n\n      const numNeighbors = neighbors.length; // Accumulate density for the particle\n\n      let sum = 0.0;\n\n      for (let j = 0; j !== numNeighbors; j++) {\n        //printf(\"Current particle has position %f %f %f\\n\",objects[id].pos.x(),objects[id].pos.y(),objects[id].pos.z());\n        p.position.vsub(neighbors[j].position, dist);\n        const len = dist.length();\n        const weight = this.w(len);\n        sum += neighbors[j].mass * weight;\n      } // Save\n\n\n      this.densities[i] = sum;\n      this.pressures[i] = cs * cs * (this.densities[i] - this.density);\n    } // Add forces\n    // Sum to these accelerations\n\n\n    const a_pressure = SPHSystem_update_a_pressure;\n    const a_visc = SPHSystem_update_a_visc;\n    const gradW = SPHSystem_update_gradW;\n    const r_vec = SPHSystem_update_r_vec;\n    const u = SPHSystem_update_u;\n\n    for (let i = 0; i !== N; i++) {\n      const particle = this.particles[i];\n      a_pressure.set(0, 0, 0);\n      a_visc.set(0, 0, 0); // Init vars\n\n      let Pij;\n      let nabla;\n\n      const neighbors = this.neighbors[i];\n      const numNeighbors = neighbors.length; //printf(\"Neighbors: \");\n\n      for (let j = 0; j !== numNeighbors; j++) {\n        const neighbor = neighbors[j]; //printf(\"%d \",nj);\n        // Get r once for all..\n\n        particle.position.vsub(neighbor.position, r_vec);\n        const r = r_vec.length(); // Pressure contribution\n\n        Pij = -neighbor.mass * (this.pressures[i] / (this.densities[i] * this.densities[i] + eps) + this.pressures[j] / (this.densities[j] * this.densities[j] + eps));\n        this.gradw(r_vec, gradW); // Add to pressure acceleration\n\n        gradW.scale(Pij, gradW);\n        a_pressure.vadd(gradW, a_pressure); // Viscosity contribution\n\n        neighbor.velocity.vsub(particle.velocity, u);\n        u.scale(1.0 / (0.0001 + this.densities[i] * this.densities[j]) * this.viscosity * neighbor.mass, u);\n        nabla = this.nablaw(r);\n        u.scale(nabla, u); // Add to viscosity acceleration\n\n        a_visc.vadd(u, a_visc);\n      } // Calculate force\n\n\n      a_visc.scale(particle.mass, a_visc);\n      a_pressure.scale(particle.mass, a_pressure); // Add force to particles\n\n      particle.force.vadd(a_visc, particle.force);\n      particle.force.vadd(a_pressure, particle.force);\n    }\n  } // Calculate the weight using the W(r) weightfunction\n\n\n  w(r) {\n    // 315\n    const h = this.smoothingRadius;\n    return 315.0 / (64.0 * Math.PI * h ** 9) * (h * h - r * r) ** 3;\n  } // calculate gradient of the weight function\n\n\n  gradw(rVec, resultVec) {\n    const r = rVec.length();\n    const h = this.smoothingRadius;\n    rVec.scale(945.0 / (32.0 * Math.PI * h ** 9) * (h * h - r * r) ** 2, resultVec);\n  } // Calculate nabla(W)\n\n\n  nablaw(r) {\n    const h = this.smoothingRadius;\n    const nabla = 945.0 / (32.0 * Math.PI * h ** 9) * (h * h - r * r) * (7 * r * r - 3 * h * h);\n    return nabla;\n  }\n\n}\n/**\r\n * Get neighbors within smoothing volume, save in the array neighbors\r\n * @method getNeighbors\r\n * @param {Body} particle\r\n * @param {Array} neighbors\r\n */\n\nconst SPHSystem_getNeighbors_dist = new Vec3(); // Temp vectors for calculation\n\nconst SPHSystem_update_dist = new Vec3(); // Relative velocity\n\nconst SPHSystem_update_a_pressure = new Vec3();\nconst SPHSystem_update_a_visc = new Vec3();\nconst SPHSystem_update_gradW = new Vec3();\nconst SPHSystem_update_r_vec = new Vec3();\nconst SPHSystem_update_u = new Vec3();\n\n/**\n * @class Cylinder\n * @constructor\n * @extends ConvexPolyhedron\n * @author schteppe / https://github.com/schteppe\n * @param {Number} radiusTop\n * @param {Number} radiusBottom\n * @param {Number} height\n * @param {Number} numSegments The number of segments to build the cylinder out of\n */\n\nclass Cylinder extends ConvexPolyhedron {\n  constructor(radiusTop, radiusBottom, height, numSegments) {\n    const N = numSegments;\n    const vertices = [];\n    const axes = [];\n    const faces = [];\n    const bottomface = [];\n    const topface = [];\n    const cos = Math.cos;\n    const sin = Math.sin; // First bottom point\n\n    vertices.push(new Vec3(radiusBottom * cos(0), -height * 0.5, -radiusBottom * sin(0)));\n    bottomface.push(0); // First top point\n\n    vertices.push(new Vec3(radiusTop * cos(0), height * 0.5, -radiusTop * sin(0)));\n    topface.push(1);\n\n    for (let i = 0; i < N; i++) {\n      const theta = 2 * Math.PI / N * (i + 1);\n      const thetaN = 2 * Math.PI / N * (i + 0.5);\n\n      if (i < N - 1) {\n        // Bottom\n        vertices.push(new Vec3(radiusBottom * cos(theta), -height * 0.5, -radiusBottom * sin(theta)));\n        bottomface.push(2 * i + 2); // Top\n\n        vertices.push(new Vec3(radiusTop * cos(theta), height * 0.5, -radiusTop * sin(theta)));\n        topface.push(2 * i + 3); // Face\n\n        faces.push([2 * i + 2, 2 * i + 3, 2 * i + 1, 2 * i]);\n      } else {\n        faces.push([0, 1, 2 * i + 1, 2 * i]); // Connect\n      } // Axis: we can cut off half of them if we have even number of segments\n\n\n      if (N % 2 === 1 || i < N / 2) {\n        axes.push(new Vec3(cos(thetaN), 0, -sin(thetaN)));\n      }\n    }\n\n    faces.push(topface);\n    axes.push(new Vec3(0, 1, 0)); // Reorder bottom face\n\n    const temp = [];\n\n    for (let i = 0; i < bottomface.length; i++) {\n      temp.push(bottomface[bottomface.length - i - 1]);\n    }\n\n    faces.push(temp);\n    super({\n      vertices,\n      faces,\n      axes\n    });\n  }\n\n}\n\n/**\r\n * Particle shape.\r\n * @class Particle\r\n * @constructor\r\n * @author schteppe\r\n * @extends Shape\r\n */\nclass Particle extends Shape {\n  constructor() {\n    super({\n      type: Shape.types.PARTICLE\n    });\n  }\n  /**\r\n   * @method calculateLocalInertia\r\n   * @param  {Number} mass\r\n   * @param  {Vec3} target\r\n   * @return {Vec3}\r\n   */\n\n\n  calculateLocalInertia(mass, target = new Vec3()) {\n    target.set(0, 0, 0);\n    return target;\n  }\n\n  volume() {\n    return 0;\n  }\n\n  updateBoundingSphereRadius() {\n    this.boundingSphereRadius = 0;\n  }\n\n  calculateWorldAABB(pos, quat, min, max) {\n    // Get each axis max\n    min.copy(pos);\n    max.copy(pos);\n  }\n\n}\n\n/**\r\n * A plane, facing in the Z direction. The plane has its surface at z=0 and everything below z=0 is assumed to be solid plane. To make the plane face in some other direction than z, you must put it inside a Body and rotate that body. See the demos.\r\n * @class Plane\r\n * @constructor\r\n * @extends Shape\r\n * @author schteppe\r\n */\nclass Plane extends Shape {\n  constructor() {\n    super({\n      type: Shape.types.PLANE\n    }); // World oriented normal\n\n    this.worldNormal = new Vec3();\n    this.worldNormalNeedsUpdate = true;\n    this.boundingSphereRadius = Number.MAX_VALUE;\n  }\n\n  computeWorldNormal(quat) {\n    const n = this.worldNormal;\n    n.set(0, 0, 1);\n    quat.vmult(n, n);\n    this.worldNormalNeedsUpdate = false;\n  }\n\n  calculateLocalInertia(mass, target = new Vec3()) {\n    return target;\n  }\n\n  volume() {\n    return (// The plane is infinite...\n      Number.MAX_VALUE\n    );\n  }\n\n  calculateWorldAABB(pos, quat, min, max) {\n    // The plane AABB is infinite, except if the normal is pointing along any axis\n    tempNormal.set(0, 0, 1); // Default plane normal is z\n\n    quat.vmult(tempNormal, tempNormal);\n    const maxVal = Number.MAX_VALUE;\n    min.set(-maxVal, -maxVal, -maxVal);\n    max.set(maxVal, maxVal, maxVal);\n\n    if (tempNormal.x === 1) {\n      max.x = pos.x;\n    } else if (tempNormal.x === -1) {\n      min.x = pos.x;\n    }\n\n    if (tempNormal.y === 1) {\n      max.y = pos.y;\n    } else if (tempNormal.y === -1) {\n      min.y = pos.y;\n    }\n\n    if (tempNormal.z === 1) {\n      max.z = pos.z;\n    } else if (tempNormal.z === -1) {\n      min.z = pos.z;\n    }\n  }\n\n  updateBoundingSphereRadius() {\n    this.boundingSphereRadius = Number.MAX_VALUE;\n  }\n\n}\nconst tempNormal = new Vec3();\n\n/**\n * Heightfield shape class. Height data is given as an array. These data points are spread out evenly with a given distance.\n * @class Heightfield\n * @extends Shape\n * @constructor\n * @param {Array} data An array of Y values that will be used to construct the terrain.\n * @param {object} options\n * @param {Number} [options.minValue] Minimum value of the data points in the data array. Will be computed automatically if not given.\n * @param {Number} [options.maxValue] Maximum value.\n * @param {Number} [options.elementSize=0.1] World spacing between the data points in X direction.\n * @todo Should be possible to use along all axes, not just y\n * @todo should be possible to scale along all axes\n * @todo Refactor elementSize to elementSizeX and elementSizeY\n *\n * @example\n *     // Generate some height data (y-values).\n *     const data = [];\n *     for(let i = 0; i < 1000; i++){\n *         const y = 0.5 * Math.cos(0.2 * i);\n *         data.push(y);\n *     }\n *\n *     // Create the heightfield shape\n *     const heightfieldShape = new Heightfield(data, {\n *         elementSize: 1 // Distance between the data points in X and Y directions\n *     });\n *     const heightfieldBody = new Body();\n *     heightfieldBody.addShape(heightfieldShape);\n *     world.addBody(heightfieldBody);\n */\nclass Heightfield extends Shape {\n  // An array of numbers, or height values, that are spread out along the x axis.\n  // Max value of the data.\n  // Max value of the data.\n  // The width of each element. To do: elementSizeX and Y\n  constructor(data, options = {}) {\n    options = Utils.defaults(options, {\n      maxValue: null,\n      minValue: null,\n      elementSize: 1\n    });\n    super({\n      type: Shape.types.HEIGHTFIELD\n    });\n    this.data = data;\n    this.maxValue = options.maxValue;\n    this.minValue = options.minValue;\n    this.elementSize = options.elementSize;\n\n    if (options.minValue === null) {\n      this.updateMinValue();\n    }\n\n    if (options.maxValue === null) {\n      this.updateMaxValue();\n    }\n\n    this.cacheEnabled = true;\n    this.pillarConvex = new ConvexPolyhedron();\n    this.pillarOffset = new Vec3();\n    this.updateBoundingSphereRadius(); // \"i_j_isUpper\" => { convex: ..., offset: ... }\n    // for example:\n    // _cachedPillars[\"0_2_1\"]\n\n    this._cachedPillars = {};\n  }\n  /**\n   * Call whenever you change the data array.\n   * @method update\n   */\n\n\n  update() {\n    this._cachedPillars = {};\n  }\n  /**\n   * Update the .minValue property\n   * @method updateMinValue\n   */\n\n\n  updateMinValue() {\n    const data = this.data;\n    let minValue = data[0][0];\n\n    for (let i = 0; i !== data.length; i++) {\n      for (let j = 0; j !== data[i].length; j++) {\n        const v = data[i][j];\n\n        if (v < minValue) {\n          minValue = v;\n        }\n      }\n    }\n\n    this.minValue = minValue;\n  }\n  /**\n   * Update the .maxValue property\n   * @method updateMaxValue\n   */\n\n\n  updateMaxValue() {\n    const data = this.data;\n    let maxValue = data[0][0];\n\n    for (let i = 0; i !== data.length; i++) {\n      for (let j = 0; j !== data[i].length; j++) {\n        const v = data[i][j];\n\n        if (v > maxValue) {\n          maxValue = v;\n        }\n      }\n    }\n\n    this.maxValue = maxValue;\n  }\n  /**\n   * Set the height value at an index. Don't forget to update maxValue and minValue after you're done.\n   * @method setHeightValueAtIndex\n   * @param {integer} xi\n   * @param {integer} yi\n   * @param {number} value\n   */\n\n\n  setHeightValueAtIndex(xi, yi, value) {\n    const data = this.data;\n    data[xi][yi] = value; // Invalidate cache\n\n    this.clearCachedConvexTrianglePillar(xi, yi, false);\n\n    if (xi > 0) {\n      this.clearCachedConvexTrianglePillar(xi - 1, yi, true);\n      this.clearCachedConvexTrianglePillar(xi - 1, yi, false);\n    }\n\n    if (yi > 0) {\n      this.clearCachedConvexTrianglePillar(xi, yi - 1, true);\n      this.clearCachedConvexTrianglePillar(xi, yi - 1, false);\n    }\n\n    if (yi > 0 && xi > 0) {\n      this.clearCachedConvexTrianglePillar(xi - 1, yi - 1, true);\n    }\n  }\n  /**\n   * Get max/min in a rectangle in the matrix data\n   * @method getRectMinMax\n   * @param  {integer} iMinX\n   * @param  {integer} iMinY\n   * @param  {integer} iMaxX\n   * @param  {integer} iMaxY\n   * @param  {array} [result] An array to store the results in.\n   * @return {array} The result array, if it was passed in. Minimum will be at position 0 and max at 1.\n   */\n\n\n  getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, result = []) {\n    // Get max and min of the data\n    const data = this.data; // Set first value\n\n    let max = this.minValue;\n\n    for (let i = iMinX; i <= iMaxX; i++) {\n      for (let j = iMinY; j <= iMaxY; j++) {\n        const height = data[i][j];\n\n        if (height > max) {\n          max = height;\n        }\n      }\n    }\n\n    result[0] = this.minValue;\n    result[1] = max;\n  }\n  /**\n   * Get the index of a local position on the heightfield. The indexes indicate the rectangles, so if your terrain is made of N x N height data points, you will have rectangle indexes ranging from 0 to N-1.\n   * @method getIndexOfPosition\n   * @param  {number} x\n   * @param  {number} y\n   * @param  {array} result Two-element array\n   * @param  {boolean} clamp If the position should be clamped to the heightfield edge.\n   * @return {boolean}\n   */\n\n\n  getIndexOfPosition(x, y, result, clamp) {\n    // Get the index of the data points to test against\n    const w = this.elementSize;\n    const data = this.data;\n    let xi = Math.floor(x / w);\n    let yi = Math.floor(y / w);\n    result[0] = xi;\n    result[1] = yi;\n\n    if (clamp) {\n      // Clamp index to edges\n      if (xi < 0) {\n        xi = 0;\n      }\n\n      if (yi < 0) {\n        yi = 0;\n      }\n\n      if (xi >= data.length - 1) {\n        xi = data.length - 1;\n      }\n\n      if (yi >= data[0].length - 1) {\n        yi = data[0].length - 1;\n      }\n    } // Bail out if we are out of the terrain\n\n\n    if (xi < 0 || yi < 0 || xi >= data.length - 1 || yi >= data[0].length - 1) {\n      return false;\n    }\n\n    return true;\n  }\n\n  getTriangleAt(x, y, edgeClamp, a, b, c) {\n    const idx = getHeightAt_idx;\n    this.getIndexOfPosition(x, y, idx, edgeClamp);\n    let xi = idx[0];\n    let yi = idx[1];\n    const data = this.data;\n\n    if (edgeClamp) {\n      xi = Math.min(data.length - 2, Math.max(0, xi));\n      yi = Math.min(data[0].length - 2, Math.max(0, yi));\n    }\n\n    const elementSize = this.elementSize;\n    const lowerDist2 = (x / elementSize - xi) ** 2 + (y / elementSize - yi) ** 2;\n    const upperDist2 = (x / elementSize - (xi + 1)) ** 2 + (y / elementSize - (yi + 1)) ** 2;\n    const upper = lowerDist2 > upperDist2;\n    this.getTriangle(xi, yi, upper, a, b, c);\n    return upper;\n  }\n\n  getNormalAt(x, y, edgeClamp, result) {\n    const a = getNormalAt_a;\n    const b = getNormalAt_b;\n    const c = getNormalAt_c;\n    const e0 = getNormalAt_e0;\n    const e1 = getNormalAt_e1;\n    this.getTriangleAt(x, y, edgeClamp, a, b, c);\n    b.vsub(a, e0);\n    c.vsub(a, e1);\n    e0.cross(e1, result);\n    result.normalize();\n  }\n  /**\n   * Get an AABB of a square in the heightfield\n   * @param  {number} xi\n   * @param  {number} yi\n   * @param  {AABB} result\n   */\n\n\n  getAabbAtIndex(xi, yi, {\n    lowerBound,\n    upperBound\n  }) {\n    const data = this.data;\n    const elementSize = this.elementSize;\n    lowerBound.set(xi * elementSize, yi * elementSize, data[xi][yi]);\n    upperBound.set((xi + 1) * elementSize, (yi + 1) * elementSize, data[xi + 1][yi + 1]);\n  }\n  /**\n   * Get the height in the heightfield at a given position\n   * @param  {number} x\n   * @param  {number} y\n   * @param  {boolean} edgeClamp\n   * @return {number}\n   */\n\n\n  getHeightAt(x, y, edgeClamp) {\n    const data = this.data;\n    const a = getHeightAt_a;\n    const b = getHeightAt_b;\n    const c = getHeightAt_c;\n    const idx = getHeightAt_idx;\n    this.getIndexOfPosition(x, y, idx, edgeClamp);\n    let xi = idx[0];\n    let yi = idx[1];\n\n    if (edgeClamp) {\n      xi = Math.min(data.length - 2, Math.max(0, xi));\n      yi = Math.min(data[0].length - 2, Math.max(0, yi));\n    }\n\n    const upper = this.getTriangleAt(x, y, edgeClamp, a, b, c);\n    barycentricWeights(x, y, a.x, a.y, b.x, b.y, c.x, c.y, getHeightAt_weights);\n    const w = getHeightAt_weights;\n\n    if (upper) {\n      // Top triangle verts\n      return data[xi + 1][yi + 1] * w.x + data[xi][yi + 1] * w.y + data[xi + 1][yi] * w.z;\n    } else {\n      // Top triangle verts\n      return data[xi][yi] * w.x + data[xi + 1][yi] * w.y + data[xi][yi + 1] * w.z;\n    }\n  }\n\n  getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle) {\n    return xi + \"_\" + yi + \"_\" + (getUpperTriangle ? 1 : 0);\n  }\n\n  getCachedConvexTrianglePillar(xi, yi, getUpperTriangle) {\n    return this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];\n  }\n\n  setCachedConvexTrianglePillar(xi, yi, getUpperTriangle, convex, offset) {\n    this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)] = {\n      convex,\n      offset\n    };\n  }\n\n  clearCachedConvexTrianglePillar(xi, yi, getUpperTriangle) {\n    delete this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];\n  }\n  /**\n   * Get a triangle from the heightfield\n   * @param  {number} xi\n   * @param  {number} yi\n   * @param  {boolean} upper\n   * @param  {Vec3} a\n   * @param  {Vec3} b\n   * @param  {Vec3} c\n   */\n\n\n  getTriangle(xi, yi, upper, a, b, c) {\n    const data = this.data;\n    const elementSize = this.elementSize;\n\n    if (upper) {\n      // Top triangle verts\n      a.set((xi + 1) * elementSize, (yi + 1) * elementSize, data[xi + 1][yi + 1]);\n      b.set(xi * elementSize, (yi + 1) * elementSize, data[xi][yi + 1]);\n      c.set((xi + 1) * elementSize, yi * elementSize, data[xi + 1][yi]);\n    } else {\n      // Top triangle verts\n      a.set(xi * elementSize, yi * elementSize, data[xi][yi]);\n      b.set((xi + 1) * elementSize, yi * elementSize, data[xi + 1][yi]);\n      c.set(xi * elementSize, (yi + 1) * elementSize, data[xi][yi + 1]);\n    }\n  }\n  /**\n   * Get a triangle in the terrain in the form of a triangular convex shape.\n   * @method getConvexTrianglePillar\n   * @param  {integer} i\n   * @param  {integer} j\n   * @param  {boolean} getUpperTriangle\n   */\n\n\n  getConvexTrianglePillar(xi, yi, getUpperTriangle) {\n    let result = this.pillarConvex;\n    let offsetResult = this.pillarOffset;\n\n    if (this.cacheEnabled) {\n      const data = this.getCachedConvexTrianglePillar(xi, yi, getUpperTriangle);\n\n      if (data) {\n        this.pillarConvex = data.convex;\n        this.pillarOffset = data.offset;\n        return;\n      }\n\n      result = new ConvexPolyhedron();\n      offsetResult = new Vec3();\n      this.pillarConvex = result;\n      this.pillarOffset = offsetResult;\n    }\n\n    const data = this.data;\n    const elementSize = this.elementSize;\n    const faces = result.faces; // Reuse verts if possible\n\n    result.vertices.length = 6;\n\n    for (let i = 0; i < 6; i++) {\n      if (!result.vertices[i]) {\n        result.vertices[i] = new Vec3();\n      }\n    } // Reuse faces if possible\n\n\n    faces.length = 5;\n\n    for (let i = 0; i < 5; i++) {\n      if (!faces[i]) {\n        faces[i] = [];\n      }\n    }\n\n    const verts = result.vertices;\n    const h = (Math.min(data[xi][yi], data[xi + 1][yi], data[xi][yi + 1], data[xi + 1][yi + 1]) - this.minValue) / 2 + this.minValue;\n\n    if (!getUpperTriangle) {\n      // Center of the triangle pillar - all polygons are given relative to this one\n      offsetResult.set((xi + 0.25) * elementSize, // sort of center of a triangle\n      (yi + 0.25) * elementSize, h // vertical center\n      ); // Top triangle verts\n\n      verts[0].set(-0.25 * elementSize, -0.25 * elementSize, data[xi][yi] - h);\n      verts[1].set(0.75 * elementSize, -0.25 * elementSize, data[xi + 1][yi] - h);\n      verts[2].set(-0.25 * elementSize, 0.75 * elementSize, data[xi][yi + 1] - h); // bottom triangle verts\n\n      verts[3].set(-0.25 * elementSize, -0.25 * elementSize, -h - 1);\n      verts[4].set(0.75 * elementSize, -0.25 * elementSize, -h - 1);\n      verts[5].set(-0.25 * elementSize, 0.75 * elementSize, -h - 1); // top triangle\n\n      faces[0][0] = 0;\n      faces[0][1] = 1;\n      faces[0][2] = 2; // bottom triangle\n\n      faces[1][0] = 5;\n      faces[1][1] = 4;\n      faces[1][2] = 3; // -x facing quad\n\n      faces[2][0] = 0;\n      faces[2][1] = 2;\n      faces[2][2] = 5;\n      faces[2][3] = 3; // -y facing quad\n\n      faces[3][0] = 1;\n      faces[3][1] = 0;\n      faces[3][2] = 3;\n      faces[3][3] = 4; // +xy facing quad\n\n      faces[4][0] = 4;\n      faces[4][1] = 5;\n      faces[4][2] = 2;\n      faces[4][3] = 1;\n    } else {\n      // Center of the triangle pillar - all polygons are given relative to this one\n      offsetResult.set((xi + 0.75) * elementSize, // sort of center of a triangle\n      (yi + 0.75) * elementSize, h // vertical center\n      ); // Top triangle verts\n\n      verts[0].set(0.25 * elementSize, 0.25 * elementSize, data[xi + 1][yi + 1] - h);\n      verts[1].set(-0.75 * elementSize, 0.25 * elementSize, data[xi][yi + 1] - h);\n      verts[2].set(0.25 * elementSize, -0.75 * elementSize, data[xi + 1][yi] - h); // bottom triangle verts\n\n      verts[3].set(0.25 * elementSize, 0.25 * elementSize, -h - 1);\n      verts[4].set(-0.75 * elementSize, 0.25 * elementSize, -h - 1);\n      verts[5].set(0.25 * elementSize, -0.75 * elementSize, -h - 1); // Top triangle\n\n      faces[0][0] = 0;\n      faces[0][1] = 1;\n      faces[0][2] = 2; // bottom triangle\n\n      faces[1][0] = 5;\n      faces[1][1] = 4;\n      faces[1][2] = 3; // +x facing quad\n\n      faces[2][0] = 2;\n      faces[2][1] = 5;\n      faces[2][2] = 3;\n      faces[2][3] = 0; // +y facing quad\n\n      faces[3][0] = 3;\n      faces[3][1] = 4;\n      faces[3][2] = 1;\n      faces[3][3] = 0; // -xy facing quad\n\n      faces[4][0] = 1;\n      faces[4][1] = 4;\n      faces[4][2] = 5;\n      faces[4][3] = 2;\n    }\n\n    result.computeNormals();\n    result.computeEdges();\n    result.updateBoundingSphereRadius();\n    this.setCachedConvexTrianglePillar(xi, yi, getUpperTriangle, result, offsetResult);\n  }\n\n  calculateLocalInertia(mass, target = new Vec3()) {\n    target.set(0, 0, 0);\n    return target;\n  }\n\n  volume() {\n    return (// The terrain is infinite\n      Number.MAX_VALUE\n    );\n  }\n\n  calculateWorldAABB(pos, quat, min, max) {\n    // TODO: do it properly\n    min.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n    max.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n  }\n\n  updateBoundingSphereRadius() {\n    // Use the bounding box of the min/max values\n    const data = this.data;\n    const s = this.elementSize;\n    this.boundingSphereRadius = new Vec3(data.length * s, data[0].length * s, Math.max(Math.abs(this.maxValue), Math.abs(this.minValue))).length();\n  }\n  /**\n   * Sets the height values from an image. Currently only supported in browser.\n   * @method setHeightsFromImage\n   * @param {Image} image\n   * @param {Vec3} scale\n   */\n\n\n  setHeightsFromImage(image, scale) {\n    const {\n      x,\n      z,\n      y\n    } = scale;\n    const canvas = document.createElement('canvas');\n    canvas.width = image.width;\n    canvas.height = image.height;\n    const context = canvas.getContext('2d');\n    context.drawImage(image, 0, 0);\n    const imageData = context.getImageData(0, 0, image.width, image.height);\n    const matrix = this.data;\n    matrix.length = 0;\n    this.elementSize = Math.abs(x) / imageData.width;\n\n    for (let i = 0; i < imageData.height; i++) {\n      const row = [];\n\n      for (let j = 0; j < imageData.width; j++) {\n        const a = imageData.data[(i * imageData.height + j) * 4];\n        const b = imageData.data[(i * imageData.height + j) * 4 + 1];\n        const c = imageData.data[(i * imageData.height + j) * 4 + 2];\n        const height = (a + b + c) / 4 / 255 * z;\n\n        if (x < 0) {\n          row.push(height);\n        } else {\n          row.unshift(height);\n        }\n      }\n\n      if (y < 0) {\n        matrix.unshift(row);\n      } else {\n        matrix.push(row);\n      }\n    }\n\n    this.updateMaxValue();\n    this.updateMinValue();\n    this.update();\n  }\n\n}\nconst getHeightAt_idx = [];\nconst getHeightAt_weights = new Vec3();\nconst getHeightAt_a = new Vec3();\nconst getHeightAt_b = new Vec3();\nconst getHeightAt_c = new Vec3();\nconst getNormalAt_a = new Vec3();\nconst getNormalAt_b = new Vec3();\nconst getNormalAt_c = new Vec3();\nconst getNormalAt_e0 = new Vec3();\nconst getNormalAt_e1 = new Vec3(); // from https://en.wikipedia.org/wiki/Barycentric_coordinate_system\n\nfunction barycentricWeights(x, y, ax, ay, bx, by, cx, cy, result) {\n  result.x = ((by - cy) * (x - cx) + (cx - bx) * (y - cy)) / ((by - cy) * (ax - cx) + (cx - bx) * (ay - cy));\n  result.y = ((cy - ay) * (x - cx) + (ax - cx) * (y - cy)) / ((by - cy) * (ax - cx) + (cx - bx) * (ay - cy));\n  result.z = 1 - result.x - result.y;\n}\n\n/**\r\n * @class OctreeNode\r\n * @constructor\r\n * @param {object} [options]\r\n * @param {Octree} [options.root]\r\n * @param {AABB} [options.aabb]\r\n */\nclass OctreeNode {\n  // The root node\n  // Boundary of this node\n  // Contained data at the current node level\n  // Children to this node\n  constructor(options = {}) {\n    this.root = options.root || null;\n    this.aabb = options.aabb ? options.aabb.clone() : new AABB();\n    this.data = [];\n    this.children = [];\n  }\n\n  reset() {\n    this.children.length = this.data.length = 0;\n  }\n  /**\r\n   * Insert data into this node\r\n   * @method insert\r\n   * @param  {AABB} aabb\r\n   * @param  {object} elementData\r\n   * @return {boolean} True if successful, otherwise false\r\n   */\n\n\n  insert(aabb, elementData, level = 0) {\n    const nodeData = this.data; // Ignore objects that do not belong in this node\n\n    if (!this.aabb.contains(aabb)) {\n      return false; // object cannot be added\n    }\n\n    const children = this.children;\n    const maxDepth = this.maxDepth || this.root.maxDepth;\n\n    if (level < maxDepth) {\n      // Subdivide if there are no children yet\n      let subdivided = false;\n\n      if (!children.length) {\n        this.subdivide();\n        subdivided = true;\n      } // add to whichever node will accept it\n\n\n      for (let i = 0; i !== 8; i++) {\n        if (children[i].insert(aabb, elementData, level + 1)) {\n          return true;\n        }\n      }\n\n      if (subdivided) {\n        // No children accepted! Might as well just remove em since they contain none\n        children.length = 0;\n      }\n    } // Too deep, or children didnt want it. add it in current node\n\n\n    nodeData.push(elementData);\n    return true;\n  }\n  /**\r\n   * Create 8 equally sized children nodes and put them in the .children array.\r\n   * @method subdivide\r\n   */\n\n\n  subdivide() {\n    const aabb = this.aabb;\n    const l = aabb.lowerBound;\n    const u = aabb.upperBound;\n    const children = this.children;\n    children.push(new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(0, 0, 0)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(1, 0, 0)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(1, 1, 0)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(1, 1, 1)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(0, 1, 1)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(0, 0, 1)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(1, 0, 1)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(0, 1, 0)\n      })\n    }));\n    u.vsub(l, halfDiagonal);\n    halfDiagonal.scale(0.5, halfDiagonal);\n    const root = this.root || this;\n\n    for (let i = 0; i !== 8; i++) {\n      const child = children[i]; // Set current node as root\n\n      child.root = root; // Compute bounds\n\n      const lowerBound = child.aabb.lowerBound;\n      lowerBound.x *= halfDiagonal.x;\n      lowerBound.y *= halfDiagonal.y;\n      lowerBound.z *= halfDiagonal.z;\n      lowerBound.vadd(l, lowerBound); // Upper bound is always lower bound + halfDiagonal\n\n      lowerBound.vadd(halfDiagonal, child.aabb.upperBound);\n    }\n  }\n  /**\r\n   * Get all data, potentially within an AABB\r\n   * @method aabbQuery\r\n   * @param  {AABB} aabb\r\n   * @param  {array} result\r\n   * @return {array} The \"result\" object\r\n   */\n\n\n  aabbQuery(aabb, result) {\n    const nodeData = this.data; // abort if the range does not intersect this node\n    // if (!this.aabb.overlaps(aabb)){\n    //     return result;\n    // }\n    // Add objects at this level\n    // Array.prototype.push.apply(result, nodeData);\n    // Add child data\n    // @todo unwrap recursion into a queue / loop, that's faster in JS\n\n    const children = this.children; // for (let i = 0, N = this.children.length; i !== N; i++) {\n    //     children[i].aabbQuery(aabb, result);\n    // }\n\n    const queue = [this];\n\n    while (queue.length) {\n      const node = queue.pop();\n\n      if (node.aabb.overlaps(aabb)) {\n        Array.prototype.push.apply(result, node.data);\n      }\n\n      Array.prototype.push.apply(queue, node.children);\n    }\n\n    return result;\n  }\n  /**\r\n   * Get all data, potentially intersected by a ray.\r\n   * @method rayQuery\r\n   * @param  {Ray} ray\r\n   * @param  {Transform} treeTransform\r\n   * @param  {array} result\r\n   * @return {array} The \"result\" object\r\n   */\n\n\n  rayQuery(ray, treeTransform, result) {\n    // Use aabb query for now.\n    // @todo implement real ray query which needs less lookups\n    ray.getAABB(tmpAABB$1);\n    tmpAABB$1.toLocalFrame(treeTransform, tmpAABB$1);\n    this.aabbQuery(tmpAABB$1, result);\n    return result;\n  }\n  /**\r\n   * @method removeEmptyNodes\r\n   */\n\n\n  removeEmptyNodes() {\n    for (let i = this.children.length - 1; i >= 0; i--) {\n      this.children[i].removeEmptyNodes();\n\n      if (!this.children[i].children.length && !this.children[i].data.length) {\n        this.children.splice(i, 1);\n      }\n    }\n  }\n\n}\n/**\r\n * @class Octree\r\n * @param {AABB} aabb The total AABB of the tree\r\n * @param {object} [options]\r\n * @param {number} [options.maxDepth=8] Maximum subdivision depth\r\n * @extends OctreeNode\r\n */\n\n\nclass Octree extends OctreeNode {\n  // Maximum subdivision depth\n  constructor(aabb, options = {}) {\n    super({\n      root: null,\n      aabb\n    });\n    this.maxDepth = typeof options.maxDepth !== 'undefined' ? options.maxDepth : 8;\n  }\n\n}\nconst halfDiagonal = new Vec3();\nconst tmpAABB$1 = new AABB();\n\n/**\n * @class Trimesh\n * @constructor\n * @param {array} vertices\n * @param {array} indices\n * @extends Shape\n * @example\n *     // How to make a mesh with a single triangle\n *     const vertices = [\n *         0, 0, 0, // vertex 0\n *         1, 0, 0, // vertex 1\n *         0, 1, 0  // vertex 2\n *     ];\n *     const indices = [\n *         0, 1, 2  // triangle 0\n *     ];\n *     const trimeshShape = new Trimesh(vertices, indices);\n */\nclass Trimesh extends Shape {\n  // Array of integers, indicating which vertices each triangle consists of. The length of this array is thus 3 times the number of triangles.\n  // The normals data.\n  // The local AABB of the mesh.\n  // References to vertex pairs, making up all unique edges in the trimesh.\n  // Local scaling of the mesh. Use .setScale() to set it.\n  // The indexed triangles. Use .updateTree() to update it.\n  constructor(vertices, indices) {\n    super({\n      type: Shape.types.TRIMESH\n    });\n    this.vertices = new Float32Array(vertices);\n    this.indices = new Int16Array(indices);\n    this.normals = new Float32Array(indices.length);\n    this.aabb = new AABB();\n    this.edges = null;\n    this.scale = new Vec3(1, 1, 1);\n    this.tree = new Octree();\n    this.updateEdges();\n    this.updateNormals();\n    this.updateAABB();\n    this.updateBoundingSphereRadius();\n    this.updateTree();\n  }\n  /**\n   * @method updateTree\n   */\n\n\n  updateTree() {\n    const tree = this.tree;\n    tree.reset();\n    tree.aabb.copy(this.aabb);\n    const scale = this.scale; // The local mesh AABB is scaled, but the octree AABB should be unscaled\n\n    tree.aabb.lowerBound.x *= 1 / scale.x;\n    tree.aabb.lowerBound.y *= 1 / scale.y;\n    tree.aabb.lowerBound.z *= 1 / scale.z;\n    tree.aabb.upperBound.x *= 1 / scale.x;\n    tree.aabb.upperBound.y *= 1 / scale.y;\n    tree.aabb.upperBound.z *= 1 / scale.z; // Insert all triangles\n\n    const triangleAABB = new AABB();\n    const a = new Vec3();\n    const b = new Vec3();\n    const c = new Vec3();\n    const points = [a, b, c];\n\n    for (let i = 0; i < this.indices.length / 3; i++) {\n      //this.getTriangleVertices(i, a, b, c);\n      // Get unscaled triangle verts\n      const i3 = i * 3;\n\n      this._getUnscaledVertex(this.indices[i3], a);\n\n      this._getUnscaledVertex(this.indices[i3 + 1], b);\n\n      this._getUnscaledVertex(this.indices[i3 + 2], c);\n\n      triangleAABB.setFromPoints(points);\n      tree.insert(triangleAABB, i);\n    }\n\n    tree.removeEmptyNodes();\n  }\n  /**\n   * Get triangles in a local AABB from the trimesh.\n   * @method getTrianglesInAABB\n   * @param  {AABB} aabb\n   * @param  {array} result An array of integers, referencing the queried triangles.\n   */\n\n\n  getTrianglesInAABB(aabb, result) {\n    unscaledAABB.copy(aabb); // Scale it to local\n\n    const scale = this.scale;\n    const isx = scale.x;\n    const isy = scale.y;\n    const isz = scale.z;\n    const l = unscaledAABB.lowerBound;\n    const u = unscaledAABB.upperBound;\n    l.x /= isx;\n    l.y /= isy;\n    l.z /= isz;\n    u.x /= isx;\n    u.y /= isy;\n    u.z /= isz;\n    return this.tree.aabbQuery(unscaledAABB, result);\n  }\n  /**\n   * @method setScale\n   * @param {Vec3} scale\n   */\n\n\n  setScale(scale) {\n    const wasUniform = this.scale.x === this.scale.y && this.scale.y === this.scale.z;\n    const isUniform = scale.x === scale.y && scale.y === scale.z;\n\n    if (!(wasUniform && isUniform)) {\n      // Non-uniform scaling. Need to update normals.\n      this.updateNormals();\n    }\n\n    this.scale.copy(scale);\n    this.updateAABB();\n    this.updateBoundingSphereRadius();\n  }\n  /**\n   * Compute the normals of the faces. Will save in the .normals array.\n   * @method updateNormals\n   */\n\n\n  updateNormals() {\n    const n = computeNormals_n; // Generate normals\n\n    const normals = this.normals;\n\n    for (let i = 0; i < this.indices.length / 3; i++) {\n      const i3 = i * 3;\n      const a = this.indices[i3];\n      const b = this.indices[i3 + 1];\n      const c = this.indices[i3 + 2];\n      this.getVertex(a, va);\n      this.getVertex(b, vb);\n      this.getVertex(c, vc);\n      Trimesh.computeNormal(vb, va, vc, n);\n      normals[i3] = n.x;\n      normals[i3 + 1] = n.y;\n      normals[i3 + 2] = n.z;\n    }\n  }\n  /**\n   * Update the .edges property\n   * @method updateEdges\n   */\n\n\n  updateEdges() {\n    const edges = {};\n\n    const add = (a, b) => {\n      const key = a < b ? a + \"_\" + b : b + \"_\" + a;\n      edges[key] = true;\n    };\n\n    for (let i = 0; i < this.indices.length / 3; i++) {\n      const i3 = i * 3;\n      const a = this.indices[i3];\n      const b = this.indices[i3 + 1];\n      const c = this.indices[i3 + 2];\n      add(a, b);\n      add(b, c);\n      add(c, a);\n    }\n\n    const keys = Object.keys(edges);\n    this.edges = new Int16Array(keys.length * 2);\n\n    for (let i = 0; i < keys.length; i++) {\n      const indices = keys[i].split('_');\n      this.edges[2 * i] = parseInt(indices[0], 10);\n      this.edges[2 * i + 1] = parseInt(indices[1], 10);\n    }\n  }\n  /**\n   * Get an edge vertex\n   * @method getEdgeVertex\n   * @param  {number} edgeIndex\n   * @param  {number} firstOrSecond 0 or 1, depending on which one of the vertices you need.\n   * @param  {Vec3} vertexStore Where to store the result\n   */\n\n\n  getEdgeVertex(edgeIndex, firstOrSecond, vertexStore) {\n    const vertexIndex = this.edges[edgeIndex * 2 + (firstOrSecond ? 1 : 0)];\n    this.getVertex(vertexIndex, vertexStore);\n  }\n  /**\n   * Get a vector along an edge.\n   * @method getEdgeVector\n   * @param  {number} edgeIndex\n   * @param  {Vec3} vectorStore\n   */\n\n\n  getEdgeVector(edgeIndex, vectorStore) {\n    const va = getEdgeVector_va;\n    const vb = getEdgeVector_vb;\n    this.getEdgeVertex(edgeIndex, 0, va);\n    this.getEdgeVertex(edgeIndex, 1, vb);\n    vb.vsub(va, vectorStore);\n  }\n  /**\n   * Get vertex i.\n   * @method getVertex\n   * @param  {number} i\n   * @param  {Vec3} out\n   * @return {Vec3} The \"out\" vector object\n   */\n\n\n  getVertex(i, out) {\n    const scale = this.scale;\n\n    this._getUnscaledVertex(i, out);\n\n    out.x *= scale.x;\n    out.y *= scale.y;\n    out.z *= scale.z;\n    return out;\n  }\n  /**\n   * Get raw vertex i\n   * @private\n   * @method _getUnscaledVertex\n   * @param  {number} i\n   * @param  {Vec3} out\n   * @return {Vec3} The \"out\" vector object\n   */\n\n\n  _getUnscaledVertex(i, out) {\n    const i3 = i * 3;\n    const vertices = this.vertices;\n    return out.set(vertices[i3], vertices[i3 + 1], vertices[i3 + 2]);\n  }\n  /**\n   * Get a vertex from the trimesh,transformed by the given position and quaternion.\n   * @method getWorldVertex\n   * @param  {number} i\n   * @param  {Vec3} pos\n   * @param  {Quaternion} quat\n   * @param  {Vec3} out\n   * @return {Vec3} The \"out\" vector object\n   */\n\n\n  getWorldVertex(i, pos, quat, out) {\n    this.getVertex(i, out);\n    Transform.pointToWorldFrame(pos, quat, out, out);\n    return out;\n  }\n  /**\n   * Get the three vertices for triangle i.\n   * @method getTriangleVertices\n   * @param  {number} i\n   * @param  {Vec3} a\n   * @param  {Vec3} b\n   * @param  {Vec3} c\n   */\n\n\n  getTriangleVertices(i, a, b, c) {\n    const i3 = i * 3;\n    this.getVertex(this.indices[i3], a);\n    this.getVertex(this.indices[i3 + 1], b);\n    this.getVertex(this.indices[i3 + 2], c);\n  }\n  /**\n   * Compute the normal of triangle i.\n   * @method getNormal\n   * @param  {Number} i\n   * @param  {Vec3} target\n   * @return {Vec3} The \"target\" vector object\n   */\n\n\n  getNormal(i, target) {\n    const i3 = i * 3;\n    return target.set(this.normals[i3], this.normals[i3 + 1], this.normals[i3 + 2]);\n  }\n  /**\n   * @method calculateLocalInertia\n   * @param  {Number} mass\n   * @param  {Vec3} target\n   * @return {Vec3} The \"target\" vector object\n   */\n\n\n  calculateLocalInertia(mass, target) {\n    // Approximate with box inertia\n    // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it\n    this.computeLocalAABB(cli_aabb);\n    const x = cli_aabb.upperBound.x - cli_aabb.lowerBound.x;\n    const y = cli_aabb.upperBound.y - cli_aabb.lowerBound.y;\n    const z = cli_aabb.upperBound.z - cli_aabb.lowerBound.z;\n    return target.set(1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * z * 2 * z), 1.0 / 12.0 * mass * (2 * x * 2 * x + 2 * z * 2 * z), 1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * x * 2 * x));\n  }\n  /**\n   * Compute the local AABB for the trimesh\n   * @method computeLocalAABB\n   * @param  {AABB} aabb\n   */\n\n\n  computeLocalAABB(aabb) {\n    const l = aabb.lowerBound;\n    const u = aabb.upperBound;\n    const n = this.vertices.length;\n    const vertices = this.vertices;\n    const v = computeLocalAABB_worldVert;\n    this.getVertex(0, v);\n    l.copy(v);\n    u.copy(v);\n\n    for (let i = 0; i !== n; i++) {\n      this.getVertex(i, v);\n\n      if (v.x < l.x) {\n        l.x = v.x;\n      } else if (v.x > u.x) {\n        u.x = v.x;\n      }\n\n      if (v.y < l.y) {\n        l.y = v.y;\n      } else if (v.y > u.y) {\n        u.y = v.y;\n      }\n\n      if (v.z < l.z) {\n        l.z = v.z;\n      } else if (v.z > u.z) {\n        u.z = v.z;\n      }\n    }\n  }\n  /**\n   * Update the .aabb property\n   * @method updateAABB\n   */\n\n\n  updateAABB() {\n    this.computeLocalAABB(this.aabb);\n  }\n  /**\n   * Will update the .boundingSphereRadius property\n   * @method updateBoundingSphereRadius\n   */\n\n\n  updateBoundingSphereRadius() {\n    // Assume points are distributed with local (0,0,0) as center\n    let max2 = 0;\n    const vertices = this.vertices;\n    const v = new Vec3();\n\n    for (let i = 0, N = vertices.length / 3; i !== N; i++) {\n      this.getVertex(i, v);\n      const norm2 = v.lengthSquared();\n\n      if (norm2 > max2) {\n        max2 = norm2;\n      }\n    }\n\n    this.boundingSphereRadius = Math.sqrt(max2);\n  }\n  /**\n   * @method calculateWorldAABB\n   * @param {Vec3}        pos\n   * @param {Quaternion}  quat\n   * @param {Vec3}        min\n   * @param {Vec3}        max\n   */\n\n\n  calculateWorldAABB(pos, quat, min, max) {\n    /*\n        const n = this.vertices.length / 3,\n            verts = this.vertices;\n        const minx,miny,minz,maxx,maxy,maxz;\n         const v = tempWorldVertex;\n        for(let i=0; i<n; i++){\n            this.getVertex(i, v);\n            quat.vmult(v, v);\n            pos.vadd(v, v);\n            if (v.x < minx || minx===undefined){\n                minx = v.x;\n            } else if(v.x > maxx || maxx===undefined){\n                maxx = v.x;\n            }\n             if (v.y < miny || miny===undefined){\n                miny = v.y;\n            } else if(v.y > maxy || maxy===undefined){\n                maxy = v.y;\n            }\n             if (v.z < minz || minz===undefined){\n                minz = v.z;\n            } else if(v.z > maxz || maxz===undefined){\n                maxz = v.z;\n            }\n        }\n        min.set(minx,miny,minz);\n        max.set(maxx,maxy,maxz);\n        */\n    // Faster approximation using local AABB\n    const frame = calculateWorldAABB_frame;\n    const result = calculateWorldAABB_aabb;\n    frame.position = pos;\n    frame.quaternion = quat;\n    this.aabb.toWorldFrame(frame, result);\n    min.copy(result.lowerBound);\n    max.copy(result.upperBound);\n  }\n  /**\n   * Get approximate volume\n   * @method volume\n   * @return {Number}\n   */\n\n\n  volume() {\n    return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;\n  }\n\n}\nconst computeNormals_n = new Vec3();\nconst unscaledAABB = new AABB();\nconst getEdgeVector_va = new Vec3();\nconst getEdgeVector_vb = new Vec3();\n/**\n * Get face normal given 3 vertices\n * @static\n * @method computeNormal\n * @param {Vec3} va\n * @param {Vec3} vb\n * @param {Vec3} vc\n * @param {Vec3} target\n */\n\nconst cb = new Vec3();\nconst ab = new Vec3();\n\nTrimesh.computeNormal = (va, vb, vc, target) => {\n  vb.vsub(va, ab);\n  vc.vsub(vb, cb);\n  cb.cross(ab, target);\n\n  if (!target.isZero()) {\n    target.normalize();\n  }\n};\n\nconst va = new Vec3();\nconst vb = new Vec3();\nconst vc = new Vec3();\nconst cli_aabb = new AABB();\nconst computeLocalAABB_worldVert = new Vec3();\nconst calculateWorldAABB_frame = new Transform();\nconst calculateWorldAABB_aabb = new AABB();\n/**\n * Create a Trimesh instance, shaped as a torus.\n * @static\n * @method createTorus\n * @param  {number} [radius=1]\n * @param  {number} [tube=0.5]\n * @param  {number} [radialSegments=8]\n * @param  {number} [tubularSegments=6]\n * @param  {number} [arc=6.283185307179586]\n * @return {Trimesh} A torus\n */\n\nTrimesh.createTorus = (radius = 1, tube = 0.5, radialSegments = 8, tubularSegments = 6, arc = Math.PI * 2) => {\n  const vertices = [];\n  const indices = [];\n\n  for (let j = 0; j <= radialSegments; j++) {\n    for (let i = 0; i <= tubularSegments; i++) {\n      const u = i / tubularSegments * arc;\n      const v = j / radialSegments * Math.PI * 2;\n      const x = (radius + tube * Math.cos(v)) * Math.cos(u);\n      const y = (radius + tube * Math.cos(v)) * Math.sin(u);\n      const z = tube * Math.sin(v);\n      vertices.push(x, y, z);\n    }\n  }\n\n  for (let j = 1; j <= radialSegments; j++) {\n    for (let i = 1; i <= tubularSegments; i++) {\n      const a = (tubularSegments + 1) * j + i - 1;\n      const b = (tubularSegments + 1) * (j - 1) + i - 1;\n      const c = (tubularSegments + 1) * (j - 1) + i;\n      const d = (tubularSegments + 1) * j + i;\n      indices.push(a, b, d);\n      indices.push(b, c, d);\n    }\n  }\n\n  return new Trimesh(vertices, indices);\n};\n\n/**\r\n * Constraint equation solver base class.\r\n * @class Solver\r\n * @constructor\r\n * @author schteppe / https://github.com/schteppe\r\n */\nclass Solver {\n  // All equations to be solved\n  constructor() {\n    this.equations = [];\n  }\n  /**\r\n   * Should be implemented in subclasses!\r\n   * @method solve\r\n   * @param  {Number} dt\r\n   * @param  {World} world\r\n   * @return {Number} number of iterations performed\r\n   */\n\n\n  solve(dt, world) {\n    return (// Should return the number of iterations done!\n      0\n    );\n  }\n  /**\r\n   * Add an equation\r\n   * @method addEquation\r\n   * @param {Equation} eq\r\n   */\n\n\n  addEquation(eq) {\n    if (eq.enabled) {\n      this.equations.push(eq);\n    }\n  }\n  /**\r\n   * Remove an equation\r\n   * @method removeEquation\r\n   * @param {Equation} eq\r\n   */\n\n\n  removeEquation(eq) {\n    const eqs = this.equations;\n    const i = eqs.indexOf(eq);\n\n    if (i !== -1) {\n      eqs.splice(i, 1);\n    }\n  }\n  /**\r\n   * Add all equations\r\n   * @method removeAllEquations\r\n   */\n\n\n  removeAllEquations() {\n    this.equations.length = 0;\n  }\n\n}\n\n/**\r\n * Constraint equation Gauss-Seidel solver.\r\n * @class GSSolver\r\n * @constructor\r\n * @todo The spook parameters should be specified for each constraint, not globally.\r\n * @author schteppe / https://github.com/schteppe\r\n * @see https://www8.cs.umu.se/kurser/5DV058/VT09/lectures/spooknotes.pdf\r\n * @extends Solver\r\n */\nclass GSSolver extends Solver {\n  // The number of solver iterations determines quality of the constraints in the world. The more iterations, the more correct simulation. More iterations need more computations though. If you have a large gravity force in your world, you will need more iterations.\n  // When tolerance is reached, the system is assumed to be converged.\n  constructor() {\n    super();\n    this.iterations = 10;\n    this.tolerance = 1e-7;\n  }\n  /**\r\n   * Solve\r\n   * @method solve\r\n   * @param  {Number} dt\r\n   * @param  {World} world\r\n   * @return {Number} number of iterations performed\r\n   */\n\n\n  solve(dt, world) {\n    let iter = 0;\n    const maxIter = this.iterations;\n    const tolSquared = this.tolerance * this.tolerance;\n    const equations = this.equations;\n    const Neq = equations.length;\n    const bodies = world.bodies;\n    const Nbodies = bodies.length;\n    const h = dt;\n    let B;\n    let invC;\n    let deltalambda;\n    let deltalambdaTot;\n    let GWlambda;\n    let lambdaj; // Update solve mass\n\n    if (Neq !== 0) {\n      for (let i = 0; i !== Nbodies; i++) {\n        bodies[i].updateSolveMassProperties();\n      }\n    } // Things that does not change during iteration can be computed once\n\n\n    const invCs = GSSolver_solve_invCs;\n    const Bs = GSSolver_solve_Bs;\n    const lambda = GSSolver_solve_lambda;\n    invCs.length = Neq;\n    Bs.length = Neq;\n    lambda.length = Neq;\n\n    for (let i = 0; i !== Neq; i++) {\n      const c = equations[i];\n      lambda[i] = 0.0;\n      Bs[i] = c.computeB(h);\n      invCs[i] = 1.0 / c.computeC();\n    }\n\n    if (Neq !== 0) {\n      // Reset vlambda\n      for (let i = 0; i !== Nbodies; i++) {\n        const b = bodies[i];\n        const vlambda = b.vlambda;\n        const wlambda = b.wlambda;\n        vlambda.set(0, 0, 0);\n        wlambda.set(0, 0, 0);\n      } // Iterate over equations\n\n\n      for (iter = 0; iter !== maxIter; iter++) {\n        // Accumulate the total error for each iteration.\n        deltalambdaTot = 0.0;\n\n        for (let j = 0; j !== Neq; j++) {\n          const c = equations[j]; // Compute iteration\n\n          B = Bs[j];\n          invC = invCs[j];\n          lambdaj = lambda[j];\n          GWlambda = c.computeGWlambda();\n          deltalambda = invC * (B - GWlambda - c.eps * lambdaj); // Clamp if we are not within the min/max interval\n\n          if (lambdaj + deltalambda < c.minForce) {\n            deltalambda = c.minForce - lambdaj;\n          } else if (lambdaj + deltalambda > c.maxForce) {\n            deltalambda = c.maxForce - lambdaj;\n          }\n\n          lambda[j] += deltalambda;\n          deltalambdaTot += deltalambda > 0.0 ? deltalambda : -deltalambda; // abs(deltalambda)\n\n          c.addToWlambda(deltalambda);\n        } // If the total error is small enough - stop iterate\n\n\n        if (deltalambdaTot * deltalambdaTot < tolSquared) {\n          break;\n        }\n      } // Add result to velocity\n\n\n      for (let i = 0; i !== Nbodies; i++) {\n        const b = bodies[i];\n        const v = b.velocity;\n        const w = b.angularVelocity;\n        b.vlambda.vmul(b.linearFactor, b.vlambda);\n        v.vadd(b.vlambda, v);\n        b.wlambda.vmul(b.angularFactor, b.wlambda);\n        w.vadd(b.wlambda, w);\n      } // Set the .multiplier property of each equation\n\n\n      let l = equations.length;\n      const invDt = 1 / h;\n\n      while (l--) {\n        equations[l].multiplier = lambda[l] * invDt;\n      }\n    }\n\n    return iter;\n  }\n\n}\nconst GSSolver_solve_lambda = []; // Just temporary number holders that we want to reuse each solve.\n\nconst GSSolver_solve_invCs = [];\nconst GSSolver_solve_Bs = [];\n\n/**\r\n * Splits the equations into islands and solves them independently. Can improve performance.\r\n * @class SplitSolver\r\n * @constructor\r\n * @extends Solver\r\n * @param {Solver} subsolver\r\n */\nclass SplitSolver extends Solver {\n  // The number of solver iterations determines quality of the constraints in the world. The more iterations, the more correct simulation. More iterations need more computations though. If you have a large gravity force in your world, you will need more iterations.\n  // When tolerance is reached, the system is assumed to be converged.\n  constructor(subsolver) {\n    super();\n    this.iterations = 10;\n    this.tolerance = 1e-7;\n    this.subsolver = subsolver;\n    this.nodes = [];\n    this.nodePool = []; // Create needed nodes, reuse if possible\n\n    while (this.nodePool.length < 128) {\n      this.nodePool.push(this.createNode());\n    }\n  }\n\n  createNode() {\n    return {\n      body: null,\n      children: [],\n      eqs: [],\n      visited: false\n    };\n  }\n  /**\r\n   * Solve the subsystems\r\n   * @method solve\r\n   * @param  {Number} dt\r\n   * @param  {World} world\r\n   * @return {Number} number of iterations performed\r\n   */\n\n\n  solve(dt, world) {\n    const nodes = SplitSolver_solve_nodes;\n    const nodePool = this.nodePool;\n    const bodies = world.bodies;\n    const equations = this.equations;\n    const Neq = equations.length;\n    const Nbodies = bodies.length;\n    const subsolver = this.subsolver; // Create needed nodes, reuse if possible\n\n    while (nodePool.length < Nbodies) {\n      nodePool.push(this.createNode());\n    }\n\n    nodes.length = Nbodies;\n\n    for (let i = 0; i < Nbodies; i++) {\n      nodes[i] = nodePool[i];\n    } // Reset node values\n\n\n    for (let i = 0; i !== Nbodies; i++) {\n      const node = nodes[i];\n      node.body = bodies[i];\n      node.children.length = 0;\n      node.eqs.length = 0;\n      node.visited = false;\n    }\n\n    for (let k = 0; k !== Neq; k++) {\n      const eq = equations[k];\n      const i = bodies.indexOf(eq.bi);\n      const j = bodies.indexOf(eq.bj);\n      const ni = nodes[i];\n      const nj = nodes[j];\n      ni.children.push(nj);\n      ni.eqs.push(eq);\n      nj.children.push(ni);\n      nj.eqs.push(eq);\n    }\n\n    let child;\n    let n = 0;\n    let eqs = SplitSolver_solve_eqs;\n    subsolver.tolerance = this.tolerance;\n    subsolver.iterations = this.iterations;\n    const dummyWorld = SplitSolver_solve_dummyWorld;\n\n    while (child = getUnvisitedNode(nodes)) {\n      eqs.length = 0;\n      dummyWorld.bodies.length = 0;\n      bfs(child, visitFunc, dummyWorld.bodies, eqs);\n      const Neqs = eqs.length;\n      eqs = eqs.sort(sortById);\n\n      for (let i = 0; i !== Neqs; i++) {\n        subsolver.addEquation(eqs[i]);\n      }\n\n      const iter = subsolver.solve(dt, dummyWorld);\n      subsolver.removeAllEquations();\n      n++;\n    }\n\n    return n;\n  }\n\n} // Returns the number of subsystems\n\nconst SplitSolver_solve_nodes = []; // All allocated node objects\n\nconst SplitSolver_solve_eqs = []; // Temp array\n\nconst SplitSolver_solve_dummyWorld = {\n  bodies: []\n}; // Temp object\n\nconst STATIC = Body.STATIC;\n\nfunction getUnvisitedNode(nodes) {\n  const Nnodes = nodes.length;\n\n  for (let i = 0; i !== Nnodes; i++) {\n    const node = nodes[i];\n\n    if (!node.visited && !(node.body.type & STATIC)) {\n      return node;\n    }\n  }\n\n  return false;\n}\n\nconst queue = [];\n\nfunction bfs(root, visitFunc, bds, eqs) {\n  queue.push(root);\n  root.visited = true;\n  visitFunc(root, bds, eqs);\n\n  while (queue.length) {\n    const node = queue.pop(); // Loop over unvisited child nodes\n\n    let child;\n\n    while (child = getUnvisitedNode(node.children)) {\n      child.visited = true;\n      visitFunc(child, bds, eqs);\n      queue.push(child);\n    }\n  }\n}\n\nfunction visitFunc(node, bds, eqs) {\n  bds.push(node.body);\n  const Neqs = node.eqs.length;\n\n  for (let i = 0; i !== Neqs; i++) {\n    const eq = node.eqs[i];\n\n    if (!eqs.includes(eq)) {\n      eqs.push(eq);\n    }\n  }\n}\n\nfunction sortById(a, b) {\n  return b.id - a.id;\n}\n\n/**\r\n * For pooling objects that can be reused.\r\n * @class Pool\r\n * @constructor\r\n */\nclass Pool {\n  constructor() {\n    this.objects = [];\n    this.type = Object;\n  }\n  /**\r\n   * Release an object after use\r\n   * @method release\r\n   * @param {Object} obj\r\n   */\n\n\n  release(...args) {\n    const Nargs = args.length;\n\n    for (let i = 0; i !== Nargs; i++) {\n      this.objects.push(args[i]);\n    }\n\n    return this;\n  }\n  /**\r\n   * Get an object\r\n   * @method get\r\n   * @return {mixed}\r\n   */\n\n\n  get() {\n    if (this.objects.length === 0) {\n      return this.constructObject();\n    } else {\n      return this.objects.pop();\n    }\n  }\n  /**\r\n   * Construct an object. Should be implemented in each subclass.\r\n   * @method constructObject\r\n   * @return {mixed}\r\n   */\n\n\n  constructObject() {\n    throw new Error('constructObject() not implemented in this Pool subclass yet!');\n  }\n  /**\r\n   * @method resize\r\n   * @param {number} size\r\n   * @return {Pool} Self, for chaining\r\n   */\n\n\n  resize(size) {\n    const objects = this.objects;\n\n    while (objects.length > size) {\n      objects.pop();\n    }\n\n    while (objects.length < size) {\n      objects.push(this.constructObject());\n    }\n\n    return this;\n  }\n\n}\n\n/**\r\n * @class Vec3Pool\r\n * @constructor\r\n * @extends Pool\r\n */\n\nclass Vec3Pool extends Pool {\n  constructor() {\n    super();\n    this.type = Vec3;\n  }\n  /**\r\n   * Construct a vector\r\n   * @method constructObject\r\n   * @return {Vec3}\r\n   */\n\n\n  constructObject() {\n    return new Vec3();\n  }\n\n}\n\nconst COLLISION_TYPES = {\n  sphereSphere: Shape.types.SPHERE,\n  spherePlane: Shape.types.SPHERE | Shape.types.PLANE,\n  boxBox: Shape.types.BOX | Shape.types.BOX,\n  sphereBox: Shape.types.SPHERE | Shape.types.BOX,\n  planeBox: Shape.types.PLANE | Shape.types.BOX,\n  convexConvex: Shape.types.CONVEXPOLYHEDRON,\n  sphereConvex: Shape.types.SPHERE | Shape.types.CONVEXPOLYHEDRON,\n  planeConvex: Shape.types.PLANE | Shape.types.CONVEXPOLYHEDRON,\n  boxConvex: Shape.types.BOX | Shape.types.CONVEXPOLYHEDRON,\n  sphereHeightfield: Shape.types.SPHERE | Shape.types.HEIGHTFIELD,\n  boxHeightfield: Shape.types.BOX | Shape.types.HEIGHTFIELD,\n  convexHeightfield: Shape.types.CONVEXPOLYHEDRON | Shape.types.HEIGHTFIELD,\n  sphereParticle: Shape.types.PARTICLE | Shape.types.SPHERE,\n  planeParticle: Shape.types.PLANE | Shape.types.PARTICLE,\n  boxParticle: Shape.types.BOX | Shape.types.PARTICLE,\n  convexParticle: Shape.types.PARTICLE | Shape.types.CONVEXPOLYHEDRON,\n  sphereTrimesh: Shape.types.SPHERE | Shape.types.TRIMESH,\n  planeTrimesh: Shape.types.PLANE | Shape.types.TRIMESH\n};\n\n/**\r\n * Helper class for the World. Generates ContactEquations.\r\n * @class Narrowphase\r\n * @constructor\r\n * @todo Sphere-ConvexPolyhedron contacts\r\n * @todo Contact reduction\r\n * @todo should move methods to prototype\r\n */\nclass Narrowphase {\n  // Internal storage of pooled contact points.\n  // Pooled vectors.\n  constructor(world) {\n    this.contactPointPool = [];\n    this.frictionEquationPool = [];\n    this.result = [];\n    this.frictionResult = [];\n    this.v3pool = new Vec3Pool();\n    this.world = world;\n    this.currentContactMaterial = world.defaultContactMaterial;\n    this.enableFrictionReduction = false;\n  }\n  /**\r\n   * Make a contact object, by using the internal pool or creating a new one.\r\n   * @method createContactEquation\r\n   * @param {Body} bi\r\n   * @param {Body} bj\r\n   * @param {Shape} si\r\n   * @param {Shape} sj\r\n   * @param {Shape} overrideShapeA\r\n   * @param {Shape} overrideShapeB\r\n   * @return {ContactEquation}\r\n   */\n\n\n  createContactEquation(bi, bj, si, sj, overrideShapeA, overrideShapeB) {\n    let c;\n\n    if (this.contactPointPool.length) {\n      c = this.contactPointPool.pop();\n      c.bi = bi;\n      c.bj = bj;\n    } else {\n      c = new ContactEquation(bi, bj);\n    }\n\n    c.enabled = bi.collisionResponse && bj.collisionResponse && si.collisionResponse && sj.collisionResponse;\n    const cm = this.currentContactMaterial;\n    c.restitution = cm.restitution;\n    c.setSpookParams(cm.contactEquationStiffness, cm.contactEquationRelaxation, this.world.dt);\n    const matA = si.material || bi.material;\n    const matB = sj.material || bj.material;\n\n    if (matA && matB && matA.restitution >= 0 && matB.restitution >= 0) {\n      c.restitution = matA.restitution * matB.restitution;\n    }\n\n    c.si = overrideShapeA || si;\n    c.sj = overrideShapeB || sj;\n    return c;\n  }\n\n  createFrictionEquationsFromContact(contactEquation, outArray) {\n    const bodyA = contactEquation.bi;\n    const bodyB = contactEquation.bj;\n    const shapeA = contactEquation.si;\n    const shapeB = contactEquation.sj;\n    const world = this.world;\n    const cm = this.currentContactMaterial; // If friction or restitution were specified in the material, use them\n\n    let friction = cm.friction;\n    const matA = shapeA.material || bodyA.material;\n    const matB = shapeB.material || bodyB.material;\n\n    if (matA && matB && matA.friction >= 0 && matB.friction >= 0) {\n      friction = matA.friction * matB.friction;\n    }\n\n    if (friction > 0) {\n      // Create 2 tangent equations\n      const mug = friction * world.gravity.length();\n      let reducedMass = bodyA.invMass + bodyB.invMass;\n\n      if (reducedMass > 0) {\n        reducedMass = 1 / reducedMass;\n      }\n\n      const pool = this.frictionEquationPool;\n      const c1 = pool.length ? pool.pop() : new FrictionEquation(bodyA, bodyB, mug * reducedMass);\n      const c2 = pool.length ? pool.pop() : new FrictionEquation(bodyA, bodyB, mug * reducedMass);\n      c1.bi = c2.bi = bodyA;\n      c1.bj = c2.bj = bodyB;\n      c1.minForce = c2.minForce = -mug * reducedMass;\n      c1.maxForce = c2.maxForce = mug * reducedMass; // Copy over the relative vectors\n\n      c1.ri.copy(contactEquation.ri);\n      c1.rj.copy(contactEquation.rj);\n      c2.ri.copy(contactEquation.ri);\n      c2.rj.copy(contactEquation.rj); // Construct tangents\n\n      contactEquation.ni.tangents(c1.t, c2.t); // Set spook params\n\n      c1.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, world.dt);\n      c2.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, world.dt);\n      c1.enabled = c2.enabled = contactEquation.enabled;\n      outArray.push(c1, c2);\n      return true;\n    }\n\n    return false;\n  } // Take the average N latest contact point on the plane.\n\n\n  createFrictionFromAverage(numContacts) {\n    // The last contactEquation\n    let c = this.result[this.result.length - 1]; // Create the result: two \"average\" friction equations\n\n    if (!this.createFrictionEquationsFromContact(c, this.frictionResult) || numContacts === 1) {\n      return;\n    }\n\n    const f1 = this.frictionResult[this.frictionResult.length - 2];\n    const f2 = this.frictionResult[this.frictionResult.length - 1];\n    averageNormal.setZero();\n    averageContactPointA.setZero();\n    averageContactPointB.setZero();\n    const bodyA = c.bi;\n    const bodyB = c.bj;\n\n    for (let i = 0; i !== numContacts; i++) {\n      c = this.result[this.result.length - 1 - i];\n\n      if (c.bi !== bodyA) {\n        averageNormal.vadd(c.ni, averageNormal);\n        averageContactPointA.vadd(c.ri, averageContactPointA);\n        averageContactPointB.vadd(c.rj, averageContactPointB);\n      } else {\n        averageNormal.vsub(c.ni, averageNormal);\n        averageContactPointA.vadd(c.rj, averageContactPointA);\n        averageContactPointB.vadd(c.ri, averageContactPointB);\n      }\n    }\n\n    const invNumContacts = 1 / numContacts;\n    averageContactPointA.scale(invNumContacts, f1.ri);\n    averageContactPointB.scale(invNumContacts, f1.rj);\n    f2.ri.copy(f1.ri); // Should be the same\n\n    f2.rj.copy(f1.rj);\n    averageNormal.normalize();\n    averageNormal.tangents(f1.t, f2.t); // return eq;\n  }\n  /**\r\n   * Generate all contacts between a list of body pairs\r\n   * @method getContacts\r\n   * @param {array} p1 Array of body indices\r\n   * @param {array} p2 Array of body indices\r\n   * @param {World} world\r\n   * @param {array} result Array to store generated contacts\r\n   * @param {array} oldcontacts Optional. Array of reusable contact objects\r\n   */\n\n\n  getContacts(p1, p2, world, result, oldcontacts, frictionResult, frictionPool) {\n    // Save old contact objects\n    this.contactPointPool = oldcontacts;\n    this.frictionEquationPool = frictionPool;\n    this.result = result;\n    this.frictionResult = frictionResult;\n    const qi = tmpQuat1;\n    const qj = tmpQuat2;\n    const xi = tmpVec1$2;\n    const xj = tmpVec2$2;\n\n    for (let k = 0, N = p1.length; k !== N; k++) {\n      // Get current collision bodies\n      const bi = p1[k];\n      const bj = p2[k]; // Get contact material\n\n      let bodyContactMaterial = null;\n\n      if (bi.material && bj.material) {\n        bodyContactMaterial = world.getContactMaterial(bi.material, bj.material) || null;\n      }\n\n      const justTest = bi.type & Body.KINEMATIC && bj.type & Body.STATIC || bi.type & Body.STATIC && bj.type & Body.KINEMATIC || bi.type & Body.KINEMATIC && bj.type & Body.KINEMATIC;\n\n      for (let i = 0; i < bi.shapes.length; i++) {\n        bi.quaternion.mult(bi.shapeOrientations[i], qi);\n        bi.quaternion.vmult(bi.shapeOffsets[i], xi);\n        xi.vadd(bi.position, xi);\n        const si = bi.shapes[i];\n\n        for (let j = 0; j < bj.shapes.length; j++) {\n          // Compute world transform of shapes\n          bj.quaternion.mult(bj.shapeOrientations[j], qj);\n          bj.quaternion.vmult(bj.shapeOffsets[j], xj);\n          xj.vadd(bj.position, xj);\n          const sj = bj.shapes[j];\n\n          if (!(si.collisionFilterMask & sj.collisionFilterGroup && sj.collisionFilterMask & si.collisionFilterGroup)) {\n            continue;\n          }\n\n          if (xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius) {\n            continue;\n          } // Get collision material\n\n\n          let shapeContactMaterial = null;\n\n          if (si.material && sj.material) {\n            shapeContactMaterial = world.getContactMaterial(si.material, sj.material) || null;\n          }\n\n          this.currentContactMaterial = shapeContactMaterial || bodyContactMaterial || world.defaultContactMaterial; // Get contacts\n\n          const resolverIndex = si.type | sj.type;\n          const resolver = this[resolverIndex];\n\n          if (resolver) {\n            let retval = false; // TO DO: investigate why sphereParticle and convexParticle\n            // resolvers expect si and sj shapes to be in reverse order\n            // (i.e. larger integer value type first instead of smaller first)\n\n            if (si.type < sj.type) {\n              retval = resolver.call(this, si, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n            } else {\n              retval = resolver.call(this, sj, si, xj, xi, qj, qi, bj, bi, si, sj, justTest);\n            }\n\n            if (retval && justTest) {\n              // Register overlap\n              world.shapeOverlapKeeper.set(si.id, sj.id);\n              world.bodyOverlapKeeper.set(bi.id, bj.id);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  sphereSphere(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    if (justTest) {\n      return xi.distanceSquared(xj) < (si.radius + sj.radius) ** 2;\n    } // We will have only one contact in this case\n\n\n    const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj); // Contact normal\n\n    xj.vsub(xi, r.ni);\n    r.ni.normalize(); // Contact point locations\n\n    r.ri.copy(r.ni);\n    r.rj.copy(r.ni);\n    r.ri.scale(si.radius, r.ri);\n    r.rj.scale(-sj.radius, r.rj);\n    r.ri.vadd(xi, r.ri);\n    r.ri.vsub(bi.position, r.ri);\n    r.rj.vadd(xj, r.rj);\n    r.rj.vsub(bj.position, r.rj);\n    this.result.push(r);\n    this.createFrictionEquationsFromContact(r, this.frictionResult);\n  }\n\n  spherePlane(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    // We will have one contact in this case\n    const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj); // Contact normal\n\n    r.ni.set(0, 0, 1);\n    qj.vmult(r.ni, r.ni);\n    r.ni.negate(r.ni); // body i is the sphere, flip normal\n\n    r.ni.normalize(); // Needed?\n    // Vector from sphere center to contact point\n\n    r.ni.scale(si.radius, r.ri); // Project down sphere on plane\n\n    xi.vsub(xj, point_on_plane_to_sphere);\n    r.ni.scale(r.ni.dot(point_on_plane_to_sphere), plane_to_sphere_ortho);\n    point_on_plane_to_sphere.vsub(plane_to_sphere_ortho, r.rj); // The sphere position projected to plane\n\n    if (-point_on_plane_to_sphere.dot(r.ni) <= si.radius) {\n      if (justTest) {\n        return true;\n      } // Make it relative to the body\n\n\n      const ri = r.ri;\n      const rj = r.rj;\n      ri.vadd(xi, ri);\n      ri.vsub(bi.position, ri);\n      rj.vadd(xj, rj);\n      rj.vsub(bj.position, rj);\n      this.result.push(r);\n      this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n  }\n\n  boxBox(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    si.convexPolyhedronRepresentation.material = si.material;\n    sj.convexPolyhedronRepresentation.material = sj.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    sj.convexPolyhedronRepresentation.collisionResponse = sj.collisionResponse;\n    return this.convexConvex(si.convexPolyhedronRepresentation, sj.convexPolyhedronRepresentation, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n  }\n\n  sphereBox(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    const v3pool = this.v3pool; // we refer to the box as body j\n\n    const sides = sphereBox_sides;\n    xi.vsub(xj, box_to_sphere);\n    sj.getSideNormals(sides, qj);\n    const R = si.radius;\n\n    let found = false; // Store the resulting side penetration info\n\n    const side_ns = sphereBox_side_ns;\n    const side_ns1 = sphereBox_side_ns1;\n    const side_ns2 = sphereBox_side_ns2;\n    let side_h = null;\n    let side_penetrations = 0;\n    let side_dot1 = 0;\n    let side_dot2 = 0;\n    let side_distance = null;\n\n    for (let idx = 0, nsides = sides.length; idx !== nsides && found === false; idx++) {\n      // Get the plane side normal (ns)\n      const ns = sphereBox_ns;\n      ns.copy(sides[idx]);\n      const h = ns.length();\n      ns.normalize(); // The normal/distance dot product tells which side of the plane we are\n\n      const dot = box_to_sphere.dot(ns);\n\n      if (dot < h + R && dot > 0) {\n        // Intersects plane. Now check the other two dimensions\n        const ns1 = sphereBox_ns1;\n        const ns2 = sphereBox_ns2;\n        ns1.copy(sides[(idx + 1) % 3]);\n        ns2.copy(sides[(idx + 2) % 3]);\n        const h1 = ns1.length();\n        const h2 = ns2.length();\n        ns1.normalize();\n        ns2.normalize();\n        const dot1 = box_to_sphere.dot(ns1);\n        const dot2 = box_to_sphere.dot(ns2);\n\n        if (dot1 < h1 && dot1 > -h1 && dot2 < h2 && dot2 > -h2) {\n          const dist = Math.abs(dot - h - R);\n\n          if (side_distance === null || dist < side_distance) {\n            side_distance = dist;\n            side_dot1 = dot1;\n            side_dot2 = dot2;\n            side_h = h;\n            side_ns.copy(ns);\n            side_ns1.copy(ns1);\n            side_ns2.copy(ns2);\n            side_penetrations++;\n\n            if (justTest) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n\n    if (side_penetrations) {\n      found = true;\n      const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n      side_ns.scale(-R, r.ri); // Sphere r\n\n      r.ni.copy(side_ns);\n      r.ni.negate(r.ni); // Normal should be out of sphere\n\n      side_ns.scale(side_h, side_ns);\n      side_ns1.scale(side_dot1, side_ns1);\n      side_ns.vadd(side_ns1, side_ns);\n      side_ns2.scale(side_dot2, side_ns2);\n      side_ns.vadd(side_ns2, r.rj); // Make relative to bodies\n\n      r.ri.vadd(xi, r.ri);\n      r.ri.vsub(bi.position, r.ri);\n      r.rj.vadd(xj, r.rj);\n      r.rj.vsub(bj.position, r.rj);\n      this.result.push(r);\n      this.createFrictionEquationsFromContact(r, this.frictionResult);\n    } // Check corners\n\n\n    let rj = v3pool.get();\n    const sphere_to_corner = sphereBox_sphere_to_corner;\n\n    for (let j = 0; j !== 2 && !found; j++) {\n      for (let k = 0; k !== 2 && !found; k++) {\n        for (let l = 0; l !== 2 && !found; l++) {\n          rj.set(0, 0, 0);\n\n          if (j) {\n            rj.vadd(sides[0], rj);\n          } else {\n            rj.vsub(sides[0], rj);\n          }\n\n          if (k) {\n            rj.vadd(sides[1], rj);\n          } else {\n            rj.vsub(sides[1], rj);\n          }\n\n          if (l) {\n            rj.vadd(sides[2], rj);\n          } else {\n            rj.vsub(sides[2], rj);\n          } // World position of corner\n\n\n          xj.vadd(rj, sphere_to_corner);\n          sphere_to_corner.vsub(xi, sphere_to_corner);\n\n          if (sphere_to_corner.lengthSquared() < R * R) {\n            if (justTest) {\n              return true;\n            }\n\n            found = true;\n            const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n            r.ri.copy(sphere_to_corner);\n            r.ri.normalize();\n            r.ni.copy(r.ri);\n            r.ri.scale(R, r.ri);\n            r.rj.copy(rj); // Make relative to bodies\n\n            r.ri.vadd(xi, r.ri);\n            r.ri.vsub(bi.position, r.ri);\n            r.rj.vadd(xj, r.rj);\n            r.rj.vsub(bj.position, r.rj);\n            this.result.push(r);\n            this.createFrictionEquationsFromContact(r, this.frictionResult);\n          }\n        }\n      }\n    }\n\n    v3pool.release(rj);\n    rj = null; // Check edges\n\n    const edgeTangent = v3pool.get();\n    const edgeCenter = v3pool.get();\n    const r = v3pool.get(); // r = edge center to sphere center\n\n    const orthogonal = v3pool.get();\n    const dist = v3pool.get();\n    const Nsides = sides.length;\n\n    for (let j = 0; j !== Nsides && !found; j++) {\n      for (let k = 0; k !== Nsides && !found; k++) {\n        if (j % 3 !== k % 3) {\n          // Get edge tangent\n          sides[k].cross(sides[j], edgeTangent);\n          edgeTangent.normalize();\n          sides[j].vadd(sides[k], edgeCenter);\n          r.copy(xi);\n          r.vsub(edgeCenter, r);\n          r.vsub(xj, r);\n          const orthonorm = r.dot(edgeTangent); // distance from edge center to sphere center in the tangent direction\n\n          edgeTangent.scale(orthonorm, orthogonal); // Vector from edge center to sphere center in the tangent direction\n          // Find the third side orthogonal to this one\n\n          let l = 0;\n\n          while (l === j % 3 || l === k % 3) {\n            l++;\n          } // vec from edge center to sphere projected to the plane orthogonal to the edge tangent\n\n\n          dist.copy(xi);\n          dist.vsub(orthogonal, dist);\n          dist.vsub(edgeCenter, dist);\n          dist.vsub(xj, dist); // Distances in tangent direction and distance in the plane orthogonal to it\n\n          const tdist = Math.abs(orthonorm);\n          const ndist = dist.length();\n\n          if (tdist < sides[l].length() && ndist < R) {\n            if (justTest) {\n              return true;\n            }\n\n            found = true;\n            const res = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n            edgeCenter.vadd(orthogonal, res.rj); // box rj\n\n            res.rj.copy(res.rj);\n            dist.negate(res.ni);\n            res.ni.normalize();\n            res.ri.copy(res.rj);\n            res.ri.vadd(xj, res.ri);\n            res.ri.vsub(xi, res.ri);\n            res.ri.normalize();\n            res.ri.scale(R, res.ri); // Make relative to bodies\n\n            res.ri.vadd(xi, res.ri);\n            res.ri.vsub(bi.position, res.ri);\n            res.rj.vadd(xj, res.rj);\n            res.rj.vsub(bj.position, res.rj);\n            this.result.push(res);\n            this.createFrictionEquationsFromContact(res, this.frictionResult);\n          }\n        }\n      }\n    }\n\n    v3pool.release(edgeTangent, edgeCenter, r, orthogonal, dist);\n  }\n\n  planeBox(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    sj.convexPolyhedronRepresentation.material = sj.material;\n    sj.convexPolyhedronRepresentation.collisionResponse = sj.collisionResponse;\n    sj.convexPolyhedronRepresentation.id = sj.id;\n    return this.planeConvex(si, sj.convexPolyhedronRepresentation, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n  }\n\n  convexConvex(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest, faceListA, faceListB) {\n    const sepAxis = convexConvex_sepAxis;\n\n    if (xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius) {\n      return;\n    }\n\n    if (si.findSeparatingAxis(sj, xi, qi, xj, qj, sepAxis, faceListA, faceListB)) {\n      const res = [];\n      const q = convexConvex_q;\n      si.clipAgainstHull(xi, qi, sj, xj, qj, sepAxis, -100, 100, res);\n      let numContacts = 0;\n\n      for (let j = 0; j !== res.length; j++) {\n        if (justTest) {\n          return true;\n        }\n\n        const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n        const ri = r.ri;\n        const rj = r.rj;\n        sepAxis.negate(r.ni);\n        res[j].normal.negate(q);\n        q.scale(res[j].depth, q);\n        res[j].point.vadd(q, ri);\n        rj.copy(res[j].point); // Contact points are in world coordinates. Transform back to relative\n\n        ri.vsub(xi, ri);\n        rj.vsub(xj, rj); // Make relative to bodies\n\n        ri.vadd(xi, ri);\n        ri.vsub(bi.position, ri);\n        rj.vadd(xj, rj);\n        rj.vsub(bj.position, rj);\n        this.result.push(r);\n        numContacts++;\n\n        if (!this.enableFrictionReduction) {\n          this.createFrictionEquationsFromContact(r, this.frictionResult);\n        }\n      }\n\n      if (this.enableFrictionReduction && numContacts) {\n        this.createFrictionFromAverage(numContacts);\n      }\n    }\n  }\n\n  sphereConvex(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    const v3pool = this.v3pool;\n    xi.vsub(xj, convex_to_sphere);\n    const normals = sj.faceNormals;\n    const faces = sj.faces;\n    const verts = sj.vertices;\n    const R = si.radius;\n    //     return;\n    // }\n\n    let found = false; // Check corners\n\n    for (let i = 0; i !== verts.length; i++) {\n      const v = verts[i]; // World position of corner\n\n      const worldCorner = sphereConvex_worldCorner;\n      qj.vmult(v, worldCorner);\n      xj.vadd(worldCorner, worldCorner);\n      const sphere_to_corner = sphereConvex_sphereToCorner;\n      worldCorner.vsub(xi, sphere_to_corner);\n\n      if (sphere_to_corner.lengthSquared() < R * R) {\n        if (justTest) {\n          return true;\n        }\n\n        found = true;\n        const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n        r.ri.copy(sphere_to_corner);\n        r.ri.normalize();\n        r.ni.copy(r.ri);\n        r.ri.scale(R, r.ri);\n        worldCorner.vsub(xj, r.rj); // Should be relative to the body.\n\n        r.ri.vadd(xi, r.ri);\n        r.ri.vsub(bi.position, r.ri); // Should be relative to the body.\n\n        r.rj.vadd(xj, r.rj);\n        r.rj.vsub(bj.position, r.rj);\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n        return;\n      }\n    } // Check side (plane) intersections\n\n\n    for (let i = 0, nfaces = faces.length; i !== nfaces && found === false; i++) {\n      const normal = normals[i];\n      const face = faces[i]; // Get world-transformed normal of the face\n\n      const worldNormal = sphereConvex_worldNormal;\n      qj.vmult(normal, worldNormal); // Get a world vertex from the face\n\n      const worldPoint = sphereConvex_worldPoint;\n      qj.vmult(verts[face[0]], worldPoint);\n      worldPoint.vadd(xj, worldPoint); // Get a point on the sphere, closest to the face normal\n\n      const worldSpherePointClosestToPlane = sphereConvex_worldSpherePointClosestToPlane;\n      worldNormal.scale(-R, worldSpherePointClosestToPlane);\n      xi.vadd(worldSpherePointClosestToPlane, worldSpherePointClosestToPlane); // Vector from a face point to the closest point on the sphere\n\n      const penetrationVec = sphereConvex_penetrationVec;\n      worldSpherePointClosestToPlane.vsub(worldPoint, penetrationVec); // The penetration. Negative value means overlap.\n\n      const penetration = penetrationVec.dot(worldNormal);\n      const worldPointToSphere = sphereConvex_sphereToWorldPoint;\n      xi.vsub(worldPoint, worldPointToSphere);\n\n      if (penetration < 0 && worldPointToSphere.dot(worldNormal) > 0) {\n        // Intersects plane. Now check if the sphere is inside the face polygon\n        const faceVerts = []; // Face vertices, in world coords\n\n        for (let j = 0, Nverts = face.length; j !== Nverts; j++) {\n          const worldVertex = v3pool.get();\n          qj.vmult(verts[face[j]], worldVertex);\n          xj.vadd(worldVertex, worldVertex);\n          faceVerts.push(worldVertex);\n        }\n\n        if (pointInPolygon(faceVerts, worldNormal, xi)) {\n          // Is the sphere center in the face polygon?\n          if (justTest) {\n            return true;\n          }\n\n          found = true;\n          const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n          worldNormal.scale(-R, r.ri); // Contact offset, from sphere center to contact\n\n          worldNormal.negate(r.ni); // Normal pointing out of sphere\n\n          const penetrationVec2 = v3pool.get();\n          worldNormal.scale(-penetration, penetrationVec2);\n          const penetrationSpherePoint = v3pool.get();\n          worldNormal.scale(-R, penetrationSpherePoint); //xi.vsub(xj).vadd(penetrationSpherePoint).vadd(penetrationVec2 , r.rj);\n\n          xi.vsub(xj, r.rj);\n          r.rj.vadd(penetrationSpherePoint, r.rj);\n          r.rj.vadd(penetrationVec2, r.rj); // Should be relative to the body.\n\n          r.rj.vadd(xj, r.rj);\n          r.rj.vsub(bj.position, r.rj); // Should be relative to the body.\n\n          r.ri.vadd(xi, r.ri);\n          r.ri.vsub(bi.position, r.ri);\n          v3pool.release(penetrationVec2);\n          v3pool.release(penetrationSpherePoint);\n          this.result.push(r);\n          this.createFrictionEquationsFromContact(r, this.frictionResult); // Release world vertices\n\n          for (let j = 0, Nfaceverts = faceVerts.length; j !== Nfaceverts; j++) {\n            v3pool.release(faceVerts[j]);\n          }\n\n          return; // We only expect *one* face contact\n        } else {\n          // Edge?\n          for (let j = 0; j !== face.length; j++) {\n            // Get two world transformed vertices\n            const v1 = v3pool.get();\n            const v2 = v3pool.get();\n            qj.vmult(verts[face[(j + 1) % face.length]], v1);\n            qj.vmult(verts[face[(j + 2) % face.length]], v2);\n            xj.vadd(v1, v1);\n            xj.vadd(v2, v2); // Construct edge vector\n\n            const edge = sphereConvex_edge;\n            v2.vsub(v1, edge); // Construct the same vector, but normalized\n\n            const edgeUnit = sphereConvex_edgeUnit;\n            edge.unit(edgeUnit); // p is xi projected onto the edge\n\n            const p = v3pool.get();\n            const v1_to_xi = v3pool.get();\n            xi.vsub(v1, v1_to_xi);\n            const dot = v1_to_xi.dot(edgeUnit);\n            edgeUnit.scale(dot, p);\n            p.vadd(v1, p); // Compute a vector from p to the center of the sphere\n\n            const xi_to_p = v3pool.get();\n            p.vsub(xi, xi_to_p); // Collision if the edge-sphere distance is less than the radius\n            // AND if p is in between v1 and v2\n\n            if (dot > 0 && dot * dot < edge.lengthSquared() && xi_to_p.lengthSquared() < R * R) {\n              // Collision if the edge-sphere distance is less than the radius\n              // Edge contact!\n              if (justTest) {\n                return true;\n              }\n\n              const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n              p.vsub(xj, r.rj);\n              p.vsub(xi, r.ni);\n              r.ni.normalize();\n              r.ni.scale(R, r.ri); // Should be relative to the body.\n\n              r.rj.vadd(xj, r.rj);\n              r.rj.vsub(bj.position, r.rj); // Should be relative to the body.\n\n              r.ri.vadd(xi, r.ri);\n              r.ri.vsub(bi.position, r.ri);\n              this.result.push(r);\n              this.createFrictionEquationsFromContact(r, this.frictionResult); // Release world vertices\n\n              for (let j = 0, Nfaceverts = faceVerts.length; j !== Nfaceverts; j++) {\n                v3pool.release(faceVerts[j]);\n              }\n\n              v3pool.release(v1);\n              v3pool.release(v2);\n              v3pool.release(p);\n              v3pool.release(xi_to_p);\n              v3pool.release(v1_to_xi);\n              return;\n            }\n\n            v3pool.release(v1);\n            v3pool.release(v2);\n            v3pool.release(p);\n            v3pool.release(xi_to_p);\n            v3pool.release(v1_to_xi);\n          }\n        } // Release world vertices\n\n\n        for (let j = 0, Nfaceverts = faceVerts.length; j !== Nfaceverts; j++) {\n          v3pool.release(faceVerts[j]);\n        }\n      }\n    }\n  }\n\n  planeConvex(planeShape, convexShape, planePosition, convexPosition, planeQuat, convexQuat, planeBody, convexBody, si, sj, justTest) {\n    // Simply return the points behind the plane.\n    const worldVertex = planeConvex_v;\n    const worldNormal = planeConvex_normal;\n    worldNormal.set(0, 0, 1);\n    planeQuat.vmult(worldNormal, worldNormal); // Turn normal according to plane orientation\n\n    let numContacts = 0;\n    const relpos = planeConvex_relpos;\n\n    for (let i = 0; i !== convexShape.vertices.length; i++) {\n      // Get world convex vertex\n      worldVertex.copy(convexShape.vertices[i]);\n      convexQuat.vmult(worldVertex, worldVertex);\n      convexPosition.vadd(worldVertex, worldVertex);\n      worldVertex.vsub(planePosition, relpos);\n      const dot = worldNormal.dot(relpos);\n\n      if (dot <= 0.0) {\n        if (justTest) {\n          return true;\n        }\n\n        const r = this.createContactEquation(planeBody, convexBody, planeShape, convexShape, si, sj); // Get vertex position projected on plane\n\n        const projected = planeConvex_projected;\n        worldNormal.scale(worldNormal.dot(relpos), projected);\n        worldVertex.vsub(projected, projected);\n        projected.vsub(planePosition, r.ri); // From plane to vertex projected on plane\n\n        r.ni.copy(worldNormal); // Contact normal is the plane normal out from plane\n        // rj is now just the vector from the convex center to the vertex\n\n        worldVertex.vsub(convexPosition, r.rj); // Make it relative to the body\n\n        r.ri.vadd(planePosition, r.ri);\n        r.ri.vsub(planeBody.position, r.ri);\n        r.rj.vadd(convexPosition, r.rj);\n        r.rj.vsub(convexBody.position, r.rj);\n        this.result.push(r);\n        numContacts++;\n\n        if (!this.enableFrictionReduction) {\n          this.createFrictionEquationsFromContact(r, this.frictionResult);\n        }\n      }\n    }\n\n    if (this.enableFrictionReduction && numContacts) {\n      this.createFrictionFromAverage(numContacts);\n    }\n  }\n\n  boxConvex(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    si.convexPolyhedronRepresentation.material = si.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    return this.convexConvex(si.convexPolyhedronRepresentation, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n  }\n\n  sphereHeightfield(sphereShape, hfShape, spherePos, hfPos, sphereQuat, hfQuat, sphereBody, hfBody, rsi, rsj, justTest) {\n    const data = hfShape.data;\n    const radius = sphereShape.radius;\n    const w = hfShape.elementSize;\n    const worldPillarOffset = sphereHeightfield_tmp2; // Get sphere position to heightfield local!\n\n    const localSpherePos = sphereHeightfield_tmp1;\n    Transform.pointToLocalFrame(hfPos, hfQuat, spherePos, localSpherePos); // Get the index of the data points to test against\n\n    let iMinX = Math.floor((localSpherePos.x - radius) / w) - 1;\n    let iMaxX = Math.ceil((localSpherePos.x + radius) / w) + 1;\n    let iMinY = Math.floor((localSpherePos.y - radius) / w) - 1;\n    let iMaxY = Math.ceil((localSpherePos.y + radius) / w) + 1; // Bail out if we are out of the terrain\n\n    if (iMaxX < 0 || iMaxY < 0 || iMinX > data.length || iMinY > data[0].length) {\n      return;\n    } // Clamp index to edges\n\n\n    if (iMinX < 0) {\n      iMinX = 0;\n    }\n\n    if (iMaxX < 0) {\n      iMaxX = 0;\n    }\n\n    if (iMinY < 0) {\n      iMinY = 0;\n    }\n\n    if (iMaxY < 0) {\n      iMaxY = 0;\n    }\n\n    if (iMinX >= data.length) {\n      iMinX = data.length - 1;\n    }\n\n    if (iMaxX >= data.length) {\n      iMaxX = data.length - 1;\n    }\n\n    if (iMaxY >= data[0].length) {\n      iMaxY = data[0].length - 1;\n    }\n\n    if (iMinY >= data[0].length) {\n      iMinY = data[0].length - 1;\n    }\n\n    const minMax = [];\n    hfShape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);\n    const min = minMax[0];\n    const max = minMax[1]; // Bail out if we can't touch the bounding height box\n\n    if (localSpherePos.z - radius > max || localSpherePos.z + radius < min) {\n      return;\n    }\n\n    const result = this.result;\n\n    for (let i = iMinX; i < iMaxX; i++) {\n      for (let j = iMinY; j < iMaxY; j++) {\n        const numContactsBefore = result.length;\n        let intersecting = false; // Lower triangle\n\n        hfShape.getConvexTrianglePillar(i, j, false);\n        Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n\n        if (spherePos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + sphereShape.boundingSphereRadius) {\n          intersecting = this.sphereConvex(sphereShape, hfShape.pillarConvex, spherePos, worldPillarOffset, sphereQuat, hfQuat, sphereBody, hfBody, sphereShape, hfShape, justTest);\n        }\n\n        if (justTest && intersecting) {\n          return true;\n        } // Upper triangle\n\n\n        hfShape.getConvexTrianglePillar(i, j, true);\n        Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n\n        if (spherePos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + sphereShape.boundingSphereRadius) {\n          intersecting = this.sphereConvex(sphereShape, hfShape.pillarConvex, spherePos, worldPillarOffset, sphereQuat, hfQuat, sphereBody, hfBody, sphereShape, hfShape, justTest);\n        }\n\n        if (justTest && intersecting) {\n          return true;\n        }\n\n        const numContacts = result.length - numContactsBefore;\n\n        if (numContacts > 2) {\n          return;\n        }\n        /*\r\n          // Skip all but 1\r\n          for (let k = 0; k < numContacts - 1; k++) {\r\n              result.pop();\r\n          }\r\n        */\n\n      }\n    }\n  }\n\n  boxHeightfield(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    si.convexPolyhedronRepresentation.material = si.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    return this.convexHeightfield(si.convexPolyhedronRepresentation, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n  }\n\n  convexHeightfield(convexShape, hfShape, convexPos, hfPos, convexQuat, hfQuat, convexBody, hfBody, rsi, rsj, justTest) {\n    const data = hfShape.data;\n    const w = hfShape.elementSize;\n    const radius = convexShape.boundingSphereRadius;\n    const worldPillarOffset = convexHeightfield_tmp2;\n    const faceList = convexHeightfield_faceList; // Get sphere position to heightfield local!\n\n    const localConvexPos = convexHeightfield_tmp1;\n    Transform.pointToLocalFrame(hfPos, hfQuat, convexPos, localConvexPos); // Get the index of the data points to test against\n\n    let iMinX = Math.floor((localConvexPos.x - radius) / w) - 1;\n    let iMaxX = Math.ceil((localConvexPos.x + radius) / w) + 1;\n    let iMinY = Math.floor((localConvexPos.y - radius) / w) - 1;\n    let iMaxY = Math.ceil((localConvexPos.y + radius) / w) + 1; // Bail out if we are out of the terrain\n\n    if (iMaxX < 0 || iMaxY < 0 || iMinX > data.length || iMinY > data[0].length) {\n      return;\n    } // Clamp index to edges\n\n\n    if (iMinX < 0) {\n      iMinX = 0;\n    }\n\n    if (iMaxX < 0) {\n      iMaxX = 0;\n    }\n\n    if (iMinY < 0) {\n      iMinY = 0;\n    }\n\n    if (iMaxY < 0) {\n      iMaxY = 0;\n    }\n\n    if (iMinX >= data.length) {\n      iMinX = data.length - 1;\n    }\n\n    if (iMaxX >= data.length) {\n      iMaxX = data.length - 1;\n    }\n\n    if (iMaxY >= data[0].length) {\n      iMaxY = data[0].length - 1;\n    }\n\n    if (iMinY >= data[0].length) {\n      iMinY = data[0].length - 1;\n    }\n\n    const minMax = [];\n    hfShape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);\n    const min = minMax[0];\n    const max = minMax[1]; // Bail out if we're cant touch the bounding height box\n\n    if (localConvexPos.z - radius > max || localConvexPos.z + radius < min) {\n      return;\n    }\n\n    for (let i = iMinX; i < iMaxX; i++) {\n      for (let j = iMinY; j < iMaxY; j++) {\n        let intersecting = false; // Lower triangle\n\n        hfShape.getConvexTrianglePillar(i, j, false);\n        Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n\n        if (convexPos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + convexShape.boundingSphereRadius) {\n          intersecting = this.convexConvex(convexShape, hfShape.pillarConvex, convexPos, worldPillarOffset, convexQuat, hfQuat, convexBody, hfBody, null, null, justTest, faceList, null);\n        }\n\n        if (justTest && intersecting) {\n          return true;\n        } // Upper triangle\n\n\n        hfShape.getConvexTrianglePillar(i, j, true);\n        Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n\n        if (convexPos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + convexShape.boundingSphereRadius) {\n          intersecting = this.convexConvex(convexShape, hfShape.pillarConvex, convexPos, worldPillarOffset, convexQuat, hfQuat, convexBody, hfBody, null, null, justTest, faceList, null);\n        }\n\n        if (justTest && intersecting) {\n          return true;\n        }\n      }\n    }\n  }\n\n  sphereParticle(sj, si, xj, xi, qj, qi, bj, bi, rsi, rsj, justTest) {\n    // The normal is the unit vector from sphere center to particle center\n    const normal = particleSphere_normal;\n    normal.set(0, 0, 1);\n    xi.vsub(xj, normal);\n    const lengthSquared = normal.lengthSquared();\n\n    if (lengthSquared <= sj.radius * sj.radius) {\n      if (justTest) {\n        return true;\n      }\n\n      const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n      normal.normalize();\n      r.rj.copy(normal);\n      r.rj.scale(sj.radius, r.rj);\n      r.ni.copy(normal); // Contact normal\n\n      r.ni.negate(r.ni);\n      r.ri.set(0, 0, 0); // Center of particle\n\n      this.result.push(r);\n      this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n  }\n\n  planeParticle(sj, si, xj, xi, qj, qi, bj, bi, rsi, rsj, justTest) {\n    const normal = particlePlane_normal;\n    normal.set(0, 0, 1);\n    bj.quaternion.vmult(normal, normal); // Turn normal according to plane orientation\n\n    const relpos = particlePlane_relpos;\n    xi.vsub(bj.position, relpos);\n    const dot = normal.dot(relpos);\n\n    if (dot <= 0.0) {\n      if (justTest) {\n        return true;\n      }\n\n      const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n      r.ni.copy(normal); // Contact normal is the plane normal\n\n      r.ni.negate(r.ni);\n      r.ri.set(0, 0, 0); // Center of particle\n      // Get particle position projected on plane\n\n      const projected = particlePlane_projected;\n      normal.scale(normal.dot(xi), projected);\n      xi.vsub(projected, projected); //projected.vadd(bj.position,projected);\n      // rj is now the projected world position minus plane position\n\n      r.rj.copy(projected);\n      this.result.push(r);\n      this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n  }\n\n  boxParticle(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    si.convexPolyhedronRepresentation.material = si.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    return this.convexParticle(si.convexPolyhedronRepresentation, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n  }\n\n  convexParticle(sj, si, xj, xi, qj, qi, bj, bi, rsi, rsj, justTest) {\n    let penetratedFaceIndex = -1;\n    const penetratedFaceNormal = convexParticle_penetratedFaceNormal;\n    const worldPenetrationVec = convexParticle_worldPenetrationVec;\n    let minPenetration = null;\n\n    const local = convexParticle_local;\n    local.copy(xi);\n    local.vsub(xj, local); // Convert position to relative the convex origin\n\n    qj.conjugate(cqj);\n    cqj.vmult(local, local);\n\n    if (sj.pointIsInside(local)) {\n      if (sj.worldVerticesNeedsUpdate) {\n        sj.computeWorldVertices(xj, qj);\n      }\n\n      if (sj.worldFaceNormalsNeedsUpdate) {\n        sj.computeWorldFaceNormals(qj);\n      } // For each world polygon in the polyhedra\n\n\n      for (let i = 0, nfaces = sj.faces.length; i !== nfaces; i++) {\n        // Construct world face vertices\n        const verts = [sj.worldVertices[sj.faces[i][0]]];\n        const normal = sj.worldFaceNormals[i]; // Check how much the particle penetrates the polygon plane.\n\n        xi.vsub(verts[0], convexParticle_vertexToParticle);\n        const penetration = -normal.dot(convexParticle_vertexToParticle);\n\n        if (minPenetration === null || Math.abs(penetration) < Math.abs(minPenetration)) {\n          if (justTest) {\n            return true;\n          }\n\n          minPenetration = penetration;\n          penetratedFaceIndex = i;\n          penetratedFaceNormal.copy(normal);\n        }\n      }\n\n      if (penetratedFaceIndex !== -1) {\n        // Setup contact\n        const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n        penetratedFaceNormal.scale(minPenetration, worldPenetrationVec); // rj is the particle position projected to the face\n\n        worldPenetrationVec.vadd(xi, worldPenetrationVec);\n        worldPenetrationVec.vsub(xj, worldPenetrationVec);\n        r.rj.copy(worldPenetrationVec); //const projectedToFace = xi.vsub(xj).vadd(worldPenetrationVec);\n        //projectedToFace.copy(r.rj);\n        //qj.vmult(r.rj,r.rj);\n\n        penetratedFaceNormal.negate(r.ni); // Contact normal\n\n        r.ri.set(0, 0, 0); // Center of particle\n\n        const ri = r.ri;\n        const rj = r.rj; // Make relative to bodies\n\n        ri.vadd(xi, ri);\n        ri.vsub(bi.position, ri);\n        rj.vadd(xj, rj);\n        rj.vsub(bj.position, rj);\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n      } else {\n        console.warn('Point found inside convex, but did not find penetrating face!');\n      }\n    }\n  }\n\n  sphereTrimesh(sphereShape, trimeshShape, spherePos, trimeshPos, sphereQuat, trimeshQuat, sphereBody, trimeshBody, rsi, rsj, justTest) {\n    const edgeVertexA = sphereTrimesh_edgeVertexA;\n    const edgeVertexB = sphereTrimesh_edgeVertexB;\n    const edgeVector = sphereTrimesh_edgeVector;\n    const edgeVectorUnit = sphereTrimesh_edgeVectorUnit;\n    const localSpherePos = sphereTrimesh_localSpherePos;\n    const tmp = sphereTrimesh_tmp;\n    const localSphereAABB = sphereTrimesh_localSphereAABB;\n    const v2 = sphereTrimesh_v2;\n    const relpos = sphereTrimesh_relpos;\n    const triangles = sphereTrimesh_triangles; // Convert sphere position to local in the trimesh\n\n    Transform.pointToLocalFrame(trimeshPos, trimeshQuat, spherePos, localSpherePos); // Get the aabb of the sphere locally in the trimesh\n\n    const sphereRadius = sphereShape.radius;\n    localSphereAABB.lowerBound.set(localSpherePos.x - sphereRadius, localSpherePos.y - sphereRadius, localSpherePos.z - sphereRadius);\n    localSphereAABB.upperBound.set(localSpherePos.x + sphereRadius, localSpherePos.y + sphereRadius, localSpherePos.z + sphereRadius);\n    trimeshShape.getTrianglesInAABB(localSphereAABB, triangles); //for (let i = 0; i < trimeshShape.indices.length / 3; i++) triangles.push(i); // All\n    // Vertices\n\n    const v = sphereTrimesh_v;\n    const radiusSquared = sphereShape.radius * sphereShape.radius;\n\n    for (let i = 0; i < triangles.length; i++) {\n      for (let j = 0; j < 3; j++) {\n        trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + j], v); // Check vertex overlap in sphere\n\n        v.vsub(localSpherePos, relpos);\n\n        if (relpos.lengthSquared() <= radiusSquared) {\n          // Safe up\n          v2.copy(v);\n          Transform.pointToWorldFrame(trimeshPos, trimeshQuat, v2, v);\n          v.vsub(spherePos, relpos);\n\n          if (justTest) {\n            return true;\n          }\n\n          let r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape, rsi, rsj);\n          r.ni.copy(relpos);\n          r.ni.normalize(); // ri is the vector from sphere center to the sphere surface\n\n          r.ri.copy(r.ni);\n          r.ri.scale(sphereShape.radius, r.ri);\n          r.ri.vadd(spherePos, r.ri);\n          r.ri.vsub(sphereBody.position, r.ri);\n          r.rj.copy(v);\n          r.rj.vsub(trimeshBody.position, r.rj); // Store result\n\n          this.result.push(r);\n          this.createFrictionEquationsFromContact(r, this.frictionResult);\n        }\n      }\n    } // Check all edges\n\n\n    for (let i = 0; i < triangles.length; i++) {\n      for (let j = 0; j < 3; j++) {\n        trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + j], edgeVertexA);\n        trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + (j + 1) % 3], edgeVertexB);\n        edgeVertexB.vsub(edgeVertexA, edgeVector); // Project sphere position to the edge\n\n        localSpherePos.vsub(edgeVertexB, tmp);\n        const positionAlongEdgeB = tmp.dot(edgeVector);\n        localSpherePos.vsub(edgeVertexA, tmp);\n        let positionAlongEdgeA = tmp.dot(edgeVector);\n\n        if (positionAlongEdgeA > 0 && positionAlongEdgeB < 0) {\n          // Now check the orthogonal distance from edge to sphere center\n          localSpherePos.vsub(edgeVertexA, tmp);\n          edgeVectorUnit.copy(edgeVector);\n          edgeVectorUnit.normalize();\n          positionAlongEdgeA = tmp.dot(edgeVectorUnit);\n          edgeVectorUnit.scale(positionAlongEdgeA, tmp);\n          tmp.vadd(edgeVertexA, tmp); // tmp is now the sphere center position projected to the edge, defined locally in the trimesh frame\n\n          const dist = tmp.distanceTo(localSpherePos);\n\n          if (dist < sphereShape.radius) {\n            if (justTest) {\n              return true;\n            }\n\n            const r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape, rsi, rsj);\n            tmp.vsub(localSpherePos, r.ni);\n            r.ni.normalize();\n            r.ni.scale(sphereShape.radius, r.ri);\n            r.ri.vadd(spherePos, r.ri);\n            r.ri.vsub(sphereBody.position, r.ri);\n            Transform.pointToWorldFrame(trimeshPos, trimeshQuat, tmp, tmp);\n            tmp.vsub(trimeshBody.position, r.rj);\n            Transform.vectorToWorldFrame(trimeshQuat, r.ni, r.ni);\n            Transform.vectorToWorldFrame(trimeshQuat, r.ri, r.ri);\n            this.result.push(r);\n            this.createFrictionEquationsFromContact(r, this.frictionResult);\n          }\n        }\n      }\n    } // Triangle faces\n\n\n    const va = sphereTrimesh_va;\n    const vb = sphereTrimesh_vb;\n    const vc = sphereTrimesh_vc;\n    const normal = sphereTrimesh_normal;\n\n    for (let i = 0, N = triangles.length; i !== N; i++) {\n      trimeshShape.getTriangleVertices(triangles[i], va, vb, vc);\n      trimeshShape.getNormal(triangles[i], normal);\n      localSpherePos.vsub(va, tmp);\n      let dist = tmp.dot(normal);\n      normal.scale(dist, tmp);\n      localSpherePos.vsub(tmp, tmp); // tmp is now the sphere position projected to the triangle plane\n\n      dist = tmp.distanceTo(localSpherePos);\n\n      if (Ray.pointInTriangle(tmp, va, vb, vc) && dist < sphereShape.radius) {\n        if (justTest) {\n          return true;\n        }\n\n        let r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape, rsi, rsj);\n        tmp.vsub(localSpherePos, r.ni);\n        r.ni.normalize();\n        r.ni.scale(sphereShape.radius, r.ri);\n        r.ri.vadd(spherePos, r.ri);\n        r.ri.vsub(sphereBody.position, r.ri);\n        Transform.pointToWorldFrame(trimeshPos, trimeshQuat, tmp, tmp);\n        tmp.vsub(trimeshBody.position, r.rj);\n        Transform.vectorToWorldFrame(trimeshQuat, r.ni, r.ni);\n        Transform.vectorToWorldFrame(trimeshQuat, r.ri, r.ri);\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n      }\n    }\n\n    triangles.length = 0;\n  }\n\n  planeTrimesh(planeShape, trimeshShape, planePos, trimeshPos, planeQuat, trimeshQuat, planeBody, trimeshBody, rsi, rsj, justTest) {\n    // Make contacts!\n    const v = new Vec3();\n    const normal = planeTrimesh_normal;\n    normal.set(0, 0, 1);\n    planeQuat.vmult(normal, normal); // Turn normal according to plane\n\n    for (let i = 0; i < trimeshShape.vertices.length / 3; i++) {\n      // Get world vertex from trimesh\n      trimeshShape.getVertex(i, v); // Safe up\n\n      const v2 = new Vec3();\n      v2.copy(v);\n      Transform.pointToWorldFrame(trimeshPos, trimeshQuat, v2, v); // Check plane side\n\n      const relpos = planeTrimesh_relpos;\n      v.vsub(planePos, relpos);\n      const dot = normal.dot(relpos);\n\n      if (dot <= 0.0) {\n        if (justTest) {\n          return true;\n        }\n\n        const r = this.createContactEquation(planeBody, trimeshBody, planeShape, trimeshShape, rsi, rsj);\n        r.ni.copy(normal); // Contact normal is the plane normal\n        // Get vertex position projected on plane\n\n        const projected = planeTrimesh_projected;\n        normal.scale(relpos.dot(normal), projected);\n        v.vsub(projected, projected); // ri is the projected world position minus plane position\n\n        r.ri.copy(projected);\n        r.ri.vsub(planeBody.position, r.ri);\n        r.rj.copy(v);\n        r.rj.vsub(trimeshBody.position, r.rj); // Store result\n\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n      }\n    }\n  } // convexTrimesh(\n  //   si: ConvexPolyhedron, sj: Trimesh, xi: Vec3, xj: Vec3, qi: Quaternion, qj: Quaternion,\n  //   bi: Body, bj: Body, rsi?: Shape | null, rsj?: Shape | null,\n  //   faceListA?: number[] | null, faceListB?: number[] | null,\n  // ) {\n  //   const sepAxis = convexConvex_sepAxis;\n  //   if(xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius){\n  //       return;\n  //   }\n  //   // Construct a temp hull for each triangle\n  //   const hullB = new ConvexPolyhedron();\n  //   hullB.faces = [[0,1,2]];\n  //   const va = new Vec3();\n  //   const vb = new Vec3();\n  //   const vc = new Vec3();\n  //   hullB.vertices = [\n  //       va,\n  //       vb,\n  //       vc\n  //   ];\n  //   for (let i = 0; i < sj.indices.length / 3; i++) {\n  //       const triangleNormal = new Vec3();\n  //       sj.getNormal(i, triangleNormal);\n  //       hullB.faceNormals = [triangleNormal];\n  //       sj.getTriangleVertices(i, va, vb, vc);\n  //       let d = si.testSepAxis(triangleNormal, hullB, xi, qi, xj, qj);\n  //       if(!d){\n  //           triangleNormal.scale(-1, triangleNormal);\n  //           d = si.testSepAxis(triangleNormal, hullB, xi, qi, xj, qj);\n  //           if(!d){\n  //               continue;\n  //           }\n  //       }\n  //       const res: ConvexPolyhedronContactPoint[] = [];\n  //       const q = convexConvex_q;\n  //       si.clipAgainstHull(xi,qi,hullB,xj,qj,triangleNormal,-100,100,res);\n  //       for(let j = 0; j !== res.length; j++){\n  //           const r = this.createContactEquation(bi,bj,si,sj,rsi,rsj),\n  //               ri = r.ri,\n  //               rj = r.rj;\n  //           r.ni.copy(triangleNormal);\n  //           r.ni.negate(r.ni);\n  //           res[j].normal.negate(q);\n  //           q.mult(res[j].depth, q);\n  //           res[j].point.vadd(q, ri);\n  //           rj.copy(res[j].point);\n  //           // Contact points are in world coordinates. Transform back to relative\n  //           ri.vsub(xi,ri);\n  //           rj.vsub(xj,rj);\n  //           // Make relative to bodies\n  //           ri.vadd(xi, ri);\n  //           ri.vsub(bi.position, ri);\n  //           rj.vadd(xj, rj);\n  //           rj.vsub(bj.position, rj);\n  //           result.push(r);\n  //       }\n  //   }\n  // }\n\n\n}\nconst averageNormal = new Vec3();\nconst averageContactPointA = new Vec3();\nconst averageContactPointB = new Vec3();\nconst tmpVec1$2 = new Vec3();\nconst tmpVec2$2 = new Vec3();\nconst tmpQuat1 = new Quaternion();\nconst tmpQuat2 = new Quaternion();\n\nNarrowphase.prototype[COLLISION_TYPES.boxBox] = Narrowphase.prototype.boxBox;\nNarrowphase.prototype[COLLISION_TYPES.boxConvex] = Narrowphase.prototype.boxConvex;\nNarrowphase.prototype[COLLISION_TYPES.boxParticle] = Narrowphase.prototype.boxParticle;\nNarrowphase.prototype[COLLISION_TYPES.sphereSphere] = Narrowphase.prototype.sphereSphere;\nconst planeTrimesh_normal = new Vec3();\nconst planeTrimesh_relpos = new Vec3();\nconst planeTrimesh_projected = new Vec3();\nNarrowphase.prototype[COLLISION_TYPES.planeTrimesh] = Narrowphase.prototype.planeTrimesh;\nconst sphereTrimesh_normal = new Vec3();\nconst sphereTrimesh_relpos = new Vec3();\nconst sphereTrimesh_v = new Vec3();\nconst sphereTrimesh_v2 = new Vec3();\nconst sphereTrimesh_edgeVertexA = new Vec3();\nconst sphereTrimesh_edgeVertexB = new Vec3();\nconst sphereTrimesh_edgeVector = new Vec3();\nconst sphereTrimesh_edgeVectorUnit = new Vec3();\nconst sphereTrimesh_localSpherePos = new Vec3();\nconst sphereTrimesh_tmp = new Vec3();\nconst sphereTrimesh_va = new Vec3();\nconst sphereTrimesh_vb = new Vec3();\nconst sphereTrimesh_vc = new Vec3();\nconst sphereTrimesh_localSphereAABB = new AABB();\nconst sphereTrimesh_triangles = [];\nNarrowphase.prototype[COLLISION_TYPES.sphereTrimesh] = Narrowphase.prototype.sphereTrimesh;\nconst point_on_plane_to_sphere = new Vec3();\nconst plane_to_sphere_ortho = new Vec3();\nNarrowphase.prototype[COLLISION_TYPES.spherePlane] = Narrowphase.prototype.spherePlane; // See http://bulletphysics.com/Bullet/BulletFull/SphereTriangleDetector_8cpp_source.html\n\nconst pointInPolygon_edge = new Vec3();\nconst pointInPolygon_edge_x_normal = new Vec3();\nconst pointInPolygon_vtp = new Vec3();\n\nfunction pointInPolygon(verts, normal, p) {\n  let positiveResult = null;\n  const N = verts.length;\n\n  for (let i = 0; i !== N; i++) {\n    const v = verts[i]; // Get edge to the next vertex\n\n    const edge = pointInPolygon_edge;\n    verts[(i + 1) % N].vsub(v, edge); // Get cross product between polygon normal and the edge\n\n    const edge_x_normal = pointInPolygon_edge_x_normal; //const edge_x_normal = new Vec3();\n\n    edge.cross(normal, edge_x_normal); // Get vector between point and current vertex\n\n    const vertex_to_p = pointInPolygon_vtp;\n    p.vsub(v, vertex_to_p); // This dot product determines which side of the edge the point is\n\n    const r = edge_x_normal.dot(vertex_to_p); // If all such dot products have same sign, we are inside the polygon.\n\n    if (positiveResult === null || r > 0 && positiveResult === true || r <= 0 && positiveResult === false) {\n      if (positiveResult === null) {\n        positiveResult = r > 0;\n      }\n\n      continue;\n    } else {\n      return false; // Encountered some other sign. Exit.\n    }\n  } // If we got here, all dot products were of the same sign.\n\n\n  return true;\n}\n\nconst box_to_sphere = new Vec3();\nconst sphereBox_ns = new Vec3();\nconst sphereBox_ns1 = new Vec3();\nconst sphereBox_ns2 = new Vec3();\nconst sphereBox_sides = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\nconst sphereBox_sphere_to_corner = new Vec3();\nconst sphereBox_side_ns = new Vec3();\nconst sphereBox_side_ns1 = new Vec3();\nconst sphereBox_side_ns2 = new Vec3();\nNarrowphase.prototype[COLLISION_TYPES.sphereBox] = Narrowphase.prototype.sphereBox;\nconst convex_to_sphere = new Vec3();\nconst sphereConvex_edge = new Vec3();\nconst sphereConvex_edgeUnit = new Vec3();\nconst sphereConvex_sphereToCorner = new Vec3();\nconst sphereConvex_worldCorner = new Vec3();\nconst sphereConvex_worldNormal = new Vec3();\nconst sphereConvex_worldPoint = new Vec3();\nconst sphereConvex_worldSpherePointClosestToPlane = new Vec3();\nconst sphereConvex_penetrationVec = new Vec3();\nconst sphereConvex_sphereToWorldPoint = new Vec3();\nNarrowphase.prototype[COLLISION_TYPES.sphereConvex] = Narrowphase.prototype.sphereConvex;\nNarrowphase.prototype[COLLISION_TYPES.planeBox] = Narrowphase.prototype.planeBox;\nconst planeConvex_v = new Vec3();\nconst planeConvex_normal = new Vec3();\nconst planeConvex_relpos = new Vec3();\nconst planeConvex_projected = new Vec3();\nNarrowphase.prototype[COLLISION_TYPES.planeConvex] = Narrowphase.prototype.planeConvex;\nconst convexConvex_sepAxis = new Vec3();\nconst convexConvex_q = new Vec3();\nNarrowphase.prototype[COLLISION_TYPES.convexConvex] = Narrowphase.prototype.convexConvex; // Narrowphase.prototype[COLLISION_TYPES.convexTrimesh] = Narrowphase.prototype.convexTrimesh\n\nconst particlePlane_normal = new Vec3();\nconst particlePlane_relpos = new Vec3();\nconst particlePlane_projected = new Vec3();\nNarrowphase.prototype[COLLISION_TYPES.planeParticle] = Narrowphase.prototype.planeParticle;\nconst particleSphere_normal = new Vec3();\nNarrowphase.prototype[COLLISION_TYPES.sphereParticle] = Narrowphase.prototype.sphereParticle; // WIP\n\nconst cqj = new Quaternion();\nconst convexParticle_local = new Vec3();\nconst convexParticle_penetratedFaceNormal = new Vec3();\nconst convexParticle_vertexToParticle = new Vec3();\nconst convexParticle_worldPenetrationVec = new Vec3();\nNarrowphase.prototype[COLLISION_TYPES.convexParticle] = Narrowphase.prototype.convexParticle;\nNarrowphase.prototype[COLLISION_TYPES.boxHeightfield] = Narrowphase.prototype.boxHeightfield;\nconst convexHeightfield_tmp1 = new Vec3();\nconst convexHeightfield_tmp2 = new Vec3();\nconst convexHeightfield_faceList = [0];\nNarrowphase.prototype[COLLISION_TYPES.convexHeightfield] = Narrowphase.prototype.convexHeightfield;\nconst sphereHeightfield_tmp1 = new Vec3();\nconst sphereHeightfield_tmp2 = new Vec3();\nNarrowphase.prototype[COLLISION_TYPES.sphereHeightfield] = Narrowphase.prototype.sphereHeightfield;\n\n/**\r\n * @class OverlapKeeper\r\n * @constructor\r\n */\nclass OverlapKeeper {\n  constructor() {\n    this.current = [];\n    this.previous = [];\n  }\n\n  getKey(i, j) {\n    if (j < i) {\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n\n    return i << 16 | j;\n  }\n  /**\r\n   * @method set\r\n   * @param {Number} i\r\n   * @param {Number} j\r\n   */\n\n\n  set(i, j) {\n    // Insertion sort. This way the diff will have linear complexity.\n    const key = this.getKey(i, j);\n    const current = this.current;\n    let index = 0;\n\n    while (key > current[index]) {\n      index++;\n    }\n\n    if (key === current[index]) {\n      return; // Pair was already added\n    }\n\n    for (let j = current.length - 1; j >= index; j--) {\n      current[j + 1] = current[j];\n    }\n\n    current[index] = key;\n  }\n  /**\r\n   * @method tick\r\n   */\n\n\n  tick() {\n    const tmp = this.current;\n    this.current = this.previous;\n    this.previous = tmp;\n    this.current.length = 0;\n  }\n  /**\r\n   * @method getDiff\r\n   * @param  {array} additions\r\n   * @param  {array} removals\r\n   */\n\n\n  getDiff(additions, removals) {\n    const a = this.current;\n    const b = this.previous;\n    const al = a.length;\n    const bl = b.length;\n    let j = 0;\n\n    for (let i = 0; i < al; i++) {\n      let found = false;\n      const keyA = a[i];\n\n      while (keyA > b[j]) {\n        j++;\n      }\n\n      found = keyA === b[j];\n\n      if (!found) {\n        unpackAndPush(additions, keyA);\n      }\n    }\n\n    j = 0;\n\n    for (let i = 0; i < bl; i++) {\n      let found = false;\n      const keyB = b[i];\n\n      while (keyB > a[j]) {\n        j++;\n      }\n\n      found = a[j] === keyB;\n\n      if (!found) {\n        unpackAndPush(removals, keyB);\n      }\n    }\n  }\n\n}\n\nfunction unpackAndPush(array, key) {\n  array.push((key & 0xffff0000) >> 16, key & 0x0000ffff);\n}\n\n/**\r\n * @class TupleDictionary\r\n * @constructor\r\n */\nclass TupleDictionary {\n  constructor() {\n    this.data = {\n      keys: []\n    };\n  }\n  /**\r\n   * @method get\r\n   * @param  {Number} i\r\n   * @param  {Number} j\r\n   * @return {Object}\r\n   */\n\n\n  get(i, j) {\n    if (i > j) {\n      // swap\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n\n    return this.data[i + \"-\" + j];\n  }\n  /**\r\n   * @method set\r\n   * @param  {Number} i\r\n   * @param  {Number} j\r\n   * @param {Object} value\r\n   */\n\n\n  set(i, j, value) {\n    if (i > j) {\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n\n    const key = i + \"-\" + j; // Check if key already exists\n\n    if (!this.get(i, j)) {\n      this.data.keys.push(key);\n    }\n\n    this.data[key] = value;\n  }\n  /**\r\n   * @method reset\r\n   */\n\n\n  reset() {\n    const data = this.data;\n    const keys = data.keys;\n\n    while (keys.length > 0) {\n      const key = keys.pop();\n      delete data[key];\n    }\n  }\n\n}\n\n/**\r\n * The physics world\r\n * @class World\r\n * @constructor\r\n * @extends EventTarget\r\n * @param {object} [options]\r\n * @param {Vec3} [options.gravity]\r\n * @param {boolean} [options.allowSleep]\r\n * @param {Broadphase} [options.broadphase]\r\n * @param {Solver} [options.solver]\r\n * @param {boolean} [options.quatNormalizeFast]\r\n * @param {number} [options.quatNormalizeSkip]\r\n */\nclass World extends EventTarget {\n  // Currently / last used timestep. Is set to -1 if not available. This value is updated before each internal step, which means that it is \"fresh\" inside event callbacks.\n  // Makes bodies go to sleep when they've been inactive.\n  // All the current contacts (instances of ContactEquation) in the world.\n  // How often to normalize quaternions. Set to 0 for every step, 1 for every second etc.. A larger value increases performance. If bodies tend to explode, set to a smaller value (zero to be sure nothing can go wrong).\n  // Set to true to use fast quaternion normalization. It is often enough accurate to use. If bodies tend to explode, set to false.\n  // The wall-clock time since simulation start.\n  // Number of timesteps taken since start.\n  // Default and last timestep sizes.\n  // The broadphase algorithm to use. Default is NaiveBroadphase.\n  // All bodies in this world\n  // True if any bodies are not sleeping, false if every body is sleeping.\n  // The solver algorithm to use. Default is GSSolver.\n  // CollisionMatrix from the previous step.\n  // All added materials.\n  // Used to look up a ContactMaterial given two instances of Material.\n  // This contact material is used if no suitable contactmaterial is found for a contact.\n  // Time accumulator for interpolation. See http://gafferongames.com/game-physics/fix-your-timestep/\n  // Dispatched after a body has been added to the world.\n  // Dispatched after a body has been removed from the world.\n  constructor(options = {}) {\n    super();\n    this.dt = -1;\n    this.allowSleep = !!options.allowSleep;\n    this.contacts = [];\n    this.frictionEquations = [];\n    this.quatNormalizeSkip = options.quatNormalizeSkip !== undefined ? options.quatNormalizeSkip : 0;\n    this.quatNormalizeFast = options.quatNormalizeFast !== undefined ? options.quatNormalizeFast : false;\n    this.time = 0.0;\n    this.stepnumber = 0;\n    this.default_dt = 1 / 60;\n    this.nextId = 0;\n    this.gravity = new Vec3();\n\n    if (options.gravity) {\n      this.gravity.copy(options.gravity);\n    }\n\n    this.broadphase = options.broadphase !== undefined ? options.broadphase : new NaiveBroadphase();\n    this.bodies = [];\n    this.hasActiveBodies = false;\n    this.solver = options.solver !== undefined ? options.solver : new GSSolver();\n    this.constraints = [];\n    this.narrowphase = new Narrowphase(this);\n    this.collisionMatrix = new ArrayCollisionMatrix();\n    this.collisionMatrixPrevious = new ArrayCollisionMatrix();\n    this.bodyOverlapKeeper = new OverlapKeeper();\n    this.shapeOverlapKeeper = new OverlapKeeper();\n    this.materials = [];\n    this.contactmaterials = [];\n    this.contactMaterialTable = new TupleDictionary();\n    this.defaultMaterial = new Material('default');\n    this.defaultContactMaterial = new ContactMaterial(this.defaultMaterial, this.defaultMaterial, {\n      friction: 0.3,\n      restitution: 0.0\n    });\n    this.doProfiling = false;\n    this.profile = {\n      solve: 0,\n      makeContactConstraints: 0,\n      broadphase: 0,\n      integrate: 0,\n      narrowphase: 0\n    };\n    this.accumulator = 0;\n    this.subsystems = [];\n    this.addBodyEvent = {\n      type: 'addBody',\n      body: null\n    };\n    this.removeBodyEvent = {\n      type: 'removeBody',\n      body: null\n    };\n    this.idToBodyMap = {};\n    this.broadphase.setWorld(this);\n  }\n  /**\r\n   * Get the contact material between materials m1 and m2\r\n   * @method getContactMaterial\r\n   * @param {Material} m1\r\n   * @param {Material} m2\r\n   * @return {ContactMaterial} The contact material if it was found.\r\n   */\n\n\n  getContactMaterial(m1, m2) {\n    return this.contactMaterialTable.get(m1.id, m2.id);\n  }\n  /**\r\n   * Get number of objects in the world.\r\n   * @method numObjects\r\n   * @return {Number}\r\n   * @deprecated\r\n   */\n\n\n  numObjects() {\n    return this.bodies.length;\n  }\n  /**\r\n   * Store old collision state info\r\n   * @method collisionMatrixTick\r\n   */\n\n\n  collisionMatrixTick() {\n    const temp = this.collisionMatrixPrevious;\n    this.collisionMatrixPrevious = this.collisionMatrix;\n    this.collisionMatrix = temp;\n    this.collisionMatrix.reset();\n    this.bodyOverlapKeeper.tick();\n    this.shapeOverlapKeeper.tick();\n  }\n  /**\r\n   * Add a constraint to the simulation.\r\n   * @method addConstraint\r\n   * @param {Constraint} c\r\n   */\n\n\n  addConstraint(c) {\n    this.constraints.push(c);\n  }\n  /**\r\n   * Removes a constraint\r\n   * @method removeConstraint\r\n   * @param {Constraint} c\r\n   */\n\n\n  removeConstraint(c) {\n    const idx = this.constraints.indexOf(c);\n\n    if (idx !== -1) {\n      this.constraints.splice(idx, 1);\n    }\n  }\n  /**\r\n   * Raycast test\r\n   * @method rayTest\r\n   * @param {Vec3} from\r\n   * @param {Vec3} to\r\n   * @param {RaycastResult} result\r\n   * @deprecated Use .raycastAll, .raycastClosest or .raycastAny instead.\r\n   */\n\n\n  rayTest(from, to, result) {\n    if (result instanceof RaycastResult) {\n      // Do raycastClosest\n      this.raycastClosest(from, to, {\n        skipBackfaces: true\n      }, result);\n    } else {\n      // Do raycastAll\n      this.raycastAll(from, to, {\n        skipBackfaces: true\n      }, result);\n    }\n  }\n  /**\r\n   * Ray cast against all bodies. The provided callback will be executed for each hit with a RaycastResult as single argument.\r\n   * @method raycastAll\r\n   * @param  {Vec3} from\r\n   * @param  {Vec3} to\r\n   * @param  {Object} options\r\n   * @param  {number} [options.collisionFilterMask=-1]\r\n   * @param  {number} [options.collisionFilterGroup=-1]\r\n   * @param  {boolean} [options.skipBackfaces=false]\r\n   * @param  {boolean} [options.checkCollisionResponse=true]\r\n   * @param  {Function} callback\r\n   * @return {boolean} True if any body was hit.\r\n   */\n\n\n  raycastAll(from, to, options = {}, callback) {\n    options.mode = Ray.ALL;\n    options.from = from;\n    options.to = to;\n    options.callback = callback;\n    return tmpRay$1.intersectWorld(this, options);\n  }\n  /**\r\n   * Ray cast, and stop at the first result. Note that the order is random - but the method is fast.\r\n   * @method raycastAny\r\n   * @param  {Vec3} from\r\n   * @param  {Vec3} to\r\n   * @param  {Object} options\r\n   * @param  {number} [options.collisionFilterMask=-1]\r\n   * @param  {number} [options.collisionFilterGroup=-1]\r\n   * @param  {boolean} [options.skipBackfaces=false]\r\n   * @param  {boolean} [options.checkCollisionResponse=true]\r\n   * @param  {RaycastResult} result\r\n   * @return {boolean} True if any body was hit.\r\n   */\n\n\n  raycastAny(from, to, options = {}, result) {\n    options.mode = Ray.ANY;\n    options.from = from;\n    options.to = to;\n    options.result = result;\n    return tmpRay$1.intersectWorld(this, options);\n  }\n  /**\r\n   * Ray cast, and return information of the closest hit.\r\n   * @method raycastClosest\r\n   * @param  {Vec3} from\r\n   * @param  {Vec3} to\r\n   * @param  {Object} options\r\n   * @param  {number} [options.collisionFilterMask=-1]\r\n   * @param  {number} [options.collisionFilterGroup=-1]\r\n   * @param  {boolean} [options.skipBackfaces=false]\r\n   * @param  {boolean} [options.checkCollisionResponse=true]\r\n   * @param  {RaycastResult} result\r\n   * @return {boolean} True if any body was hit.\r\n   */\n\n\n  raycastClosest(from, to, options = {}, result) {\n    options.mode = Ray.CLOSEST;\n    options.from = from;\n    options.to = to;\n    options.result = result;\n    return tmpRay$1.intersectWorld(this, options);\n  }\n  /**\r\n   * Add a rigid body to the simulation.\r\n   * @method add\r\n   * @param {Body} body\r\n   * @todo If the simulation has not yet started, why recrete and copy arrays for each body? Accumulate in dynamic arrays in this case.\r\n   * @todo Adding an array of bodies should be possible. This would save some loops too\r\n   */\n\n\n  addBody(body) {\n    if (this.bodies.includes(body)) {\n      return;\n    }\n\n    body.index = this.bodies.length;\n    this.bodies.push(body);\n    body.world = this;\n    body.initPosition.copy(body.position);\n    body.initVelocity.copy(body.velocity);\n    body.timeLastSleepy = this.time;\n\n    if (body instanceof Body) {\n      body.initAngularVelocity.copy(body.angularVelocity);\n      body.initQuaternion.copy(body.quaternion);\n    }\n\n    this.collisionMatrix.setNumObjects(this.bodies.length);\n    this.addBodyEvent.body = body;\n    this.idToBodyMap[body.id] = body;\n    this.dispatchEvent(this.addBodyEvent);\n  }\n  /**\r\n   * Remove a rigid body from the simulation.\r\n   * @method remove\r\n   * @param {Body} body\r\n   */\n\n\n  removeBody(body) {\n    body.world = null;\n    const n = this.bodies.length - 1;\n    const bodies = this.bodies;\n    const idx = bodies.indexOf(body);\n\n    if (idx !== -1) {\n      bodies.splice(idx, 1); // Todo: should use a garbage free method\n      // Recompute index\n\n      for (let i = 0; i !== bodies.length; i++) {\n        bodies[i].index = i;\n      }\n\n      this.collisionMatrix.setNumObjects(n);\n      this.removeBodyEvent.body = body;\n      delete this.idToBodyMap[body.id];\n      this.dispatchEvent(this.removeBodyEvent);\n    }\n  }\n\n  getBodyById(id) {\n    return this.idToBodyMap[id];\n  } // TODO Make a faster map\n\n\n  getShapeById(id) {\n    const bodies = this.bodies;\n\n    for (let i = 0, bl = bodies.length; i < bl; i++) {\n      const shapes = bodies[i].shapes;\n\n      for (let j = 0, sl = shapes.length; j < sl; j++) {\n        const shape = shapes[j];\n\n        if (shape.id === id) {\n          return shape;\n        }\n      }\n    }\n  }\n  /**\r\n   * Adds a material to the World.\r\n   * @method addMaterial\r\n   * @param {Material} m\r\n   * @todo Necessary?\r\n   */\n\n\n  addMaterial(m) {\n    this.materials.push(m);\n  }\n  /**\r\n   * Adds a contact material to the World\r\n   * @method addContactMaterial\r\n   * @param {ContactMaterial} cmat\r\n   */\n\n\n  addContactMaterial(cmat) {\n    // Add contact material\n    this.contactmaterials.push(cmat); // Add current contact material to the material table\n\n    this.contactMaterialTable.set(cmat.materials[0].id, cmat.materials[1].id, cmat);\n  }\n  /**\r\n   * Step the physics world forward in time.\r\n   *\r\n   * There are two modes. The simple mode is fixed timestepping without interpolation. In this case you only use the first argument. The second case uses interpolation. In that you also provide the time since the function was last used, as well as the maximum fixed timesteps to take.\r\n   *\r\n   * @method step\r\n   * @param {Number} dt                       The fixed time step size to use.\r\n   * @param {Number} [timeSinceLastCalled]    The time elapsed since the function was last called.\r\n   * @param {Number} [maxSubSteps=10]         Maximum number of fixed steps to take per function call.\r\n   *\r\n   * @example\r\n   *     // fixed timestepping without interpolation\r\n   *     world.step(1/60);\r\n   *\r\n   * @see http://bulletphysics.org/mediawiki-1.5.8/index.php/Stepping_The_World\r\n   */\n\n\n  step(dt, timeSinceLastCalled = 0, maxSubSteps = 10) {\n    if (timeSinceLastCalled === 0) {\n      // Fixed, simple stepping\n      this.internalStep(dt); // Increment time\n\n      this.time += dt;\n    } else {\n      this.accumulator += timeSinceLastCalled;\n      let substeps = 0;\n\n      while (this.accumulator >= dt && substeps < maxSubSteps) {\n        // Do fixed steps to catch up\n        this.internalStep(dt);\n        this.accumulator -= dt;\n        substeps++;\n      }\n\n      const t = this.accumulator % dt / dt;\n\n      for (let j = 0; j !== this.bodies.length; j++) {\n        const b = this.bodies[j];\n        b.previousPosition.lerp(b.position, t, b.interpolatedPosition);\n        b.previousQuaternion.slerp(b.quaternion, t, b.interpolatedQuaternion);\n        b.previousQuaternion.normalize();\n      }\n\n      this.time += timeSinceLastCalled;\n    }\n  }\n\n  internalStep(dt) {\n    this.dt = dt;\n    const contacts = this.contacts;\n    const p1 = World_step_p1;\n    const p2 = World_step_p2;\n    const N = this.numObjects();\n    const bodies = this.bodies;\n    const solver = this.solver;\n    const gravity = this.gravity;\n    const doProfiling = this.doProfiling;\n    const profile = this.profile;\n    const DYNAMIC = Body.DYNAMIC;\n    let profilingStart = -Infinity;\n    const constraints = this.constraints;\n    const frictionEquationPool = World_step_frictionEquationPool;\n    const gnorm = gravity.length();\n    const gx = gravity.x;\n    const gy = gravity.y;\n    const gz = gravity.z;\n    let i = 0;\n\n    if (doProfiling) {\n      profilingStart = performance.now();\n    } // Add gravity to all objects\n\n\n    for (i = 0; i !== N; i++) {\n      const bi = bodies[i];\n\n      if (bi.type === DYNAMIC) {\n        // Only for dynamic bodies\n        const f = bi.force;\n        const m = bi.mass;\n        f.x += m * gx;\n        f.y += m * gy;\n        f.z += m * gz;\n      }\n    } // Update subsystems\n\n\n    for (let i = 0, Nsubsystems = this.subsystems.length; i !== Nsubsystems; i++) {\n      this.subsystems[i].update();\n    } // Collision detection\n\n\n    if (doProfiling) {\n      profilingStart = performance.now();\n    }\n\n    p1.length = 0; // Clean up pair arrays from last step\n\n    p2.length = 0;\n    this.broadphase.collisionPairs(this, p1, p2);\n\n    if (doProfiling) {\n      profile.broadphase = performance.now() - profilingStart;\n    } // Remove constrained pairs with collideConnected == false\n\n\n    let Nconstraints = constraints.length;\n\n    for (i = 0; i !== Nconstraints; i++) {\n      const c = constraints[i];\n\n      if (!c.collideConnected) {\n        for (let j = p1.length - 1; j >= 0; j -= 1) {\n          if (c.bodyA === p1[j] && c.bodyB === p2[j] || c.bodyB === p1[j] && c.bodyA === p2[j]) {\n            p1.splice(j, 1);\n            p2.splice(j, 1);\n          }\n        }\n      }\n    }\n\n    this.collisionMatrixTick(); // Generate contacts\n\n    if (doProfiling) {\n      profilingStart = performance.now();\n    }\n\n    const oldcontacts = World_step_oldContacts;\n    const NoldContacts = contacts.length;\n\n    for (i = 0; i !== NoldContacts; i++) {\n      oldcontacts.push(contacts[i]);\n    }\n\n    contacts.length = 0; // Transfer FrictionEquation from current list to the pool for reuse\n\n    const NoldFrictionEquations = this.frictionEquations.length;\n\n    for (i = 0; i !== NoldFrictionEquations; i++) {\n      frictionEquationPool.push(this.frictionEquations[i]);\n    }\n\n    this.frictionEquations.length = 0;\n    this.narrowphase.getContacts(p1, p2, this, contacts, oldcontacts, // To be reused\n    this.frictionEquations, frictionEquationPool);\n\n    if (doProfiling) {\n      profile.narrowphase = performance.now() - profilingStart;\n    } // Loop over all collisions\n\n\n    if (doProfiling) {\n      profilingStart = performance.now();\n    } // Add all friction eqs\n\n\n    for (i = 0; i < this.frictionEquations.length; i++) {\n      solver.addEquation(this.frictionEquations[i]);\n    }\n\n    const ncontacts = contacts.length;\n\n    for (let k = 0; k !== ncontacts; k++) {\n      // Current contact\n      const c = contacts[k]; // Get current collision indeces\n\n      const bi = c.bi;\n      const bj = c.bj;\n      const si = c.si;\n      const sj = c.sj; // Get collision properties\n\n      let cm;\n\n      if (bi.material && bj.material) {\n        cm = this.getContactMaterial(bi.material, bj.material) || this.defaultContactMaterial;\n      } else {\n        cm = this.defaultContactMaterial;\n      } // c.enabled = bi.collisionResponse && bj.collisionResponse && si.collisionResponse && sj.collisionResponse;\n\n\n      let mu = cm.friction; // c.restitution = cm.restitution;\n      // If friction or restitution were specified in the material, use them\n\n      if (bi.material && bj.material) {\n        if (bi.material.friction >= 0 && bj.material.friction >= 0) {\n          mu = bi.material.friction * bj.material.friction;\n        }\n\n        if (bi.material.restitution >= 0 && bj.material.restitution >= 0) {\n          c.restitution = bi.material.restitution * bj.material.restitution;\n        }\n      } // c.setSpookParams(\n      //           cm.contactEquationStiffness,\n      //           cm.contactEquationRelaxation,\n      //           dt\n      //       );\n\n\n      solver.addEquation(c); // // Add friction constraint equation\n      // if(mu > 0){\n      // \t// Create 2 tangent equations\n      // \tconst mug = mu * gnorm;\n      // \tconst reducedMass = (bi.invMass + bj.invMass);\n      // \tif(reducedMass > 0){\n      // \t\treducedMass = 1/reducedMass;\n      // \t}\n      // \tconst pool = frictionEquationPool;\n      // \tconst c1 = pool.length ? pool.pop() : new FrictionEquation(bi,bj,mug*reducedMass);\n      // \tconst c2 = pool.length ? pool.pop() : new FrictionEquation(bi,bj,mug*reducedMass);\n      // \tthis.frictionEquations.push(c1, c2);\n      // \tc1.bi = c2.bi = bi;\n      // \tc1.bj = c2.bj = bj;\n      // \tc1.minForce = c2.minForce = -mug*reducedMass;\n      // \tc1.maxForce = c2.maxForce = mug*reducedMass;\n      // \t// Copy over the relative vectors\n      // \tc1.ri.copy(c.ri);\n      // \tc1.rj.copy(c.rj);\n      // \tc2.ri.copy(c.ri);\n      // \tc2.rj.copy(c.rj);\n      // \t// Construct tangents\n      // \tc.ni.tangents(c1.t, c2.t);\n      //           // Set spook params\n      //           c1.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, dt);\n      //           c2.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, dt);\n      //           c1.enabled = c2.enabled = c.enabled;\n      // \t// Add equations to solver\n      // \tsolver.addEquation(c1);\n      // \tsolver.addEquation(c2);\n      // }\n\n      if (bi.allowSleep && bi.type === Body.DYNAMIC && bi.sleepState === Body.SLEEPING && bj.sleepState === Body.AWAKE && bj.type !== Body.STATIC) {\n        const speedSquaredB = bj.velocity.lengthSquared() + bj.angularVelocity.lengthSquared();\n        const speedLimitSquaredB = bj.sleepSpeedLimit ** 2;\n\n        if (speedSquaredB >= speedLimitSquaredB * 2) {\n          bi.wakeUpAfterNarrowphase = true;\n        }\n      }\n\n      if (bj.allowSleep && bj.type === Body.DYNAMIC && bj.sleepState === Body.SLEEPING && bi.sleepState === Body.AWAKE && bi.type !== Body.STATIC) {\n        const speedSquaredA = bi.velocity.lengthSquared() + bi.angularVelocity.lengthSquared();\n        const speedLimitSquaredA = bi.sleepSpeedLimit ** 2;\n\n        if (speedSquaredA >= speedLimitSquaredA * 2) {\n          bj.wakeUpAfterNarrowphase = true;\n        }\n      } // Now we know that i and j are in contact. Set collision matrix state\n\n\n      this.collisionMatrix.set(bi, bj, true);\n\n      if (!this.collisionMatrixPrevious.get(bi, bj)) {\n        // First contact!\n        // We reuse the collideEvent object, otherwise we will end up creating new objects for each new contact, even if there's no event listener attached.\n        World_step_collideEvent.body = bj;\n        World_step_collideEvent.contact = c;\n        bi.dispatchEvent(World_step_collideEvent);\n        World_step_collideEvent.body = bi;\n        bj.dispatchEvent(World_step_collideEvent);\n      }\n\n      this.bodyOverlapKeeper.set(bi.id, bj.id);\n      this.shapeOverlapKeeper.set(si.id, sj.id);\n    }\n\n    this.emitContactEvents();\n\n    if (doProfiling) {\n      profile.makeContactConstraints = performance.now() - profilingStart;\n      profilingStart = performance.now();\n    } // Wake up bodies\n\n\n    for (i = 0; i !== N; i++) {\n      const bi = bodies[i];\n\n      if (bi.wakeUpAfterNarrowphase) {\n        bi.wakeUp();\n        bi.wakeUpAfterNarrowphase = false;\n      }\n    } // Add user-added constraints\n\n\n    Nconstraints = constraints.length;\n\n    for (i = 0; i !== Nconstraints; i++) {\n      const c = constraints[i];\n      c.update();\n\n      for (let j = 0, Neq = c.equations.length; j !== Neq; j++) {\n        const eq = c.equations[j];\n        solver.addEquation(eq);\n      }\n    } // Solve the constrained system\n\n\n    solver.solve(dt, this);\n\n    if (doProfiling) {\n      profile.solve = performance.now() - profilingStart;\n    } // Remove all contacts from solver\n\n\n    solver.removeAllEquations(); // Apply damping, see http://code.google.com/p/bullet/issues/detail?id=74 for details\n\n    const pow = Math.pow;\n\n    for (i = 0; i !== N; i++) {\n      const bi = bodies[i];\n\n      if (bi.type & DYNAMIC) {\n        // Only for dynamic bodies\n        const ld = pow(1.0 - bi.linearDamping, dt);\n        const v = bi.velocity;\n        v.scale(ld, v);\n        const av = bi.angularVelocity;\n\n        if (av) {\n          const ad = pow(1.0 - bi.angularDamping, dt);\n          av.scale(ad, av);\n        }\n      }\n    }\n\n    this.dispatchEvent(World_step_preStepEvent); // Invoke pre-step callbacks\n\n    for (i = 0; i !== N; i++) {\n      const bi = bodies[i];\n\n      if (bi.preStep) {\n        bi.preStep.call(bi);\n      }\n    } // Leap frog\n    // vnew = v + h*f/m\n    // xnew = x + h*vnew\n\n\n    if (doProfiling) {\n      profilingStart = performance.now();\n    }\n\n    const stepnumber = this.stepnumber;\n    const quatNormalize = stepnumber % (this.quatNormalizeSkip + 1) === 0;\n    const quatNormalizeFast = this.quatNormalizeFast;\n\n    for (i = 0; i !== N; i++) {\n      bodies[i].integrate(dt, quatNormalize, quatNormalizeFast);\n    }\n\n    this.clearForces();\n    this.broadphase.dirty = true;\n\n    if (doProfiling) {\n      profile.integrate = performance.now() - profilingStart;\n    } // Update world time\n\n\n    this.time += dt;\n    this.stepnumber += 1;\n    this.dispatchEvent(World_step_postStepEvent); // Invoke post-step callbacks\n\n    for (i = 0; i !== N; i++) {\n      const bi = bodies[i];\n      const postStep = bi.postStep;\n\n      if (postStep) {\n        postStep.call(bi);\n      }\n    } // Sleeping update\n\n\n    let hasActiveBodies = true;\n\n    if (this.allowSleep) {\n      hasActiveBodies = false;\n\n      for (i = 0; i !== N; i++) {\n        const bi = bodies[i];\n        bi.sleepTick(this.time);\n\n        if (bi.sleepState !== Body.SLEEPING) {\n          hasActiveBodies = true;\n        }\n      }\n    }\n\n    this.hasActiveBodies = hasActiveBodies;\n  }\n  /**\r\n   * Sets all body forces in the world to zero.\r\n   * @method clearForces\r\n   */\n\n\n  clearForces() {\n    const bodies = this.bodies;\n    const N = bodies.length;\n\n    for (let i = 0; i !== N; i++) {\n      const b = bodies[i];\n      const force = b.force;\n      const tau = b.torque;\n      b.force.set(0, 0, 0);\n      b.torque.set(0, 0, 0);\n    }\n  }\n\n} // Temp stuff\n\nconst tmpAABB1 = new AABB();\nconst tmpRay$1 = new Ray(); // performance.now()\n\nif (typeof performance === 'undefined') {\n  performance = {};\n}\n\nif (!performance.now) {\n  let nowOffset = Date.now();\n\n  if (performance.timing && performance.timing.navigationStart) {\n    nowOffset = performance.timing.navigationStart;\n  }\n\n  performance.now = () => Date.now() - nowOffset;\n}\n// Reusable event objects to save memory.\n\nconst World_step_postStepEvent = {\n  type: 'postStep'\n}; // Dispatched before the world steps forward in time.\n\nconst World_step_preStepEvent = {\n  type: 'preStep'\n};\nconst World_step_collideEvent = {\n  type: Body.COLLIDE_EVENT_NAME,\n  body: null,\n  contact: null\n}; // Pools for unused objects\n\nconst World_step_oldContacts = [];\nconst World_step_frictionEquationPool = []; // Reusable arrays for collision pairs\n\nconst World_step_p1 = [];\nconst World_step_p2 = [];\n\nWorld.prototype.emitContactEvents = (() => {\n  const additions = [];\n  const removals = [];\n  const beginContactEvent = {\n    type: 'beginContact',\n    bodyA: null,\n    bodyB: null\n  };\n  const endContactEvent = {\n    type: 'endContact',\n    bodyA: null,\n    bodyB: null\n  };\n  const beginShapeContactEvent = {\n    type: 'beginShapeContact',\n    bodyA: null,\n    bodyB: null,\n    shapeA: null,\n    shapeB: null\n  };\n  const endShapeContactEvent = {\n    type: 'endShapeContact',\n    bodyA: null,\n    bodyB: null,\n    shapeA: null,\n    shapeB: null\n  };\n  return function () {\n    const hasBeginContact = this.hasAnyEventListener('beginContact');\n    const hasEndContact = this.hasAnyEventListener('endContact');\n\n    if (hasBeginContact || hasEndContact) {\n      this.bodyOverlapKeeper.getDiff(additions, removals);\n    }\n\n    if (hasBeginContact) {\n      for (let i = 0, l = additions.length; i < l; i += 2) {\n        beginContactEvent.bodyA = this.getBodyById(additions[i]);\n        beginContactEvent.bodyB = this.getBodyById(additions[i + 1]);\n        this.dispatchEvent(beginContactEvent);\n      }\n\n      beginContactEvent.bodyA = beginContactEvent.bodyB = null;\n    }\n\n    if (hasEndContact) {\n      for (let i = 0, l = removals.length; i < l; i += 2) {\n        endContactEvent.bodyA = this.getBodyById(removals[i]);\n        endContactEvent.bodyB = this.getBodyById(removals[i + 1]);\n        this.dispatchEvent(endContactEvent);\n      }\n\n      endContactEvent.bodyA = endContactEvent.bodyB = null;\n    }\n\n    additions.length = removals.length = 0;\n    const hasBeginShapeContact = this.hasAnyEventListener('beginShapeContact');\n    const hasEndShapeContact = this.hasAnyEventListener('endShapeContact');\n\n    if (hasBeginShapeContact || hasEndShapeContact) {\n      this.shapeOverlapKeeper.getDiff(additions, removals);\n    }\n\n    if (hasBeginShapeContact) {\n      for (let i = 0, l = additions.length; i < l; i += 2) {\n        const shapeA = this.getShapeById(additions[i]);\n        const shapeB = this.getShapeById(additions[i + 1]);\n        beginShapeContactEvent.shapeA = shapeA;\n        beginShapeContactEvent.shapeB = shapeB;\n        beginShapeContactEvent.bodyA = shapeA.body;\n        beginShapeContactEvent.bodyB = shapeB.body;\n        this.dispatchEvent(beginShapeContactEvent);\n      }\n\n      beginShapeContactEvent.bodyA = beginShapeContactEvent.bodyB = beginShapeContactEvent.shapeA = beginShapeContactEvent.shapeB = null;\n    }\n\n    if (hasEndShapeContact) {\n      for (let i = 0, l = removals.length; i < l; i += 2) {\n        const shapeA = this.getShapeById(removals[i]);\n        const shapeB = this.getShapeById(removals[i + 1]);\n        endShapeContactEvent.shapeA = shapeA;\n        endShapeContactEvent.shapeB = shapeB;\n        endShapeContactEvent.bodyA = shapeA.body;\n        endShapeContactEvent.bodyB = shapeB.body;\n        this.dispatchEvent(endShapeContactEvent);\n      }\n\n      endShapeContactEvent.bodyA = endShapeContactEvent.bodyB = endShapeContactEvent.shapeA = endShapeContactEvent.shapeB = null;\n    }\n  };\n})();\n\nexport { AABB, ArrayCollisionMatrix, BODY_SLEEP_STATES, BODY_TYPES, Body, Box, Broadphase, COLLISION_TYPES, ConeTwistConstraint, Constraint, ContactEquation, ContactMaterial, ConvexPolyhedron, Cylinder, DistanceConstraint, Equation, EventTarget, FrictionEquation, GSSolver, GridBroadphase, Heightfield, HingeConstraint, JacobianElement, LockConstraint, Mat3, Material, NaiveBroadphase, Narrowphase, ObjectCollisionMatrix, Particle, Plane, PointToPointConstraint, Pool, Quaternion, RAY_MODES, Ray, RaycastResult, RaycastVehicle, RigidVehicle, RotationalEquation, RotationalMotorEquation, SAPBroadphase, SHAPE_TYPES, SPHSystem, Shape, Solver, Sphere, SplitSolver, Spring, Transform, Trimesh, Vec3, Vec3Pool, World };\n","import {\r\n  World,\r\n  NaiveBroadphase,\r\n  SAPBroadphase,\r\n  Body,\r\n  Plane,\r\n  Box,\r\n  Vec3,\r\n  ConvexPolyhedron,\r\n  Cylinder,\r\n  Heightfield,\r\n  Particle,\r\n  Sphere,\r\n  Trimesh,\r\n  PointToPointConstraint,\r\n  ConeTwistConstraint,\r\n  HingeConstraint,\r\n  DistanceConstraint,\r\n  LockConstraint,\r\n  Constraint,\r\n  Spring,\r\n  Material,\r\n  Quaternion,\r\n  Ray,\r\n  RaycastResult,\r\n} from 'cannon-es'\r\n\r\nlet bodies = {}\r\nconst springs = {}\r\nconst rays = {}\r\nconst world = new World()\r\nconst config = { step: 1 / 60 }\r\nconst subscriptions = {}\r\nconst tempVector = new Vec3()\r\n\r\nfunction createShape(type, args) {\r\n  switch (type) {\r\n    case 'Box':\r\n      return new Box(new Vec3(...args)) // halfExtents\r\n    case 'ConvexPolyhedron':\r\n      const [v, f, n] = args\r\n      return new ConvexPolyhedron({\r\n        vertices: v.map(([x, y, z]) => new Vec3(x, y, z)),\r\n        normals: n ? n.map(([x, y, z]) => new Vec3(x, y, z)) : null,\r\n        faces: f,\r\n      })\r\n    case 'Cylinder':\r\n      return new Cylinder(...args) // [ radiusTop, radiusBottom, height, numSegments ] = args\r\n    case 'Heightfield':\r\n      return new Heightfield(...args) // [ Array data, options: {minValue, maxValue, elementSize}  ] = args\r\n    case 'Particle':\r\n      return new Particle() // no args\r\n    case 'Plane':\r\n      return new Plane() // no args, infinite x and y\r\n    case 'Sphere':\r\n      return new Sphere(...args) // [radius] = args\r\n    case 'Trimesh':\r\n      return new Trimesh(...args) // [vertices, indices] = args\r\n  }\r\n}\r\n\r\nfunction syncBodies() {\r\n  self.postMessage({ op: 'sync', bodies: world.bodies.map((body) => body.uuid) })\r\n  bodies = world.bodies.reduce((acc, body) => ({ ...acc, [body.uuid]: body }), {})\r\n}\r\n\r\nself.onmessage = (e) => {\r\n  const { op, uuid, type, positions, quaternions, props } = e.data\r\n\r\n  switch (op) {\r\n    case 'init': {\r\n      const {\r\n        gravity,\r\n        tolerance,\r\n        step,\r\n        iterations,\r\n        allowSleep,\r\n        broadphase,\r\n        axisIndex,\r\n        defaultContactMaterial,\r\n      } = props\r\n      const broadphases = { NaiveBroadphase, SAPBroadphase }\r\n      world.allowSleep = allowSleep\r\n      world.gravity.set(gravity[0], gravity[1], gravity[2])\r\n      world.solver.tolerance = tolerance\r\n      world.solver.iterations = iterations\r\n      world.broadphase = new (broadphases[broadphase + 'Broadphase'] || NaiveBroadphase)(world)\r\n      world.broadphase.axisIndex = axisIndex ?? 0\r\n      Object.assign(world.defaultContactMaterial, defaultContactMaterial)\r\n      config.step = step\r\n      break\r\n    }\r\n    case 'step': {\r\n      world.step(config.step)\r\n      const numberOfBodies = world.bodies.length\r\n      for (let i = 0; i < numberOfBodies; i++) {\r\n        let b = world.bodies[i],\r\n          p = b.position,\r\n          q = b.quaternion\r\n        positions[3 * i + 0] = p.x\r\n        positions[3 * i + 1] = p.y\r\n        positions[3 * i + 2] = p.z\r\n        quaternions[4 * i + 0] = q.x\r\n        quaternions[4 * i + 1] = q.y\r\n        quaternions[4 * i + 2] = q.z\r\n        quaternions[4 * i + 3] = q.w\r\n      }\r\n      const observations = []\r\n      for (const id of Object.keys(subscriptions)) {\r\n        const [uuid, type] = subscriptions[id]\r\n        let value = bodies[uuid][type]\r\n        if (value instanceof Vec3) value = value.toArray()\r\n        else if (value instanceof Quaternion) {\r\n          value.toEuler(tempVector)\r\n          value = tempVector.toArray()\r\n        }\r\n        observations.push([id, value])\r\n      }\r\n      self.postMessage(\r\n        {\r\n          op: 'frame',\r\n          positions,\r\n          quaternions,\r\n          observations,\r\n          active: world.hasActiveBodies,\r\n        },\r\n        [positions.buffer, quaternions.buffer]\r\n      )\r\n      break\r\n    }\r\n    case 'addBodies': {\r\n      for (let i = 0; i < uuid.length; i++) {\r\n        const {\r\n          args = [],\r\n          position = [0, 0, 0],\r\n          rotation = [0, 0, 0],\r\n          scale = [1, 1, 1],\r\n          velocity = [0, 0, 0],\r\n          angularVelocity = [0, 0, 0],\r\n          linearFactor = [1, 1, 1],\r\n          angularFactor = [1, 1, 1],\r\n          type: bodyType,\r\n          mass,\r\n          material,\r\n          shapes,\r\n          onCollide,\r\n          ...extra\r\n        } = props[i]\r\n\r\n        const body = new Body({\r\n          ...extra,\r\n          mass: bodyType === 'Static' ? 0 : mass,\r\n          type: bodyType ? Body[bodyType.toUpperCase()] : undefined,\r\n          material: material ? new Material(material) : undefined,\r\n        })\r\n        body.uuid = uuid[i]\r\n\r\n        if (type === 'Compound') {\r\n          shapes.forEach(({ type, args, position, rotation, material, ...extra }) => {\r\n            const shapeBody = body.addShape(\r\n              createShape(type, args),\r\n              position ? new Vec3(...position) : undefined,\r\n              rotation ? new Quaternion().setFromEuler(...rotation) : undefined\r\n            )\r\n            if (material) shapeBody.material = new Material(material)\r\n            Object.assign(shapeBody, extra)\r\n          })\r\n        } else {\r\n          body.addShape(createShape(type, args))\r\n        }\r\n\r\n        body.position.set(position[0], position[1], position[2])\r\n        body.quaternion.setFromEuler(rotation[0], rotation[1], rotation[2])\r\n        body.velocity.set(velocity[0], velocity[1], velocity[2])\r\n        body.angularVelocity.set(angularVelocity[0], angularVelocity[1], angularVelocity[2])\r\n        body.linearFactor.set(linearFactor[0], linearFactor[1], linearFactor[2])\r\n        body.angularFactor.set(angularFactor[0], angularFactor[1], angularFactor[2])\r\n        world.addBody(body)\r\n\r\n        if (onCollide)\r\n          body.addEventListener('collide', ({ type, body, target, contact }) => {\r\n            const { ni, ri, rj } = contact\r\n            self.postMessage({\r\n              op: 'event',\r\n              type,\r\n              body: body.uuid,\r\n              target: target.uuid,\r\n              contact: {\r\n                ni: ni.toArray(),\r\n                ri: ri.toArray(),\r\n                rj: rj.toArray(),\r\n                impactVelocity: contact.getImpactVelocityAlongNormal(),\r\n              },\r\n              collisionFilters: {\r\n                bodyFilterGroup: body.collisionFilterGroup,\r\n                bodyFilterMask: body.collisionFilterMask,\r\n                targetFilterGroup: target.collisionFilterGroup,\r\n                targetFilterMask: target.collisionFilterMask,\r\n              },\r\n            })\r\n          })\r\n      }\r\n      syncBodies()\r\n      break\r\n    }\r\n    case 'removeBodies': {\r\n      for (let i = 0; i < uuid.length; i++) world.removeBody(bodies[uuid[i]])\r\n      syncBodies()\r\n      break\r\n    }\r\n    case 'subscribe': {\r\n      const { id, type } = props\r\n      subscriptions[id] = [uuid, type]\r\n      break\r\n    }\r\n    case 'unsubscribe': {\r\n      delete subscriptions[props]\r\n      break\r\n    }\r\n    case 'setPosition':\r\n      bodies[uuid].position.set(props[0], props[1], props[2])\r\n      break\r\n    case 'setQuaternion':\r\n      bodies[uuid].quaternion.setFromEuler(props[0], props[1], props[2])\r\n      break\r\n    case 'setVelocity':\r\n      bodies[uuid].velocity.set(props[0], props[1], props[2])\r\n      break\r\n    case 'setAngularVelocity':\r\n      bodies[uuid].angularVelocity.set(props[0], props[1], props[2])\r\n      break\r\n    case 'setLinearFactor':\r\n      bodies[uuid].linearFactor.set(props[0], props[1], props[2])\r\n      break\r\n    case 'setAngularFactor':\r\n      bodies[uuid].angularFactor.set(props[0], props[1], props[2])\r\n      break\r\n    case 'setMass':\r\n      bodies[uuid].mass = props\r\n      break\r\n    case 'setLinearDamping':\r\n      bodies[uuid].linearDamping = props\r\n      break\r\n    case 'setAngularDamping':\r\n      bodies[uuid].angularDamping = props\r\n      break\r\n    case 'setAllowSleep':\r\n      bodies[uuid].allowSleep = props\r\n      break\r\n    case 'setSleepSpeedLimit':\r\n      bodies[uuid].sleepSpeedLimit = props\r\n      break\r\n    case 'setSleepTimeLimit':\r\n      bodies[uuid].sleepTimeLimit = props\r\n      break\r\n    case 'setCollisionFilterGroup':\r\n      bodies[uuid].collisionFilterGroup = props\r\n      break\r\n    case 'setCollisionFilterMask':\r\n      bodies[uuid].collisionFilterMask = props\r\n      break\r\n    case 'setCollisionFilterMask':\r\n      bodies[uuid].collisionFilterMask = props\r\n      break\r\n    case 'setFixedRotation':\r\n      bodies[uuid].fixedRotation = props\r\n      break\r\n    case 'applyForce':\r\n      bodies[uuid].applyForce(new Vec3(...props[0]), new Vec3(...props[1]))\r\n      break\r\n    case 'applyImpulse':\r\n      bodies[uuid].applyImpulse(new Vec3(...props[0]), new Vec3(...props[1]))\r\n      break\r\n    case 'applyLocalForce':\r\n      bodies[uuid].applyLocalForce(new Vec3(...props[0]), new Vec3(...props[1]))\r\n      break\r\n    case 'applyLocalImpulse':\r\n      bodies[uuid].applyLocalImpulse(new Vec3(...props[0]), new Vec3(...props[1]))\r\n      break\r\n    case 'addConstraint': {\r\n      const [bodyA, bodyB, optns] = props\r\n      let { pivotA, pivotB, axisA, axisB, ...options } = optns\r\n\r\n      // is there a better way to enforce defaults?\r\n      pivotA = Array.isArray(pivotA) ? new Vec3(...pivotA) : undefined\r\n      pivotB = Array.isArray(pivotB) ? new Vec3(...pivotB) : undefined\r\n      axisA = Array.isArray(axisA) ? new Vec3(...axisA) : undefined\r\n      axisB = Array.isArray(axisB) ? new Vec3(...axisB) : undefined\r\n\r\n      let constraint\r\n\r\n      switch (type) {\r\n        case 'PointToPoint':\r\n          constraint = new PointToPointConstraint(\r\n            bodies[bodyA],\r\n            pivotA,\r\n            bodies[bodyB],\r\n            pivotB,\r\n            optns.maxForce\r\n          )\r\n          break\r\n        case 'ConeTwist':\r\n          constraint = new ConeTwistConstraint(bodies[bodyA], bodies[bodyB], {\r\n            pivotA,\r\n            pivotB,\r\n            axisA,\r\n            axisB,\r\n            ...options,\r\n          })\r\n          break\r\n        case 'Hinge':\r\n          constraint = new HingeConstraint(bodies[bodyA], bodies[bodyB], {\r\n            pivotA,\r\n            pivotB,\r\n            axisA,\r\n            axisB,\r\n            ...options,\r\n          })\r\n          break\r\n        case 'Distance':\r\n          constraint = new DistanceConstraint(bodies[bodyA], bodies[bodyB], optns.distance, optns.maxForce)\r\n          break\r\n        case 'Lock':\r\n          constraint = new LockConstraint(bodies[bodyA], bodies[bodyB], optns)\r\n          break\r\n        default:\r\n          constraint = new Constraint(bodies[bodyA], bodies[bodyB], optns)\r\n          break\r\n      }\r\n      constraint.uuid = uuid\r\n      world.addConstraint(constraint)\r\n      break\r\n    }\r\n    case 'removeConstraint':\r\n      world.removeConstraint(uuid)\r\n      break\r\n\r\n    case 'enableConstraint':\r\n      world.constraints.filter(({ uuid: thisId }) => thisId === uuid).map((c) => c.enable())\r\n      break\r\n\r\n    case 'disableConstraint':\r\n      world.constraints.filter(({ uuid: thisId }) => thisId === uuid).map((c) => c.disable())\r\n      break\r\n\r\n    case 'addSpring': {\r\n      const [bodyA, bodyB, optns] = props\r\n      let { worldAnchorA, worldAnchorB, localAnchorA, localAnchorB, restLength, stiffness, damping } = optns\r\n\r\n      worldAnchorA = Array.isArray(worldAnchorA) ? new Vec3(...worldAnchorA) : undefined\r\n      worldAnchorB = Array.isArray(worldAnchorB) ? new Vec3(...worldAnchorB) : undefined\r\n      localAnchorA = Array.isArray(localAnchorA) ? new Vec3(...localAnchorA) : undefined\r\n      localAnchorB = Array.isArray(localAnchorB) ? new Vec3(...localAnchorB) : undefined\r\n\r\n      let spring = new Spring(bodies[bodyA], bodies[bodyB], {\r\n        worldAnchorA,\r\n        worldAnchorB,\r\n        localAnchorA,\r\n        localAnchorB,\r\n        restLength,\r\n        stiffness,\r\n        damping,\r\n      })\r\n\r\n      spring.uuid = uuid\r\n\r\n      let postStepSpring = (e) => spring.applyForce()\r\n\r\n      springs[uuid] = postStepSpring\r\n\r\n      // Compute the force after each step\r\n      world.addEventListener('postStep', springs[uuid])\r\n      break\r\n    }\r\n    case 'removeSpring': {\r\n      world.removeEventListener('postStep', springs[uuid])\r\n      break\r\n    }\r\n    case 'addRay': {\r\n      const { from, to, ...options } = props\r\n      const ray = new Ray(from ? new Vec3(...from) : undefined, to ? new Vec3(...to) : undefined)\r\n      options.mode = Ray[options.mode.toUpperCase()]\r\n      options.result = new RaycastResult()\r\n      rays[uuid] = () => {\r\n        ray.intersectWorld(world, options)\r\n        const {\r\n          body,\r\n          shape,\r\n          rayFromWorld,\r\n          rayToWorld,\r\n          hitNormalWorld,\r\n          hitPointWorld,\r\n          ...rest\r\n        } = options.result\r\n        self.postMessage({\r\n          op: 'event',\r\n          type: 'rayhit',\r\n          ray: {\r\n            from,\r\n            to,\r\n            direction: ray.direction.toArray(),\r\n            collisionFilterGroup: ray.collisionFilterGroup,\r\n            collisionFilterMask: ray.collisionFilterMask,\r\n            uuid,\r\n          },\r\n          body: body ? body.uuid : null,\r\n          shape: shape ? { ...shape, body: body.uuid } : null,\r\n          rayFromWorld: rayFromWorld.toArray(),\r\n          rayToWorld: rayToWorld.toArray(),\r\n          hitNormalWorld: hitNormalWorld.toArray(),\r\n          hitPointWorld: hitPointWorld.toArray(),\r\n          ...rest,\r\n        })\r\n      }\r\n      world.addEventListener('preStep', rays[uuid])\r\n      break\r\n    }\r\n    case 'removeRay': {\r\n      world.removeEventListener('preStep', rays[uuid])\r\n      delete rays[uuid]\r\n      break\r\n    }\r\n  }\r\n}\r\n"],"names":["Mat3","constructor","elements","identity","e","this","setZero","setTrace","vector","x","y","z","getTrace","target","Vec3","vmult","v","smult","s","i","length","mmult","matrix","j","sum","k","scale","t","solve","b","eqns","nr","push","n","np","p","multiplier","isNaN","Infinity","toString","row","column","value","undefined","copy","r","reverse","setRotationFromQuaternion","q","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","transpose","Mt","M","cross","vx","vy","vz","set","vadd","vsub","crossmat","normalize","Math","sqrt","invN","unit","ninv","lengthSquared","dot","distanceTo","px","py","pz","distanceSquared","scalar","vmul","addScaledVector","isZero","negate","tangents","t1","t2","norm","Vec3_tangents_n","inorm","randVec","Vec3_tangents_randVec","abs","toArray","lerp","almostEquals","precision","almostZero","isAntiparallelTo","antip_neg","clone","ZERO","UNIT_X","UNIT_Y","UNIT_Z","AABB","options","lowerBound","upperBound","setFromPoints","points","position","quaternion","skinSize","l","u","tmp","aabb","extend","min","max","overlaps","l1","u1","l2","u2","overlapsX","overlapsY","overlapsZ","volume","contains","getCorners","a","c","d","f","g","h","toLocalFrame","frame","corners","transformIntoFrame_corners","corner","pointToLocal","toWorldFrame","pointToWorld","overlapsRay","ray","direction","from","dirFracX","dirFracY","dirFracZ","t3","t4","t5","t6","tmin","tmax","ArrayCollisionMatrix","get","bi","bj","index","temp","reset","setNumObjects","EventTarget","addEventListener","type","listener","_listeners","listeners","includes","hasEventListener","hasAnyEventListener","removeEventListener","indexOf","splice","dispatchEvent","event","listenerArray","call","Quaternion","setFromAxisAngle","angle","sin","cos","toAxisAngle","targetAxis","acos","setFromVectors","sfv_t1","sfv_t2","PI","mult","quat","ax","ay","az","aw","bx","by","bz","bw","inverse","conjugate","inorm2","normalizeFast","qx","qy","qz","qw","ix","iy","iz","iw","toEuler","order","heading","attitude","bank","test","atan2","sqx","sqy","sqz","asin","Error","setFromEuler","c1","c2","c3","s1","s2","s3","slerp","toQuat","omega","cosom","sinom","scale0","scale1","integrate","angularVelocity","dt","angularFactor","half_dt","Shape","id","idCounter","boundingSphereRadius","collisionResponse","collisionFilterGroup","collisionFilterMask","material","body","updateBoundingSphereRadius","calculateLocalInertia","mass","calculateWorldAABB","pos","types","SPHERE","PLANE","BOX","COMPOUND","CONVEXPOLYHEDRON","HEIGHTFIELD","PARTICLE","CYLINDER","TRIMESH","Transform","worldPoint","result","pointToLocalFrame","localPoint","pointToWorldFrame","vectorToWorldFrame","localVector","tmpQuat","worldVector","ConvexPolyhedron","props","vertices","faces","normals","axes","faceNormals","computeNormals","worldVertices","worldVerticesNeedsUpdate","worldFaceNormals","worldFaceNormalsNeedsUpdate","uniqueAxes","slice","uniqueEdges","computeEdges","edges","edge","face","numVertices","found","getFaceNormal","vertex","console","error","warn","va","vb","vc","computeNormal","clipAgainstHull","posA","quatA","hullB","posB","quatB","separatingNormal","minDist","maxDist","WorldNormal","closestFaceB","dmax","Number","MAX_VALUE","worldVertsB1","worldb","clipFaceAgainstHull","findSeparatingAxis","faceListA","faceListB","faceANormalWS3","Worldnormal1","deltaC","worldEdge0","worldEdge1","Cross","dmin","hullA","testSepAxis","numFacesA","fi","numFacesB","e0","e1","dist","axis","project","maxminA","maxminB","maxA","minA","maxB","minB","d0","d1","aabbmax","aabbmin","computeLocalAABB","getPlaneConstantOfFace","face_i","faceANormalWS","edge0","WorldEdge0","worldPlaneAnormal1","planeNormalWS1","worldA1","localPlaneNormal","planeNormalWS","pVtxIn","pVtxOut","closestFaceA","polyA","connectedFaces","numVerticesA","otherFace","localPlaneEq","planeEqWS","clipFaceAgainstPlane","shift","depth","log","point","normal","inVertices","outVertices","planeNormal","planeConstant","n_dot_first","n_dot_last","numVerts","firstVertex","lastVertex","vi","newv","computeWorldVertices","verts","worldVerts","computeWorldFaceNormals","N","worldNormals","max2","norm2","minx","miny","minz","maxx","maxy","maxz","tempWorldVertex","getAveragePointLocal","transformAllPoints","offset","pointIsInside","pointInside","vToP","r1","vToPointInside","r2","cb","ab","shape","localAxis","localOrigin","vs","vectorToLocalFrame","add","val","Box","halfExtents","convexPolyhedronRepresentation","updateConvexPolyhedronRepresentation","sx","sy","sz","V","calculateInertia","getSideNormals","sixTargetVectors","sides","ex","forEachWorldCorner","callback","worldCornerTempPos","worldCornersTemp","wc","BODY_SLEEP_STATES","Body","world","preStep","postStep","vlambda","previousPosition","interpolatedPosition","initPosition","velocity","initVelocity","force","invMass","linearDamping","STATIC","DYNAMIC","allowSleep","sleepState","sleepSpeedLimit","sleepTimeLimit","timeLastSleepy","wakeUpAfterNarrowphase","torque","initQuaternion","previousQuaternion","interpolatedQuaternion","initAngularVelocity","shapes","shapeOffsets","shapeOrientations","inertia","invInertia","invInertiaWorld","invMassSolve","invInertiaSolve","invInertiaWorldSolve","fixedRotation","angularDamping","linearFactor","aabbNeedsUpdate","boundingRadius","wlambda","addShape","updateMassProperties","wakeUp","prevState","SLEEPING","wakeupEvent","sleep","sleepTick","time","speedSquared","speedLimitSquared","AWAKE","SLEEPY","sleepyEvent","sleepEvent","updateSolveMassProperties","KINEMATIC","_offset","_orientation","orientation","updateBoundingRadius","radius","computeAABB","tmpVec","tmpQuat$1","bodyQuat","shapeAABB","computeAABB_shapeAABB","updateInertiaWorld","I","m1","uiw_m1","m2","uiw_m2","applyForce","relativePoint","rotForce","Body_applyForce_rotForce","applyLocalForce","localForce","worldForce","Body_applyLocalForce_worldForce","relativePointWorld","Body_applyLocalForce_relativePointWorld","applyImpulse","impulse","velo","Body_applyImpulse_velo","rotVelo","Body_applyImpulse_rotVelo","applyLocalImpulse","localImpulse","worldImpulse","Body_applyLocalImpulse_worldImpulse","Body_applyLocalImpulse_relativePoint","Body_updateMassProperties_halfExtents","fixed","getVelocityAtWorldPoint","quatNormalize","quatNormalizeFast","angularVelo","iMdt","tx","ty","tz","COLLIDE_EVENT_NAME","Broadphase","useBoundingBoxes","dirty","collisionPairs","p1","p2","needBroadphaseCollision","bodyA","bodyB","intersectionTest","pairs1","pairs2","doBoundingBoxBroadphase","doBoundingSphereBroadphase","Broadphase_collisionPairs_r","boundingRadiusSum2","makePairsUnique","Broadphase_makePairsUnique_temp","Broadphase_makePairsUnique_p1","Broadphase_makePairsUnique_p2","id1","id2","key","keys","pop","pairIndex","setWorld","aabbQuery","boundingSphereCheck","sa","sb","pow","NaiveBroadphase","bodies","RaycastResult","rayFromWorld","rayToWorld","hitNormalWorld","hitPointWorld","hasHit","hitFaceIndex","distance","shouldStop","abort","Ray","to","checkCollisionResponse","skipBackfaces","mode","ANY","intersectWorld","updateDirection","getAABB","tmpAABB","tmpArray","broadphase","intersectBodies","intersectBody","xi","intersectBody_xi","qi","intersectBody_qi","intersectShape","v0","intersect","distanceFromIntersection","intersectMethod","_intersectBox","box","reportedShape","_intersectConvex","_intersectPlane","worldNormal","len","planeToFrom","n_dot_dir","planePointToFrom","dir_scaled_with_t","reportIntersection","_intersectHeightfield","data","elementSize","localRay","intersectHeightfield_localRay","intersectHeightfield_index","iMinX","iMinY","iMaxX","iMaxY","getIndexOfPosition","getAabbAtIndex","getConvexTrianglePillar","pillarOffset","worldPillarOffset","pillarConvex","intersectConvexOptions","_intersectSphere","sphere","delta","intersectionPoint","Ray_intersectSphere_intersectionPoint","Ray_intersectSphere_normal","d2","intersectConvex_normal","intersectConvex_vector","faceList","fromToDistance","Nfaces","faceNormal","intersectPoint","pointInTriangle","_intersectTrimesh","mesh","intersectTrimesh_normal","triangles","intersectTrimesh_triangles","treeTransform","intersectTrimesh_treeTransform","localDirection","intersectTrimesh_localDirection","localFrom","intersectTrimesh_localFrom","localTo","intersectTrimesh_localTo","worldIntersectPoint","intersectTrimesh_worldIntersectPoint","intersectTrimesh_worldNormal","indices","fromToDistanceSquared","tree","rayQuery","trianglesIndex","getNormal","getVertex","squaredDistance","ALL","CLOSEST","v1","v2","dot00","dot01","dot02","dot11","dot12","prototype","SAPBroadphase","axisList","axisIndex","_addBodyHandler","_removeBodyHandler","idx","sortList","checkBounds","insertionSortX","insertionSortY","insertionSortZ","autoDetectAxis","sumX","sumX2","sumY","sumY2","sumZ","sumZ2","centerX","centerY","centerZ","varianceX","varianceY","varianceZ","Utils","biPos","bjPos","ri","defaults","Constraint","collideConnected","wakeUpBodies","equations","update","enable","eqs","enabled","disable","JacobianElement","spatial","rotational","multiplyElement","element","multiplyVectors","Equation","minForce","maxForce","eps","jacobianElementA","jacobianElementB","setSpookParams","stiffness","relaxation","timeStep","computeB","GW","computeGW","computeGq","computeGiMf","GA","GB","xj","vj","wi","wj","computeGWlambda","ti","fj","tj","invMassi","invMassj","iMfi","iMfj","invIi_vmult_taui","invIj_vmult_tauj","computeGiMGt","invIi","invIj","tmp$1","addToWlambda","deltalambda","addToWlambda_temp","computeC","ContactEquation","restitution","rj","ni","rixn","ContactEquation_computeB_temp1","rjxn","ContactEquation_computeB_temp2","penetrationVec","ContactEquation_computeB_temp3","ePlusOne","getImpactVelocityAlongNormal","ContactEquation_getImpactVelocityAlongNormal_vi","ContactEquation_getImpactVelocityAlongNormal_vj","ContactEquation_getImpactVelocityAlongNormal_xi","ContactEquation_getImpactVelocityAlongNormal_xj","relVel","ContactEquation_getImpactVelocityAlongNormal_relVel","PointToPointConstraint","pivotA","pivotB","equationX","equationY","equationZ","ConeEquation","axisA","axisB","nj","nixnj","tmpVec1","njxni","tmpVec2","RotationalEquation","maxAngle","tmpVec1$1","tmpVec2$1","ConeTwistConstraint","coneEquation","twistEquation","twistAngle","cone","twist","DistanceConstraint","eq","distanceEquation","halfDist","LockConstraint","halfWay","xA","xB","yA","yB","zA","zB","rotationalEquation1","rotationalEquation2","r3","rotationalEquation3","motorEquation","RotationalMotorEquation","targetVelocity","HingeConstraint","rotational1","rotational2","motor","enableMotor","disableMotor","setMotorSpeed","speed","setMotorMaxForce","worldAxisA","HingeConstraint_update_tmpVec1","worldAxisB","HingeConstraint_update_tmpVec2","FrictionEquation","slipForce","rixt","FrictionEquation_computeB_temp1","rjxt","FrictionEquation_computeB_temp2","ContactMaterial","friction","contactEquationStiffness","contactEquationRelaxation","frictionEquationStiffness","frictionEquationRelaxation","materials","Material","name","Spring","restLength","damping","localAnchorA","localAnchorB","worldAnchorA","setWorldAnchorA","worldAnchorB","setWorldAnchorB","getWorldAnchorA","getWorldAnchorB","applyForce_r","r_unit","applyForce_r_unit","applyForce_u","applyForce_f","applyForce_tmp","applyForce_worldAnchorA","applyForce_worldAnchorB","applyForce_ri","applyForce_rj","ri_x_f","applyForce_ri_x_f","rj_x_f","applyForce_rj_x_f","rlen","Sphere","Cylinder","radiusTop","radiusBottom","height","numSegments","bottomface","topface","theta","thetaN","Particle","Plane","worldNormalNeedsUpdate","computeWorldNormal","tempNormal","maxVal","Heightfield","maxValue","minValue","updateMinValue","updateMaxValue","cacheEnabled","_cachedPillars","setHeightValueAtIndex","yi","clearCachedConvexTrianglePillar","getRectMinMax","clamp","floor","getTriangleAt","edgeClamp","getHeightAt_idx","upper","getTriangle","getNormalAt","getNormalAt_a","getNormalAt_b","getNormalAt_c","getNormalAt_e0","getNormalAt_e1","getHeightAt","getHeightAt_a","getHeightAt_b","getHeightAt_c","cx","cy","barycentricWeights","getHeightAt_weights","getCacheConvexTrianglePillarKey","getUpperTriangle","getCachedConvexTrianglePillar","setCachedConvexTrianglePillar","convex","offsetResult","setHeightsFromImage","image","canvas","document","createElement","width","context","getContext","drawImage","imageData","getImageData","unshift","OctreeNode","root","children","insert","elementData","level","nodeData","maxDepth","subdivided","subdivide","halfDiagonal","child","queue","node","Array","apply","tmpAABB$1","removeEmptyNodes","Octree","Trimesh","Float32Array","Int16Array","updateEdges","updateNormals","updateAABB","updateTree","triangleAABB","i3","_getUnscaledVertex","getTrianglesInAABB","unscaledAABB","isx","isy","isz","setScale","wasUniform","isUniform","computeNormals_n","Object","split","parseInt","getEdgeVertex","edgeIndex","firstOrSecond","vertexStore","vertexIndex","getEdgeVector","vectorStore","getEdgeVector_va","getEdgeVector_vb","out","getWorldVertex","getTriangleVertices","cli_aabb","computeLocalAABB_worldVert","calculateWorldAABB_frame","calculateWorldAABB_aabb","createTorus","tube","radialSegments","tubularSegments","arc","GSSolver","addEquation","removeEquation","removeAllEquations","iterations","tolerance","iter","maxIter","tolSquared","Neq","Nbodies","B","invC","deltalambdaTot","GWlambda","lambdaj","invCs","GSSolver_solve_invCs","Bs","GSSolver_solve_Bs","lambda","GSSolver_solve_lambda","invDt","Vec3Pool","objects","release","args","Nargs","constructObject","resize","size","COLLISION_TYPES","Narrowphase","contactPointPool","frictionEquationPool","frictionResult","v3pool","currentContactMaterial","defaultContactMaterial","enableFrictionReduction","createContactEquation","si","sj","overrideShapeA","overrideShapeB","cm","matA","matB","createFrictionEquationsFromContact","contactEquation","outArray","shapeA","shapeB","mug","gravity","reducedMass","pool","createFrictionFromAverage","numContacts","f1","f2","averageNormal","averageContactPointA","averageContactPointB","invNumContacts","getContacts","oldcontacts","frictionPool","tmpQuat1","qj","tmpQuat2","tmpVec1$2","tmpVec2$2","bodyContactMaterial","getContactMaterial","justTest","shapeContactMaterial","resolver","retval","shapeOverlapKeeper","bodyOverlapKeeper","sphereSphere","rsi","rsj","spherePlane","point_on_plane_to_sphere","plane_to_sphere_ortho","boxBox","convexConvex","sphereBox","sphereBox_sides","box_to_sphere","R","side_ns","sphereBox_side_ns","side_ns1","sphereBox_side_ns1","side_ns2","sphereBox_side_ns2","side_h","side_penetrations","side_dot1","side_dot2","side_distance","nsides","ns","sphereBox_ns","ns1","sphereBox_ns1","ns2","sphereBox_ns2","h1","h2","dot1","dot2","sphere_to_corner","sphereBox_sphere_to_corner","edgeTangent","edgeCenter","orthogonal","Nsides","orthonorm","tdist","ndist","res","planeBox","planeConvex","sepAxis","convexConvex_sepAxis","convexConvex_q","sphereConvex","convex_to_sphere","worldCorner","sphereConvex_worldCorner","sphereConvex_sphereToCorner","nfaces","sphereConvex_worldNormal","sphereConvex_worldPoint","worldSpherePointClosestToPlane","sphereConvex_worldSpherePointClosestToPlane","sphereConvex_penetrationVec","penetration","worldPointToSphere","sphereConvex_sphereToWorldPoint","faceVerts","Nverts","worldVertex","pointInPolygon","penetrationVec2","penetrationSpherePoint","Nfaceverts","sphereConvex_edge","edgeUnit","sphereConvex_edgeUnit","v1_to_xi","xi_to_p","planeShape","convexShape","planePosition","convexPosition","planeQuat","convexQuat","planeBody","convexBody","planeConvex_v","planeConvex_normal","relpos","planeConvex_relpos","projected","planeConvex_projected","boxConvex","sphereHeightfield","sphereShape","hfShape","spherePos","hfPos","sphereQuat","hfQuat","sphereBody","hfBody","sphereHeightfield_tmp2","localSpherePos","sphereHeightfield_tmp1","ceil","minMax","numContactsBefore","intersecting","boxHeightfield","convexHeightfield","convexPos","convexHeightfield_tmp2","convexHeightfield_faceList","localConvexPos","convexHeightfield_tmp1","sphereParticle","particleSphere_normal","planeParticle","particlePlane_normal","particlePlane_relpos","particlePlane_projected","boxParticle","convexParticle","penetratedFaceIndex","penetratedFaceNormal","convexParticle_penetratedFaceNormal","worldPenetrationVec","convexParticle_worldPenetrationVec","minPenetration","local","convexParticle_local","cqj","convexParticle_vertexToParticle","sphereTrimesh","trimeshShape","trimeshPos","trimeshQuat","trimeshBody","edgeVertexA","sphereTrimesh_edgeVertexA","edgeVertexB","sphereTrimesh_edgeVertexB","edgeVector","sphereTrimesh_edgeVector","edgeVectorUnit","sphereTrimesh_edgeVectorUnit","sphereTrimesh_localSpherePos","sphereTrimesh_tmp","localSphereAABB","sphereTrimesh_localSphereAABB","sphereTrimesh_v2","sphereTrimesh_relpos","sphereTrimesh_triangles","sphereRadius","sphereTrimesh_v","radiusSquared","positionAlongEdgeB","positionAlongEdgeA","sphereTrimesh_va","sphereTrimesh_vb","sphereTrimesh_vc","sphereTrimesh_normal","planeTrimesh","planePos","planeTrimesh_normal","planeTrimesh_relpos","planeTrimesh_projected","pointInPolygon_edge","pointInPolygon_edge_x_normal","pointInPolygon_vtp","positiveResult","edge_x_normal","vertex_to_p","OverlapKeeper","current","previous","getKey","tick","getDiff","additions","removals","al","bl","keyA","unpackAndPush","keyB","array","TupleDictionary","World","contacts","frictionEquations","quatNormalizeSkip","stepnumber","default_dt","nextId","hasActiveBodies","solver","constraints","narrowphase","collisionMatrix","collisionMatrixPrevious","contactmaterials","contactMaterialTable","defaultMaterial","doProfiling","profile","makeContactConstraints","accumulator","subsystems","addBodyEvent","removeBodyEvent","idToBodyMap","numObjects","collisionMatrixTick","addConstraint","removeConstraint","rayTest","raycastClosest","raycastAll","tmpRay$1","raycastAny","addBody","removeBody","getBodyById","getShapeById","sl","addMaterial","m","addContactMaterial","cmat","step","timeSinceLastCalled","maxSubSteps","internalStep","substeps","World_step_p1","World_step_p2","profilingStart","World_step_frictionEquationPool","gx","gy","gz","performance","now","Nsubsystems","Nconstraints","World_step_oldContacts","NoldContacts","NoldFrictionEquations","ncontacts","mu","World_step_collideEvent","contact","emitContactEvents","ld","av","ad","World_step_preStepEvent","clearForces","World_step_postStepEvent","nowOffset","Date","timing","navigationStart","beginContactEvent","endContactEvent","beginShapeContactEvent","endShapeContactEvent","hasBeginContact","hasEndContact","hasBeginShapeContact","hasEndShapeContact","springs","rays","config","subscriptions","tempVector","createShape","map","syncBodies","self","postMessage","op","uuid","reduce","acc","onmessage","positions","quaternions","broadphases","assign","numberOfBodies","observations","active","buffer","rotation","bodyType","onCollide","extra","toUpperCase","forEach","shapeBody","impactVelocity","collisionFilters","bodyFilterGroup","bodyFilterMask","targetFilterGroup","targetFilterMask","optns","constraint","isArray","filter","thisId","spring","postStepSpring","rest"],"mappings":"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"}\",V=!1,function(I){return Z=Z||U(c,l,V),new Worker(Z,I)});export default function({children:U,step:c=1/60,gravity:l=[0,-10,0],tolerance:V=.001,iterations:Z=5,allowSleep:X=!1,broadphase:x=\"Naive\",axisIndex:R=0,defaultContactMaterial:L={contactEquationStiffness:1e6},size:A=1e3}){const{invalidate:W}=Q(),[s]=g(()=>new d),[y]=g({}),[u]=g(()=>({positions:new Float32Array(3*A),quaternions:new Float32Array(4*A)})),[S]=g({}),[m]=g({}),i=B({});F(()=>{function I(){s.postMessage(G({op:\"step\"},u),[u.positions.buffer,u.quaternions.buffer])}return s.postMessage({op:\"init\",props:{gravity:l,tolerance:V,step:c,iterations:Z,broadphase:x,allowSleep:X,axisIndex:R,defaultContactMaterial:L}}),s.onmessage=g=>{switch(g.data.op){case\"frame\":u.positions=g.data.positions,u.quaternions=g.data.quaternions,g.data.observations.forEach(([I,g])=>m[I](g)),requestAnimationFrame(I),g.data.active&&W();break;case\"sync\":i.current=g.data.bodies.reduce((I,B)=>G({},I,{[B]:g.data.bodies.indexOf(B)}),{});break;case\"event\":switch(g.data.type){case\"collide\":S[g.data.target](G({},g.data,{target:y[g.data.target],body:y[g.data.body]}));break;case\"rayhit\":S[g.data.ray.uuid](G({},g.data,{body:g.data.body?y[g.data.body]:null}))}}},I(),()=>s.terminate()},[]);const Y=b(()=>({worker:s,bodies:i,refs:y,buffers:u,events:S,subscriptions:m}),[s,i,y,u,S,m]);return I.createElement(C.Provider,{value:Y},U)}\n"],"sourceRoot":""}